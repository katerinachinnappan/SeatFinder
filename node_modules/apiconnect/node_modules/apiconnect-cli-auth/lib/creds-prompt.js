/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

var Promise = require('bluebird');
var inquirer = require('inquirer');
var logger = require('apiconnect-cli-logger');
var config = require('apiconnect-config').loadConfig();
var g = require('strong-globalize')();

var prompt = module.exports;

/** Prompt for the API Connect server **/

prompt.promptServer = function(options) {
  var serverConfig = config.getOne('org');
  return new Promise(function(resolve) {
    var inputServer = [];
    var p;
    if (!options.server) {
      p = {
        type: 'input',
        message: 'Server',
        name: 'server',
      };
      if (serverConfig && serverConfig.hostname) {
        p.default = serverConfig.hostname;
      }
      inputServer.push(p);
    }
    logger.writeln(g.f('Enter the {{API Connect}} server'));
    inquirer.prompt(inputServer, function(answers) {
      options.server = answers.server || options.server;
      resolve(options);
    });
  });
};

/** Prompt for the Username and the Password **/

prompt.promptUserAndPass = function(options) {
  var serverConfig = config.getOne('org');
  return new Promise(function(resolve) {
    var inputUserAndPass = [];
    var p;
    if (serverConfig && serverConfig.auth) {
      var auth = serverConfig.auth.split(':');
      var username = auth[0];
      var password = auth.length > 1 ? auth[1] : '';
    }
    if (!options.username) {
      p = {
        type: 'input',
        message: 'Username',
        name: 'username',
      };
      if (username) {
        p.default = username;
      }
      inputUserAndPass.push(p);
    }
    if (!options.password) {
      p = {
        type: 'password',
        message: 'Password (typing will be hidden)',
        name: 'password',
      };
      if (password) {
        p.default = password;
      }
      inputUserAndPass.push(p);
    }
    inquirer.prompt(inputUserAndPass, function(answers) {
      options.username = answers.username || options.username;
      options.password = answers.password || options.password;
      resolve(options);
    });
  });
};

/** Prompt for the one-time Passcode **/

prompt.promptPasscode = function(options) {
  return new Promise(function(resolve) {
    var inputPasscode = [];
    var p = {
      type: 'input',
      message: 'Enter Bluemix one-time passcode:',
      name: 'passcode',
    };
    inputPasscode.push(p);
    inquirer.prompt(inputPasscode, function(answers) {
      options.passcode = answers.passcode || null;
      resolve(options);
    });
  });
};

