/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

var Bluemix = require('apiconnect-cli-login-bluemix');
var Promise = require('bluebird');
var _ = require('lodash');
var browserOpen = require('open');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var prompt = require('./creds-prompt');

/**
 * Login to a bluemix server >= 5030
 * @param {String} hostname
 * @param {object} [options]
 * @param {String} [options.code]
 * @param {String} [options.passcode]
 * @param {String} [options.apikey]
 * @param {boolean} [options.interactiveMode] Prompt for passcode if needed. If false, code or passcode must be
 * provided. Defaults true.
 */
function login(hostname, options) {
  options = options || {};
  _.defaults(options, {
    interactiveMode: true,
  });

  var bluemix = new Bluemix(hostname);
  return bluemix.status().then(function(tokenStatus) {
    if (tokenStatus.loggedIn && tokenStatus.expiration) {
      return;
    }

    // Login path for OAuth handshake
    if (options.code) {
      return bluemix.loginWithCode(options.code);
    }

    if (options.passcode) {
      return bluemix.loginWithPasscode(options.passcode)
      .catch(function(err) {
        throw new Error(g.f('Error logging into Host: %s', err));
      });
    }

    if (options.apikey) {
      return bluemix.loginWithApiKey(options.apikey)
         .catch(function(err) {
           throw new Error(g.f('Error logging into Host: %s', err));
         });
    }


    if (!options.sso) {
      var promptUserAndPassPromise;

      // basic auth to get token
      if (!options.username || !options.password) {
        if (options.interactiveMode) {
          promptUserAndPassPromise = prompt.promptUserAndPass({
            username: options.username,
            password: options.password,
            server: hostname,
          });
        } else {
          var err = new Error(g.f('The {{username}} and {{password}} are required.'));
          err.missingOptions = [];
          if (!options.username) {
            err.missingOptions.push('--username');
          }
          if (!options.password) {
            err.missingOptions.push('--password');
          }

          promptUserAndPassPromise = Promise.reject(err);
        }
      } else {
        promptUserAndPassPromise = Promise.resolve(options);
      }

      return promptUserAndPassPromise.then(function(options) {
        return bluemix.loginWithBasicAuth(options.username, options.password);
      });
    }

    // OAuth login
    return bluemix.getPasscodeUrl().then(function(passcodeURL) {
      if (!options.interactiveMode) {
        var err = new Error(g.f('{{passcode}} is required to perform non-interactive bluemix login'));
        err.missingOptions = [ '--passcode' ];
        err.additionalInfo = g.f('Generate a {{passcode}} from %s.', passcodeURL);
        return Promise.reject(err);
      }
      if (!passcodeURL) {
        throw new Error(g.f('Error getting {{passcode}} url from host : %s', hostname));
      }

      logger.writeln(g.f('Generate a {{passcode}} from %s', passcodeURL));

      if (process.stdout.isTTY) {
        var stdin = process.stdin;
        stdin.setRawMode(true);
        stdin.setEncoding('utf8');
        logger.writeln(g.f('(Press the spacebar to automatically launch a browser)'));
        stdin.on('data', function(key) {
          if (key === '\u0020') {
            browserOpen(passcodeURL);
          }
        });
      }

      return prompt.promptPasscode({}).then(function(opts) {
        var passcode = opts.passcode.replace(/ /g, '');
        return bluemix.loginWithPasscode(passcode);
      }).catch(function(err) {
        throw new Error(g.f('Error logging into host: %s', err));
      });
    });
  });
}

function logout(hostname) {
  var bluemix = new Bluemix(hostname);
  return bluemix.logout();
}

module.exports = {
  login: login,
  logout: logout,
};

