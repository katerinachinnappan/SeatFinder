/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

var Promise = require('bluebird');
var apicAuth = require('./auth');
var bluemixLogin = require('./bluemix-login');
var debug = require('debug')('apiconnect-cli-auth:lib:logout');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');

exports.logout = logout;
exports.logoutCmd = logoutCmd;

function logoutCmd(opt) {
  var logoutOptions = {
    useDefaultOrg: true,
    useDefaultRegion: false,
  };
  if (opt.server) {
    logoutOptions.uri = 'https://' + opt.server;
  }
  return logout(logoutOptions).then(function(hostnameArr) {
    var hostname = '';
    // hostnameArr could be an array of the same hostname or undefined,
    // pick the 1st valid hostname
    if (Array.isArray(hostnameArr)) {
      for (var i = 0; i < hostnameArr.length; i++) {
        if (hostnameArr[i] && hostnameArr[i] !== '') {
          hostname = hostnameArr[i];
          break;
        }
      }
    } else {
      hostname = hostnameArr;
    }
    logger.writeln(g.f('Logged out of server %s', hostname));
  });
}

/**
 * Logout of apim server.
 *
 * @param {object} [options]
 * @param {string} [options.uri] URI to override value in config.
 * @param {boolean} [options.useDefaultRegion] If no server is specified, logout of us-south region.
 * @param {boolean} [options.bluemix] Logout of bluemix as well.
 */
function logout(options) {
  var creds = apicAuth.getCredentials(options);

  if (!creds) {
    return Promise.reject(new Error(g.f('The user is not logged in.')));
  }

  function netrcLogout() {
    if (creds.username) {
      var username = creds.username;
      if (username.indexOf('/') > 0) {
        username = username.substr(username.indexOf('/') + 1);
      }

      return apicAuth.logout(creds.host).return(creds.host).catch(function(err) {
        debug(err);
        throw err;
      });
    }
    return Promise.resolve();
  }

  function jwtLogout() {
    if (creds.token) {
      return Promise.resolve(bluemixLogin.logout(creds.host)).return(creds.host);
    };
    return Promise.resolve();
  }

  return Promise.all([ netrcLogout(), jwtLogout() ]);
}

