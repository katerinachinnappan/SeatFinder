/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

/*eslint brace-style: 0, max-len: 0*/

/**
 * Provides apis to store/fetch credentials assocaited with a machine in .netrc
 * file.
 *
 */

var _ = require('lodash');
var fs = require('fs');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var os = require('os');
var u = require('apiconnect-cli-util').Util;

var NETRC = '.netrc';
var _NETRC = '_netrc';//for windows system

var creds;
/**
 * Return the absolute path to the netrc file
 * @returns {string}
 */
function netrcFilename() {
  if (os.platform() === 'win32') {
    return u.userHome() + '/' + _NETRC;
  }
  return u.userHome() + '/' + NETRC;
}
/**
 * Load the .netrc file, parse it and then create the credentials object
 *
 */
function loadNetrc() {
  var netrcfilename = netrcFilename();
  if (!fs.existsSync(netrcfilename)) {
    creds = {};
    save(true);
  }

  checkPermissions(netrcfilename);
  var data = fs.readFileSync(netrcfilename);
  creds = parse(data);
}
/**
 * Parse the .netrc file format. The expected format is:
 *
 * <pre>
 *    machine <machine> login <login> password <password>
 *      or
 *    machine <machine>
 *      login <login>
 *      password <password>
 * </pre>
 *
 * @param data
 * @returns { '<machine>': { login: <login>, password: <password>} }
 */
function parse(/**Buffer*/data) {
  var tokens = data.toString().split('\n');
  var current;
  var rsp = {};
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i].trim();
    if (token[0] === '#' || token === '') { //ignore this line for now
      continue;
    }
    var items = token.split(/\s/);
    var j = 0;
    while (j < items.length) {
      if (items[j] === 'machine') {
        current = items[j + 1];
        j = j + 2;
        rsp[current] = {};
        continue;
      }
      if (items[j] === 'login') {
        rsp[current].login = items[j + 1];
        j = j + 2;
        continue;
      }
      if (items[j] === 'password') {
        rsp[current].password = items[j + 1];
        j = j + 2;
      }
      else {
        j++;
      }
    }
  }
  return rsp;
}

/**
 * Lookup credentials associated to <tt>machine</tt>
 *
 * @param machine
 * @returns {login: login, password: password}
 */
function lookup(/**string*/machine) {
  if (!creds) {
    loadNetrc();
  }
  if (!machine) {
    return null;
  }
  return creds[machine];
}
/**
 * Return all the credentials that are stored in .netrc file as json object
 *
 * @returns {'machine': {'login': '', password: ''} }
 */
function credentials() {
  if (!creds) {
    loadNetrc();
  }
  return creds;
}
/**
 * Add/Set credentials associated to <tt>machine</tt>
 *
 * @param machine  {String}
 * @param username {String}
 * @param password {String}
 */
function setCredential(machine, username, password) {
  var cred = credentials();
  if (!cred) {
    cred = {};
  }
  cred[machine] = { login: username, password: password };
  save();
}
/**
 * Save credentials
 *
 */
function save(createFile) {
  var str = '';
  var rsp = credentials();
  var machines = _.keys(rsp);
  for (var i = 0; i < machines.length; i++) {
    var machine = machines[i];
    str += 'machine ' + machine + '\n';
    str += '  login ' + rsp[machine].login + '\n';
    str += '  password ' + rsp[machine].password;
    if (i < machines.length - 1) {
      str += '\n';
    }
  }
  fs.writeFileSync(netrcFilename(), str);
  if (createFile) {
    try {
      fs.chmodSync(netrcFilename(), '0600');
    } catch (err) {
      // Log and ignore error. Win32 platforms dont support chmod perms.
      logger.info(g.f('Unable to {{chmod 0600}} file %s', netrcFilename()));
    }
  }
}
/**
 * Delete credentials associated to <tt>machine</tt>
 * @param machine
 */
function deleteCredential(machine) {
  var cred = credentials();
  delete cred[machine];
  save();
}

function checkPermissions(filePath) {
  var mode = fs.statSync(filePath).mode;

  //Converting it to Octal format
  var perm = '0' + (mode & parseInt('777', 8)).toString(8);

  if (perm !== '0600' && os.platform() !== 'win32') {
    logger.writeln(g.f('Permission bits for %s should be {{0600}}, but are %s.',
      filePath, perm));
    logger.writeln(g.f('You should set the file permissions in such a ' +
      'way that your credentials are NOT accessible by others.'));
  }
}

module.exports.lookup = lookup;
module.exports.credentials = credentials;
module.exports.setCredential = setCredential;
module.exports.deleteCredential = deleteCredential;

