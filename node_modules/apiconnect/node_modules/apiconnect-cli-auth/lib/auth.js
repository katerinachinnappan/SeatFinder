/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth


var Bluemix = require('apiconnect-cli-login-bluemix');
var Netrc = require('./netrc');
var Promise = require('bluebird');
var _ = require('lodash');
var apicConfig = require('apiconnect-config');
var apimClient = require('apiconnect-apim-client');
var debug = require('debug')('apiml:auth');
var util = require('./util');

var _apimanager = 'apimanager';
var config = apicConfig.loadConfig();

/**
 * @typedef BluemixStatus
 * @type Object
 * @property {string} url Bluemix login URL
 * @property {boolean} loggedIn
 * @property {number} expiration token expiration
 */

/**
 * @typedef Credentials
 * @type Object
 * @property {string} [login]
 * @property {string} [password]
 * @property {string} [token]
 * @property {BluemixStatus} [bluemixStatus]
 * @property {string} [hostname]
 */

/**
 * Get credentials for a api management server
 * @param {object} [options]
 * @param {string} [options.uri] URI to override value in config.
 * @param {boolean} [options.useDefaultRegion] If no server is available, login to us-south region.
 * @param {boolean} [options.returnHostname] Always return if available.
 *
 * @return {Credentials}
 */
function getCredentials(options) {
  var host = util.resolveHostname(options);
  var bluemix = new Bluemix(host);
  var token = config.getOne(bluemix.tokenKey, apicConfig.TOKEN_STORE);
  var creds = Netrc.lookup(host);
  if (creds) {
    creds.username = creds.login;
  }

  if (token) {
    creds = _.assign({
      token: token,
      bluemixStatus: bluemix.status(),
    }, creds);
  }
  // We weren't able to get creds for this host. Pass back without token/user/password so caller can
  // know what we tried to get creds for.
  if (!creds && host && options.returnHostname) {
    return { host: host };
  }
  if (creds) {
    creds.host = host;
  }
  return creds;
}

/**
 * Login into an APIM management stack.
 *
 * @param username
 * @param password
 * @param host
 * @param callback {Function(err)} if no error is return then err is null - and that's mean that the login has
 *         been successfull.
 */
function login(username, password, host) {

  if (username.indexOf(_apimanager + '/') < 0) {
    username = _apimanager + '/' + username;
  }
  return _authenticate(username, password, host).then(
    function(body) {
      _saveCredentials(username, password, host);
      debug('Done with authentication and validation.');
      return Promise.resolve(body);
    }
  ).catch(function(err) {
    return Promise.reject(err);
  });

};

function logout(server) {
  Netrc.deleteCredential(server);
  return Promise.resolve();
};

module.exports = {
  login: login,
  logout: logout,
  resolveHostname: util.resolveHostname,
  getCredentials: getCredentials,
  DEFAULT_APIM_SERVER: util.DEFAULT_APIM_SERVER,
};

/**
 * Authenticate user into APIC management defined by <tt>host</tt> using credentials defined by
 * <tt>username/password</tt>
 *
 * @param username
 * @param password
 * @param host
 * @param cb {Function(err, rsp, body} callback function that is invoked once authentication is completed
 */
function _authenticate(username, password, host) {
  var opts = {};
  opts.creds = {
    username: username,
    password: password,
    host: host,
  };
  return apimClient.login(opts);
};

/**
 * Update the global configuration properties once user has logged in.
 *
 * @param username
 * @param password
 * @param host g
 */
function _saveCredentials(username, password, host) {
  Netrc.setCredential(host, username, password);
};

