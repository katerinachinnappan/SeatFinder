/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

var Promise = require('bluebird');
var apicAuth = require('./auth');
var g = require('strong-globalize')();
var url = require('url');

function ApicAuthAgent(cmd, options) {
  this._cmd = cmd || {};
  this._cmdOptions = options || {};
}

ApicAuthAgent.prototype.start = function() {
  return Promise.resolve();
};

ApicAuthAgent.prototype.checkLogin = function() {
  // Favor command options over configuration!
  var server = this._cmdOptions.server;
  var self = this;

  if (!server) {
    var type = this._cmd.loginRequired || this._cmd.loginOptional;
    var config = this._cmdOptions.apicConfig;
    switch (type) {
      case 'org':
        server = config.getOne('org');
        break;
      case 'app':
        server = config.getOne('app');
        break;
      case 'catalog':
      case true:
        server = config.getOne('catalog');
        break;
      default:
        return;
    }
    // config is a parsed URL so pull out just the hostname
    server = server ? server.host : null;
  }

  return Promise.resolve(this.getCredentials(server)).then(function(creds) {
    var logger = self._cmdOptions.logger || require('apiconnect-cli-logger');
    if (creds && (creds.username || creds.token)) {
      logger.debug('Successful lookup of %s', server);
      return creds;
    } else {
      if (!self._cmd.loginOptional) {
        throw new Error(g.f('Login to %s is required with {{\'apic login\'}}.', server));
      }
      // It's possible that these creds only have hostname
      return creds;
    }
  });
};

ApicAuthAgent.prototype.getCredentials = function(server) {
  server = server || this._cmdOptions.server;
  if (server) {
    return apicAuth.getCredentials({
      uri: url.format({
        protocol: 'https',
        host: server,
      }),
      returnHostname: true,
    });
  } else {
    if (!this._cmd.loginOptional) {
      throw new Error(g.f('The {{--server}} option is required.'));
    }
    return {};
  }
};

module.exports = ApicAuthAgent;

