/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

var Promise = require('bluebird');
var debug = require('debug')('apic:plugin:swiftserver');
var logger = require('apiconnect-cli-logger');
var path = require('path');

var techPreviewMessage = 'The Swift Server Generator support in API Connect is included as a Tech Preview for evaluation purposes only';

function helpInfo(helpFile) {
  var fs = require('fs');

  var file = path.join(__dirname, 'intl', 'en', helpFile);
  return fs.readFileSync(file, 'utf-8');
}

function launch(generator, generatorArgs) {
  var ssGenerator = require('generator-swiftserver');
  var yeoman = ssGenerator._yeoman; // generator-swiftserver should export _yeoman
  if (!yeoman) {
    try {
      yeoman = require('generator-swiftserver/node_modules/yeoman-generator');
    } catch (_) {
      yeoman = require('yeoman-generator');
    }
  }
  var env = yeoman();

  // Change the working directory to the generator-swiftserver module so that
  // yoeman can discover the generators
  var root = path.dirname(require.resolve('generator-swiftserver/package.json'));
  var cwd = process.cwd();
  debug('changing directory to %s', root);
  process.chdir(root);

  // Set env variable so that the generator knows we've been invoked from apic not yo
  process.env.RUN_BY_COMMAND = 'apic';
  debug('process.env.RUN_BY_COMMAND set to %s', process.env.RUN_BY_COMMAND);

  // lookup for every namespaces, within the environments.paths and lookups
  env.lookup();
  debug('changing directory back to %s', cwd);
  process.chdir(cwd); // Switch back

  generatorArgs = generatorArgs || [];
  var args = [generator].concat(generatorArgs);
  var opts = {};
  return new Promise(function(resolve, reject) {
    env.run(args, opts, function(err) {
      if (err) {
        logger.error('Error', 'apic ' + args.join(' '), '\n',
          opts.debug ? err.stack : err.message);
        return reject(err);
      }
      logger.writeln('Done running swiftserver generator');
      resolve();
    });
  });
}

exports.getTopics = function() {
  return [
    {
      name: 'swiftserver',
      commands: [
        {
          command: 'app',
          aliases: [ 'swiftserver' ],
          options: [ '-n, --name <name>' ],
          helpInfo: function() {
            return helpInfo('apic_swiftserver_app_help.txt');
          },
          action: function(opts) {
            // NOTE(tunniclm): Seems like the opts object here does
            // not namespace the options and "name" clashes with an
            // existing field, so it could be a function, or it could
            // be the value of the argument we want. :(`
            var args = ['--apic'];
            if (typeof opts.name === 'string') {
                args.push(opts.name);
            }
            logger.writeln(techPreviewMessage);
            return launch('swiftserver:app', args);
          }
        },
        {
          command: 'property',
          aliases: [],
          options: [],
          helpInfo: function() {
            return helpInfo('apic_swiftserver_property_help.txt');
          },
          action: function(opts) {
            return launch('swiftserver:property', ['--apic']);
          }
        },
        {
          command: 'refresh',
          aliases: [],
          options: [],
          helpInfo: function() {
            return helpInfo('apic_swiftserver_refresh_help.txt');
          },
          action: function(opts) {
            return launch('swiftserver:refresh', ['--apic']);
          }
        }
      ]
    },
    {
      name: 'local',
      visible: false,
      commands: [
        {
          command: 'create [name]',
          type: 'model-swiftserver', // TODO(tunniclm): For now, avoid a name clash
          options: [ '-n, --name <name>' ],
          aliases: 'create',
          helpInfo: function() {
            return helpInfo('apic_local_create_model_help.txt');
          },
          action: function(name, opts) {
            // NOTE(tunniclm): Seems like the opts object here does
            // not namespace the options and "name" clashes with an
            // existing field, so it could be a function, or it could
            // be the value of the argument we want. :(
            // Also, convention seems to be that command can have a name
            // argument, so check for that too. Let the command argument
            // take precedence over the option.
            var args = ['--apic'];
            if (typeof name == 'string') {
                args.push(name);
            } else if (typeof opts.name === 'string') {
                args.push(opts.name);
            }
            return launch('swiftserver:model', args);
          }
        }
      ]
    }
  ];
};

