/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

var _ = require('lodash');
var apicConfig = require('apiconnect-config');
var d = require('debug')('apiconnect-cli-create:lib:template');
var fs = require('fs');
var g = require('strong-globalize')();
var handlebars = require('handlebars');
var logger = require('apiconnect-cli-logger');
var mkdirp = require('mkdirp');
var path = require('path');

var config = apicConfig.loadConfig();

module.exports = {
  resolveApiTemplate: resolveApiTemplate,
  resolveApiTemplateFile: resolveApiTemplateFile,
  resolveProductTemplate: resolveProductTemplate,
  writeFileUsingTemplate: writeFileUsingTemplate,
};

function resolveApiTemplate(template, opts) {
  opts = opts || {};
  var templatePath;
  var conf = opts.config || config;

  // template = template || conf.getOne('template-default-api');
  d('Using template %s for api file creation', template);
  if (template && template !== '') {
    if (_.endsWith(template, '.hbs') === false) {
      template = template + '.hbs';
    }
    templatePath = resolveApiTemplateFile(template, { config: conf });
  } else {
    var defaultApiTemplate = conf.getOne('template-default-api');
    if (defaultApiTemplate) {
      templatePath = resolveApiTemplateFile(defaultApiTemplate + '.hbs', { config: conf });
    } else {
      templatePath = defaultApicApiTemplate();
    }
  }

  d('Going to use %s template', templatePath);
  return templatePath;
}


function resolveProductTemplate(template, opts) {
  opts = opts || {};
  var templatePath;
  var conf = opts.config || config;

  d('Using template %s for product file creation ', template);
  if (template) {
    templatePath = resolveProductTemplateFile(template + '-product.hbs', conf);
    d('Trying to resolve %s ', templatePath);
    if (fileExists(templatePath)) {
      d('Found %s template', templatePath);
      return templatePath;
    }
  }

  var defaultApiTemplate = conf.getOne('template-default-api');
  if (!template && defaultApiTemplate) {
    templatePath = resolveProductTemplateFile(defaultApiTemplate + '-product.hbs', conf);
    d('Trying to resolve %s ', templatePath);
    if (fileExists(templatePath)) {
      d('Found %s template', templatePath);
      return templatePath;
    }
  }

  var defaultProductTemplate = conf.getOne('template-default-product');
  if (defaultProductTemplate) {
    templatePath = resolveProductTemplateFile(defaultProductTemplate + '.hbs', conf);
    d('Trying to resolve %s ', templatePath);
    if (fileExists(templatePath)) {
      d('Found %s template', templatePath);
      return templatePath;
    }
  }

  templatePath = defaultApicProductTemplate();
  d('Found %s template', templatePath);
  return templatePath;
}

function writeFileUsingTemplate(templatePath, data) {
  try {
    var template = handlebars.compile(fs.readFileSync(templatePath, 'utf8'));
  } catch (err) {
    logger.debug(err);
    throw new Error(g.f('The template %s is not found.', templatePath));
  }

  try {
    var stat = fs.statSync(data.filename);
  } catch (_) {
    // ignore.
  }
  if (stat) {
    throw new Error(g.f('The file %s already exists.', data.filename));
  }

  try {
    mkdirp.sync(path.dirname(data.filename));
    fs.writeFileSync(data.filename, template(data), 'utf8');
  } catch (err) {
    logger.debug(err);
    throw new Error(g.f('The file %s cannot be created due to: %s',
      data.filename, err.message));
  }
}

handlebars.registerHelper('isEmpty', function(data, options) {
  if (Object.keys(data).length === 0) {
    return options.fn(this);
  }
  return options.inverse(this);
});

handlebars.registerHelper('escapeDoubleQuotes', function(context) {
  return context.replace(/"/g, '\\\"');
});

function resolveApiTemplateFile(template, opts) {
  opts = opts || {};
  var templateDirs;
  var templatePath;
  // Caller provided config, or globally loaded config
  var conf = opts.config || config;

  templatePath = path.resolve(process.cwd(), template);
  d('Looking for %s ', templatePath);
  if (fileExists(templatePath)) {
    return templatePath;
  }

  templateDirs = conf.getOne('template-path');
  if (templateDirs) {
    templateDirs = templateDirs.split(' ');
    for (var i = 0; i < templateDirs.length; i++) {
      templatePath = path.join(templateDirs[i], template);
      d('Looking for %s ', templatePath);
      if (fileExists(templatePath)) {
        return templatePath;
      }
    };
  };

  templatePath = apicApiTemplate(template);
  d('Looking for %s ', templatePath);
  if (fileExists(templatePath)) {
    return templatePath;
  }

  return template;
}

function resolveProductTemplateFile(template, conf) {
  var templateDirs;
  var templatePath;

  templatePath = path.resolve(process.cwd(), template);
  d('Looking for %s ', templatePath);
  if (fileExists(templatePath)) {
    return templatePath;
  }

  templateDirs = conf.getOne('template-path');
  if (templateDirs) {
    templateDirs = templateDirs.split(' ');
    for (var i = 0; i < templateDirs.length; i++) {
      templatePath = path.resolve(path.join(templateDirs[i], template));
      d('Looking for %s ', templatePath);
      if (fileExists(templatePath)) {
        return templatePath;
      }
    };
  };

  return template;
}
function fileExists(file) {
  var fileFlag = true;

  try {
    var stats = fs.lstatSync(file);
    if (stats.isFile()) {
      fileFlag = true;
    } else {
      fileFlag = false;
    };
  } catch (e) {
    fileFlag = false;
  }

  return fileFlag;
}

function defaultApicApiTemplate() {
  return path.resolve(__dirname, path.join('template', 'api.hbs'));
}

function apicApiTemplate(templateFile) {
  return path.resolve(__dirname, path.join('template', templateFile));
}
function defaultApicProductTemplate() {
  return path.resolve(__dirname, path.join('template', 'product.hbs'));
}

