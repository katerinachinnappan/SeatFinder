/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-create

var YAML = require('json2yaml');
var _ = require('lodash');
var apicWsdl = require('apiconnect-wsdl');
var fs = require('fs');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var mkdirp = require('mkdirp');
var path = require('path');
var Promise = require('bluebird');
var resolveApiTemplate = require('./template').resolveApiTemplate;
var resolveProductTemplate = require('./template').resolveProductTemplate;
var util = require('./util/util');
var writeFileUsingTemplate = require('./template').writeFileUsingTemplate;
var yaml = require('js-yaml');

function createApi(options) {
  options.type = 'api';
  createFiles({ api: getApi(options, {}) });
}
module.exports.createApi = createApi;

function createProduct(options) {
  options.type = 'product';
  createFiles({ product: getProduct(options, {}) });
}
module.exports.createProduct = createProduct;

function getApi(options, answers) {
  var api = {};
  if (options.type === 'api') {
    api.title = options.title || answers.title;
    api.name = options.name || answers.name || util.generateSlugFromText(api.title);
    api.filename = options.filename || answers.filename || util.generateSlugFromText(api.name) + '.yaml';
    api.filename = path.resolve(api.filename);
    api.basepath = options.basepath || answers.basepath || util.generateSlugFromText(api.name);
    if (api.basepath.indexOf('/') !== 0) {
      api.basepath = '/' + api.basepath;
    }
    api.template = options.template || answers.template || '';
    api.version = options.version || '1.0.0';
    api.hostname = options.hostname || answers.hostname || '$(catalog.host)';

    options.schemes = options.schemes || answers.schemes;
    if (options.schemes && typeof options.schemes === 'string') {
      api.schemes = options.schemes.split(' ');
    } else if (options.schemes && typeof options.schemes === 'object') {
      api.schemes = options.schemes;
    } else {
      api.schemes = null;
    }

    api.targeturl = options.targetUrl || answers['target_url'];
    return api;
  }
}
exports.getApi = getApi;

function getProduct(options, answers, api) {
  var product = {};
  if (options.type === 'product') {
    product.title = options.title || answers.title;
    product.name = options.name || answers.name || util.generateSlugFromText(product.title);
    product.filename = options.filename || answers.filename || util.generateSlugFromText(product.name) + '.yaml';
    product.filename = path.resolve(product.filename);
    var apis = (options.apis || answers.apis || '').split(' ');
    product.apis = {};
    _.each(apis, function(apiFile) {
      if (apiFile === '') {
        return;
      }
      var apiFilePath = path.resolve(path.dirname(product.filename), apiFile);
      var content;
      try {
        content = fs.readFileSync(apiFilePath, 'utf8');
      } catch (err) {
        // err is silenced for a user-friendly error message
        throw new Error(g.f('The {{API}} file `%s` is not found.', apiFilePath));
      }
      var data;
      try {
        data = yaml.safeLoad(content);
      } catch (err) {
       // 2016mar11
       // js-yaml (yaml.safeLoad) has a bug that doesn't throw proper javascript
       // errors. Instead we get:
       //
       // ```
       // { '0': 'b.yaml', '1': 0, '2': [ 'b.yaml' ] }
       // ```
       //
       // when running console.log(arguments) in the catch. We get around this
       // by not doing anything in the catch block and validating and sending
       // 'Invalid API file ...' // below. A patch to js-yaml (after GA) will
       // be needed to fix how they throw exceptions. If you trace it all the
       // way, the error will be around the section in:
       //
       // https://github.com/nodeca/js-yaml/blob/master/lib/js-yaml/exception.js#L5
      }
      if (!data ||
          !data.info ||
          (!data.info['x-ibm-name'] && !data.info.name && !data.info.title)) {
        throw new Error(g.f('The {{API}} file `%s` is invalid.', apiFilePath));
      }
      var apiName = data.info['x-ibm-name'] || data.info.name || data.info.title;
      apiName = util.generateSlugFromText(apiName);
      product.apis[apiName] = apiFile;
    });
    product.template = options.template || '';
    product.version = options.version || '1.0.0';
    return product;
  } else if (options.product || answers.createproduct) {
    product.title = answers.producttitle || options.product;
    product.name = answers.productname || util.generateSlugFromText(product.title);
    product.filename = answers.productfile || util.generateSlugFromText(product.name) + '.yaml';
    product.filename = path.resolve(product.filename);
    product.apis = {};
    product.apis[api.name] = path.relative('', api.filename);
    product.template = options.template || '';
    product.version = options.version || '1.0.0';
    return product;
  }
}
exports.getProduct = getProduct;

function createFiles(data) {
  logger.debug('createFiles');
  logger.debug(data);

  var templatePath;
  if (data.api) {
    templatePath = resolveApiTemplate(data.api.template);
    writeFileUsingTemplate(templatePath, data.api);
    logger.writeln(g.f('Created %s {{API}} definition [%s:%s]',
      path.basename(data.api.filename), data.api.name, data.api.version
    ));
  }
  if (data.product) {
    templatePath = resolveProductTemplate(data.product.template);
    writeFileUsingTemplate(templatePath, data.product);
    logger.writeln(g.f('Created %s product definition [%s:%s]',
      path.basename(data.product.filename), data.product.name, data.product.version
    ));
  }
}
module.exports.createFiles = createFiles;

function createWSDLSwagger(options) {
  logger.debug('create wsdl api');
  var filepath = options.wsdl;
  // Make sure the file passed in is either a .wsdl or a .zip file.
  if (_.indexOf(filepath, '.') === -1) {
    return Promise.reject(new Error(g.f('The file type must be {{`.wsdl`}} or {{`.zip`}}.')));
  }
  if (path.extname(filepath) !== '.wsdl' && path.extname(filepath) !== '.zip') {
    return Promise.reject(new Error(g.f('The file type must be {{`.wsdl`}} or {{`.zip`}}.')));
  }
  return apicWsdl.getJsonForWSDL(options.wsdl)
    .then(function(wsdls) {
      var serviceData = apicWsdl.getWSDLServices(wsdls);
      _.each(serviceData.services, function(service) {
        var wsdlEntry = apicWsdl.findWSDLForServiceName(wsdls, service.service);
        var parsed_data = apicWsdl.getSwaggerForService(wsdlEntry, service.service);
        // Updating the wsdl field to be what was passed in, so it could be resolved later
        parsed_data['x-ibm-configuration']['wsdl-definition'].wsdl = options.wsdl;
        var yml = YAML.stringify(parsed_data);
        var servicename = parsed_data.info['x-ibm-name'];
        var filename = util.generateSlugFromText(servicename) + '.yaml';
        var version = parsed_data.info.version || '';
        try {
          var stat = fs.statSync(filename);
        } catch (_) {
          // ignore.
        }
        if (stat) {
          throw new Error(g.f('The file %s already exists.', filename));
        }
        mkdirp.sync(path.dirname(filename));
        fs.writeFileSync(filename, yml, 'utf8');
        logger.writeln(g.f('Created %s {{API}} definition [%s:%s]', filename, servicename, version));
        if (options.product) {
          var apis = {};
          apis[servicename] = filename;
          var name = util.generateSlugFromText(options.product);
          var data = {
            product: {
              title: options.product,
              name: name,
              version: version,
              apis: apis,
              template: '',
              filename: name + '.yaml',
            },
          };
          createFiles(data);
        }
      });
    });
}
module.exports.createWSDLSwagger = createWSDLSwagger;

