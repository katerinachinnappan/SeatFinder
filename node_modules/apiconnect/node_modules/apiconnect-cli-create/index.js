/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-create


var SG = require('strong-globalize');
SG.SetRootDir(__dirname);

module.exports.getTopics = function() {
  var plugin = require('./lib/plugin-impl');
  return plugin.topics();
};

module.exports.createApi = function(opts) {
  var factory = require('./lib/factory');
  return factory.createApi(opts);
};

module.exports.createProduct = function(opts) {
  var factory = require('./lib/factory');
  return factory.createProduct(opts);
};

module.exports.generateSlugFromText = function(txt) {
  var util = require('./lib/util/util');
  return util.generateSlugFromText(txt);
};

/**
 * Given an API template name, resolve the path.
 *
 * @param {string} templ template name
 * @param {Object} [options] options
 * @param {Config} [options.config] instance to load configuration values from. If not provided will
 * fall back to configuration loaded from process.cwd().
 *
 * @return {string} resolved api template file name.
 */
module.exports.resolveApiTemplate = function(templ, opts) {
  var template = require('./lib/template');
  return template.resolveApiTemplate(templ, opts);
};

/**
 * Given a API template name, resolve the path to that file.
 *
 * @param {string} templ template name
 * @param {Object} [options] options
 * @param {Config} [options.config] instance to load configuration values from. If not provided will
 * fall back to configuration loaded from process.cwd()
 *
 * @return {string} resolved api template file name.
 */
module.exports.resolveApiTemplateFile = function(templ, opts) {
  var template = require('./lib/template');
  return template.resolveApiTemplateFile(templ, opts);
};

/**
 * Given a Product template name, resolve the path to that file.
 *
 * @param {string} templ template name
 * @param {Object} [options] options
 * @param {Config} [options.config] instance to load configuration values from. If not provided will
 * fall back to configuration loaded from process.cwd()
 *
 * @return {string} resolved api template file name.
 */
module.exports.resolveProductTemplate = function(templ, opts) {
  var template = require('./lib/template');
  return template.resolveProductTemplate(templ, opts);
};

module.exports.writeFileUsingTemplate = function(templatePath, data) {
  var template = require('./lib/template');
  return template.writeFileUsingTemplate(templatePath, data);
};

