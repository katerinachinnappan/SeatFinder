#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-products

var g = require('strong-globalize')();

module.exports = {
  name: 'products',
  version: require('../package.json').version,
  path: __filename,
  isBuiltin: true,
  topics: getTopics,
  productsPublish: function() {
    return require('./plugin-impl').productsPublish.apply(this, arguments);
  },
};

function getTopics() {
  return [ {
    name: 'products',
    commands: [
      {
        command: 'clone',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_clone_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsClone(opts);
        },
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs' },
          { name: 'all-catalogs', rune: 'C', type: 'boolean' },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs' },
          { name: 'all-organizations', rune: 'O', type: 'boolean' },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'delete <name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_delete_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsDelete(nameVersion, opts);
        },
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'get <name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_get_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsGet(nameVersion, opts);
        },
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'list',
        aliases: [ 'products' ],
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_list_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsList(opts);
        },
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs' },
          { name: 'all-catalogs', rune: 'C', type: 'boolean' },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs' },
          { name: 'all-organizations', rune: 'O', type: 'boolean' },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'pull <product[:version]>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_pull_help.txt'),
        action: function(prodVersion, opts) {
          return require('./plugin-impl').productsPull(prodVersion, opts);
        },
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
          { name: 'product-only', rune: 'p', type: 'boolean' },
        ],
      },
      {
        command: 'replace <from_name:version> <to_name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_replace_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsReplace(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name>...',
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'set <name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_set_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsSet(nameVersion, opts);
        },
        options: [
          { name: 'status', type: 'enum', values: [ 'staged', 'published', 'deprecated', 'retired', 'archived' ] },
          { name: 'visibility', type: 'name-list' },
          { name: 'subscribability', type: 'name-list' },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'clear',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_clear_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsClear(opts);
        },
        options: [
          { name: 'confirm', type: 'name' },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'supersede <from_name:version> <to_name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_supersede_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsSupersede(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name> ...',
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'set-migration-target <from_name:version> <to_name:version>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_set-migration-target_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsSetMigrationTarget(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name> ...',
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
        ],
      },
      {
        command: 'publish <filename>',
        loginRequired: 'catalog',
        type: 'catalog',
        defaultType: true,
        helpInfo: g.f('apic_products_publish_help.txt'),
        action: function(filename, opts) {
          return require('./plugin-impl').productsPublish(filename, opts);
        },
        aliases: [ 'publish' ],
        options: [
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.catalog.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.catalog.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.catalog.host', required: true },
          { name: 'secure-gateway', type: 'name' },
          { name: 'stage', type: 'boolean' },
        ],
      },
      {
        command: 'clone',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_clone_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsClone(opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'delete <name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_delete_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsDelete(nameVersion, opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'get <name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_get_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsGet(nameVersion, opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'list',
        aliases: [ 'products' ],
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_list_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsList(opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'pull <product[:version]>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_pull_help.txt'),
        action: function(prodVersion, opts) {
          return require('./plugin-impl').productsPull(prodVersion, opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
          { name: 'product-only', rune: 'p', type: 'boolean' },
        ],
      },
      {
        command: 'replace <from_name:version> <to_name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_replace_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsReplace(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name>...',
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'set <name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_set_help.txt'),
        action: function(nameVersion, opts) {
          return require('./plugin-impl').productsSet(nameVersion, opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'status', type: 'enum', values: [ 'staged', 'published', 'deprecated', 'retired', 'archived' ] },
          { name: 'visibility', type: 'name' },
          { name: 'subscribability', type: 'name' },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'clear',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_clear_help.txt'),
        action: function(opts) {
          return require('./plugin-impl').productsClear(opts);
        },
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'confirm', type: 'name' },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'supersede <from_name:version> <to_name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_supersede_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsSupersede(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name> ...',
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'set-migration-target <from_name:version> <to_name:version>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_set-migration-target_help.txt'),
        action: function(from, to, opts) {
          return require('./plugin-impl').productsSetMigrationTarget(from, to, opts);
        },
        options: [
          '-p, --plans <source_plan_name:target_plan_name> ...',
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
        ],
      },
      {
        command: 'publish <filename>',
        loginRequired: 'space',
        type: 'space',
        helpInfo: g.f('apic_products_publish_help.txt'),
        action: function(filename, opts) {
          return require('./plugin-impl').productsPublish(filename, opts);
        },
        aliases: [ 'publish' ],
        options: [
          { name: 'space', type: 'name', default: '$APIC_CONFIG$.space.data.spaces', required: true },
          { name: 'catalog', rune: 'c', type: 'name', default: '$APIC_CONFIG$.space.data.catalogs', required: true },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.space.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.space.host', required: true },
          { name: 'secure-gateway', type: 'name' },
          { name: 'stage', type: 'boolean' },
        ],
      },
    ],
  },
  ];
};

