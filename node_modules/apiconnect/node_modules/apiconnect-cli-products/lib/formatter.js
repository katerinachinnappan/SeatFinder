/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-policies


var _ = require('lodash');
var debug = require('debug')('apiconnect-cli-products:formatter');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');

module.exports.clearFormat = function(options, result) {
  var delProducts = result.products;
  var delApis = result.apis;

  delProducts.forEach(function(prod) {
    if (options.space) {
      logger.writeln('Deleted ' + prod + ' product definition from ' +
        options.organization + ':' + options.catalog + ':' + options.space);
    } else {
      logger.writeln('Deleted ' + prod + ' product definition from ' + options.organization + ':' + options.catalog);
    }
  });

  delApis.forEach(function(api) {
    if (options.space) {
      logger.writeln('Deleted ' + api + ' API definition from ' +
        options.organization + ':' + options.catalog + ':' + options.space);
    } else {
      logger.writeln('Deleted ' + api + ' API definition from ' + options.organization + ':' + options.catalog);
    }
  });
};

module.exports.cloneFormat = function(results) {
  for (var i = 0; i < results.length; i++) {
    var product = results[i].product;
    var apis = results[i].apis;
    var organization = product.orgName;
    var catalog = product.catalogName;
    var space = product.spaceName;
    var productFilename = product.productFilename;
    if (space) {
      logger.writeln(g.f('Pulled %s:%s product definition from %s:%s:%s [%s]',
        product.document.info.name, product.document.info.version, organization, catalog, space, productFilename));
    } else {
      logger.writeln(g.f('Pulled %s:%s product definition from %s:%s [%s]',
        product.document.info.name, product.document.info.version, organization, catalog, productFilename));
    }
    if (apis) {
      for (var j = 0; j < apis.length; j++) {
        var api = apis[j];
        if (api) {
          var apiFileName = api.apiFileName;
          if (space) {
            logger.writeln(g.f('Pulled %s:%s API definition from %s:%s:%s [%s]',
              api.document.info['x-ibm-name'], api.document.info.version, organization, catalog, space, apiFileName));
          } else {
            logger.writeln(g.f('Pulled %s:%s API definition from %s:%s [%s]',
              api.document.info['x-ibm-name'], api.document.info.version, organization, catalog, apiFileName));
          }
          var apiWsdlFileName = api.wsdlFileName;
          if (apiWsdlFileName) {
            if (space) {
              logger.writeln(g.f('Pulled %s:%s API WSDL definition from %s:%s:%s [%s]',
                api.document.info['x-ibm-name'], api.document.info.version,
                organization, catalog, space, apiWsdlFileName));
            } else {
              logger.writeln(g.f('Pulled %s:%s API WSDL definition from %s:%s [%s]',
                api.document.info['x-ibm-name'], api.document.info.version, organization, catalog, apiWsdlFileName));
            }
          }
        }
      }
    }
  }
};

module.exports.deleteFormat = function(result, options) {
  var delProduct = result.product;
  var delApis = result.apis;

  var org = options.organization;
  var catalog = options.catalog;
  var space = options.space;

  if (space) {
    logger.writeln(g.f('Deleted %s:%s product definition from %s:%s:%s',
      delProduct.document.info.name, delProduct.document.info.version, org, catalog, space));
  } else {
    logger.writeln(g.f('Deleted %s:%s product definition from %s:%s',
      delProduct.document.info.name, delProduct.document.info.version, org, catalog));
  }
  for (var i = 0; i < delApis.length; i++) {
    if (space) {
      logger.writeln(g.f('Deleted %s:%s API definition from %s:%s:%s',
        delApis[i].document.info['x-ibm-name'], delApis[i].document.info.version, org, catalog, space));
    } else {
      logger.writeln(g.f('Deleted %s:%s API definition from %s:%s',
        delApis[i].document.info['x-ibm-name'], delApis[i].document.info.version, org, catalog));
    }
  }
};

module.exports.getFormat = function(product) {

  var org = product.orgName;
  var catalog = product.catalogName;
  var space = product.spaceName;

  debug(product);
  logger.writeln(g.f('name: %s', product.document.info.name));
  logger.writeln(g.f('version: %s', product.document.info.version));
  logger.writeln(g.f('title: %s', product.document.info.title));
  logger.writeln(g.f('status: %s', product.deploymentState));

  if (product['pendingDeploymentState']) {
    logger.writeln(g.f('pending_status: %s', product['pendingDeploymentState']));
  }

  var relatedAPIs = '';
  var i = 0;
  _.each(_.keys(product.document.apis), function(apiName) {
    var api = product.document.apis[apiName];
    if (i > 0) {
      relatedAPIs = relatedAPIs + ' ';
    }
    relatedAPIs = relatedAPIs + api.name;
    i++;
  });

  logger.writeln(g.f('apis: %s', relatedAPIs));
  if (space) {
    logger.writeln(g.f('space: %s', space));
  }
  logger.writeln(g.f('catalog: %s', catalog));
  logger.writeln(g.f('organization: %s', org));


  var planStr;
  var newPlanName = '';
  var j = 0;
  var supersededByObj = product.supersededByResponse;
  if (supersededByObj) {
    var supersededByStr = '';
    planStr = '';
    i = 0;
    _.each(_.keys(supersededByObj), function(prodNameVersion) {
      if (i > 0) {
        supersededByStr = supersededByStr + ' ';
      }
      supersededByStr = supersededByStr + prodNameVersion;
      var productObj = supersededByObj[prodNameVersion];
      planStr = ' [';
      j = 0;
      _.each(_.keys(productObj), function(oldPlanName) {
        newPlanName = productObj[oldPlanName];
        if (j > 0) {
          planStr = planStr + ' ';
        }
        planStr = planStr + oldPlanName + ':' + newPlanName;
        j++;
      });
      planStr = planStr + ']';
      supersededByStr = supersededByStr + planStr;
      i++;
    });
    logger.writeln(g.f('superseded by: "%s"', supersededByStr));
  };

  var supersedesObj = product.supersedesResponse;
  if (supersedesObj) {
    var supersedesStr = '';
    planStr = '';
    i = 0;
    _.each(_.keys(supersedesObj), function(prodNameVersion) {
      if (i > 0) {
        supersedesStr = supersedesStr + ' ';
      }
      supersedesStr = supersedesStr + prodNameVersion;
      var productObj = supersedesObj[prodNameVersion];
      planStr = ' [';
      j = 0;
      _.each(_.keys(productObj), function(oldPlanName) {
        newPlanName = productObj[oldPlanName];
        if (j > 0) {
          planStr = planStr + ' ';
        }
        planStr = planStr + oldPlanName + ':' + newPlanName;
        j++;
      });
      planStr = planStr + ']';
      supersedesStr = supersedesStr + planStr;
      i++;
    });
    logger.writeln(g.f('supersedes: "%s"', supersedesStr));
  };
};

module.exports.listFormat = function(products) {
  _.keys(products).forEach(function(key) {
    var prod = products[key];
    var shortName = prod.catalogName;
    var orgName = prod.orgName;
    var status = g.f('status: %s', prod.deploymentState);
    if (prod.spaceName) {
      logger.writeln(g.f('%s:%s in %s:%s:%s [%s]',
        prod.document.info.name, prod.document.info.version, orgName, shortName, prod.spaceName, status));
    } else {
      logger.writeln(g.f('%s:%s in %s:%s [%s]',
        prod.document.info.name, prod.document.info.version, orgName, shortName, status));
    }
  });
};

module.exports.publishFormat = function(product, options) {
  var nameVersion = product.productName + ':' + product.productVersion;
  //var apis = result.apis;

  if (product && product['pending-state']) {
    if (options.space) {
      logger.writeln(g.f('Published pending approval %s to %s:%s:%s ({{status}}: %s, pending_status:%s) [%s]',
        options.filename, options.organization, options.catalog, options.space,
        product['state'], product['pending-state'],
        nameVersion));
    } else {
      logger.writeln(g.f('Published pending approval %s to %s:%s ({{status}}: %s, pending_status:%s) [%s]',
        options.filename, options.organization, options.catalog, product['state'], product['pending-state'],
        nameVersion));
    }
  } else if (options.space) {
    logger.writeln(g.f('Published %s to %s:%s:%s [%s]',
      options.filename, options.organization, options.catalog, options.space, nameVersion));
  } else {
    logger.writeln(g.f('Published %s to %s:%s [%s]',
      options.filename, options.organization, options.catalog, nameVersion));
  }

  /*
   _.each(_.keys(apis), function(apiKey) {
   var api = apis[apiKey];
   var invokeUrl = '';
   logger.writeln('[' + nameVersion + ' ' + api.name + '] ' + invokeUrl);
   });
   */
};

module.exports.pullFormat = function(result) {
  var product = result.product;
  var apis = result.apis;
  var org = product.orgName;
  var catalog = product.catalogName;
  var space = product.spaceName;
  var productFilename = product.productFilename;

  if (space) {
    logger.writeln(g.f('Pulled %s:%s product definition from %s:%s:%s [%s]',
      product.document.info.name, product.document.info.version, org, catalog, space, productFilename));

  } else {
    logger.writeln(g.f('Pulled %s:%s product definition from %s:%s [%s]',
      product.document.info.name, product.document.info.version, org, catalog, productFilename));
  }

  if (apis) {
    for (var i = 0; i < apis.length; i++) {
      var api = apis[i];
      var apiFileName = api.apiFileName;
      var wsdlFileName = api.wsdlFileName;

      if (api) {
        if (space) {
          logger.writeln(g.f('Pulled %s:%s API definition from %s:%s:%s [%s]',
            api.document.info['x-ibm-name'], api.document.info.version, org, catalog, space, apiFileName));
        } else {
          logger.writeln(g.f('Pulled %s:%s API definition from %s:%s [%s]',
            api.document.info['x-ibm-name'], api.document.info.version, org, catalog, apiFileName));
        }
        if (wsdlFileName) {
          if (space) {
            logger.writeln(g.f('Pulled %s:%s API WSDL definition from %s:%s:%s [%s]',
              api.document.info['x-ibm-name'], api.document.info.version, org, catalog, space, wsdlFileName));
          } else {
            logger.writeln(g.f('Pulled %s:%s API WSDL definition from %s:%s [%s]',
              api.document.info['x-ibm-name'], api.document.info.version, org, catalog, wsdlFileName));
          }
        }
      }
    }
  }
};

module.exports.replaceFormat = function(result) {
  var fromProd = result.fromProd;
  var toProd = result.toProd;
  var subscriptions = result.subscriptions;
  var oldNameVersion = fromProd.productName + ':' + fromProd.productVersion;
  var newNameVersion = toProd.productName + ':' + toProd.productVersion;
  var org = toProd.orgName;
  var catalog = toProd.catalogName;
  var space = toProd.spaceName;

  if (subscriptions && subscriptions['pendingDeploymentState']) {
    if (space) {
      logger.writeln(g.f('Replaced pending approval %s with %s in %s:%s:%s ({{status}}: %s, pending_status: %s)',
        oldNameVersion, newNameVersion, org, catalog, space, subscriptions['deploymentState'],
        subscriptions['pendingDeploymentState']));
    } else {
      logger.writeln(g.f('Replaced pending approval %s with %s in %s:%s ({{status}}: %s, pending_status: %s)',
        oldNameVersion, newNameVersion, org, catalog, subscriptions['deploymentState'],
        subscriptions['pendingDeploymentState']));
    }
  } else if (space) {
    logger.writeln(g.f('Replaced %s with %s in %s:%s:%s', oldNameVersion, newNameVersion, org, catalog, space));
  } else {
    logger.writeln(g.f('Replaced %s with %s in %s:%s', oldNameVersion, newNameVersion, org, catalog));
  }
};

module.exports.setFormat = function(responseBody, options) {
  var org = options.organization;
  var catalog = options.catalog;
  var space = options.space;

  if (space) {
    logger.write(g.f('Updated %s:%s in %s:%s:%s',
      responseBody.document.info.name, responseBody.document.info.version, org, catalog, space));
  } else {
    logger.write(g.f('Updated %s:%s in %s:%s',
      responseBody.document.info.name, responseBody.document.info.version, org, catalog));
  }
  if (options.status) {
    if (responseBody && responseBody['pending-state']) {
      logger.writeln(g.f(' ({{status}}: %s, {{pending_status}}:%s)',
        responseBody['state'], responseBody['pending-state']));
    } else {
      logger.writeln(g.f(' ({{status}}: %s)', responseBody.deploymentState));
    }
  } else {
    logger.writeln(g.f(' (visibility: %s, subscribability: %s)',
      responseBody.deploymentVisibility.view.type, responseBody.deploymentVisibility.subscribe.type));
  };
};

module.exports.setMirgationFormat = function(result) {
  var fromProd = result.fromProd;
  var toProd = result.toProd;
  var oldNameVersion = fromProd.productName + ':' + fromProd.productVersion;
  var newNameVersion = toProd.productName + ':' + toProd.productVersion;
  var org = toProd.orgName;
  var catalog = toProd.catalogName;
  var space = toProd.spaceName;

  // Migration target set for climbon:1.0.0 to climbon:1.1.0 in climbonorg:production
  if (space) {
    logger.writeln(g.f('Migration target set for %s to %s in %s:%s:%s',
      oldNameVersion, newNameVersion, org, catalog, space));
  } else {
    logger.writeln(g.f('Migration target set for %s to %s in %s:%s',
      oldNameVersion, newNameVersion, org, catalog, space));
  }
};

module.exports.stageFormat = function(result, options) {
  var nameVersion = result.document.info.name + ':' + result.document.info.version;

  if (result && result['pending-state']) {
    if (options.space) {
      logger.writeln(g.f('Staged pending approval %s to %s:%s:%s ({{status}}: %s, pending_status: %s) [%s]',
        options.filename, options.organization, options.catalog, options.space,
        result['state'], result['pending-state'], nameVersion));
    } else {
      logger.writeln(g.f('Staged pending approval %s to %s:%s ({{status}}: %s, pending_status: %s) [%s]',
        options.filename, options.organization, options.catalog, result['state'], result['pending-state'],
        nameVersion));
    }
  } else if (options.space) {
    logger.writeln(g.f('Staged %s to %s:%s:%s [%s]',
      options.filename, options.organization, options.catalog, options.space, nameVersion));
  } else {
    logger.writeln(g.f('Staged %s to %s:%s [%s]',
      options.filename, options.organization, options.catalog, nameVersion));
  }
};

module.exports.supersedeFormat = function(result) {
  var fromProd = result.fromProd;
  var toProd = result.toProd;
  var product = result.subscriptions;
  var oldNameVersion = fromProd.productName + ':' + fromProd.productVersion;
  var newNameVersion = toProd.productName + ':' + toProd.productVersion;
  var org = toProd.orgName;
  var catalog = toProd.catalogName;
  var space = toProd.spaceName;

  if (product && product['pendingDeploymentState']) {
    if (space) {
      logger.writeln(g.f('Superseded pending approval %s with %s in %s:%s:%s ({{status}}: %s, pending_status:%s)',
        oldNameVersion, newNameVersion, org, catalog, space, product['deploymentState'],
        product['pendingDeploymentState']));
    } else {
      logger.writeln(g.f('Superseded pending approval %s with %s in %s:%s ({{status}}: %s, pending_status:%s)',
        oldNameVersion, newNameVersion, org, catalog, product['deploymentState'], product['pendingDeploymentState']));
    }
  } else if (space) {
    logger.writeln(g.f('Superseded %s with %s in %s:%s:%s', oldNameVersion, newNameVersion, org, catalog, space));
  } else {
    logger.writeln(g.f('Superseded %s with %s in %s:%s', oldNameVersion, newNameVersion, org, catalog));
  }
};

