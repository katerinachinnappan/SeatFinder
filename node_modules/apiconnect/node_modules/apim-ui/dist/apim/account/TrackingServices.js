/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.account')
  .service('TrackingServices', [
    '$q',
    '$localStorage',
    '$rootScope',
    '$window',
    '$http',
    'ConfigServices',
    'TrackingMappings',
    'Bluemix',
    TrackingServices]);


function TrackingServices(
  $q,
  $localStorage,
  $rootScope,
  $window,
  $http,
  ConfigServices,
  TrackingMappings,
  Bluemix
){
  var svc = {};

  svc.hash = {};

  var getURLParameter = function getURLParameter(param) {
    var regexString = "[\\#&\\?]" + param + "=([^&#\\?]*)",
      regex = new RegExp(regexString),
      results = regex.exec(window.location.href);

    return ((results == null) ? "" : results[1]);
  };

  var normalizeRouteName = function normalizeRouteName(ns, key) {
    if (TrackingMappings[ns] && TrackingMappings[ns][key]){
      return TrackingMappings[ns][key];
    } else {
      //normalize page name for bluemix
      return key.replace('_', ' ').replace(/\b[a-z]/g,function(f){return f.toUpperCase();});
    }
  };

  svc.getEnableAnalytics = function(force){
    var enabled = $localStorage.getItem('enable-analytics');

    if (!force && (typeof enabled === 'undefined' || !enabled.length)) {
      force = true;
    }

    if (!force) {
      return $q.resolve(enabled);
    }

    if($window.isSaaS) {
      $localStorage.setItem('enable-analytics', enabled);
      return $q.resolve(enabled);
    }

    return ConfigServices.getEnableAnalytics()
      .then(function(data){
        var enabled = data.data;

        $localStorage.setItem('enable-analytics', enabled);

        return enabled;
      });
  };

  svc.setEnableAnalytics = function(enabled){

    if($window.isSaaS) {
      $localStorage.setItem('enable-analytics', true);
      return $q.resolve(true);
    }
    return ConfigServices.setEnableAnalytics(enabled)
      .then(function(data){
        var enabled = data.data;

        $localStorage.setItem('enable-analytics', enabled);

        return enabled;
      });
  };

  svc.isEnabled = function(){
    return $rootScope.analytics;
  };

  svc.getId = function(force){
    var id = $localStorage.getItem('installation-id');

    if (!force && (typeof id === 'undefined' || !Object.keys(id).length)) {
      force = true;
    }

    if($window.isSaaS) {
      var id = $rootScope.currentUser.id;
      $localStorage.setItem('installation-id', id);
      return $q.resolve(id);
    }

    if (!force) {
      return $q.resolve(id);
    }

    return ConfigServices.getId()
      .then(function(data){
        var id = data.data;

        $localStorage.setItem('installation-id', id);

        return id;
      });
  };

  svc.load = function(segmentioWriteKey){
    var def = $q.defer();

    return svc.getEnableAnalytics()
      .then(function(enabled){
        if (!enabled) {
          return def.reject(false);
        }

        analytics.load(segmentioWriteKey);

        return enabled;
      })
      .catch(function(err){
        def.reject(false);
      });
  };

  svc.identify = function(data){
    var def = $q.defer();

    if (!$rootScope.analytics){
      return def.reject();
    }

    svc.getId()
      .then(function(id){

        // add timestamp to identify requests
        data.createdAt = new Date();
        // remove undefined or null values (ie: empty email causes error)
        data = _.pickBy(data, _.identity);

        if($window.isSaaS) {
          var envId = getURLParameter('env_id');
          var url = envId.includes('ys1') ?
            'https://console.stage1.bluemix.net/apis/api/analytics/iamid' :
            'https://console.bluemix.net/apis/api/analytics/iamid';

          var userData = {
            'email': data.email,
            'productTitle': 'APIC',
            'id': id
          };

          Bluemix.getPlanId($rootScope.bluemixExternalSpaceId)
            .then(function(planId) {
              userData.planId = planId;

              return $http.get(url, {
                withCredentials: true
              })
            })
            .then(function(response) {
              userData.userId = response.data.iamId;
              userData.realmName = response.data.realmName;
              userData.uniqueSecurityName = response.data.uniqueSecurityName;
              $rootScope.userData = userData;

              analytics.identify(userData.userId, userData, def.resolve);
            })
            .catch(function() {
              analytics.identify(userData, def.resolve);
            });

        } else {
          var installationId = id.hardwareId + '-' + id.instId;
          analytics.identify(installationId, data, def.resolve);
        }
      });

    return def.promise;
  };

  svc.page = function(ns, key, data){
    var def = $q.defer();
    data = data || {};

    if (!$window.isSaaS || (!$rootScope.analytics  || (!$rootScope.isOffline() && !$window.isSaaS))) {
      return $q.reject();
    }

    var eventName = normalizeRouteName(ns, key);

    //for bluemix milestone
    if(eventName === 'Catalogs Analytics') {
      svc.track('analytics', 'viewedAnalytics');
    }

    if($window.isSaaS) {
      data.productTitle = 'APIC';
      data.url = location.href;
      data.referrer = $rootScope.previousUrl;
      var category = 'Navigation'+' ('+data.productTitle+')';
      analytics.page(category, eventName, data, def.resolve);
    } else {
      analytics.page(eventName, data, def.resolve);
    }

    return def.promise;
  };

  svc.track = function(ns, key, data){
    var def = $q.defer();
    data = data || {};

    if (!$window.isSaaS || (!$rootScope.analytics  || (!$rootScope.isOffline() && !$window.isSaaS))) {
      return $q.reject();
    }

    var eventName = ns+'.'+key;
    if (TrackingMappings[ns] && TrackingMappings[ns][key]) {
      eventName = TrackingMappings[ns][key].eventName;
      if (TrackingMappings[ns][key].data) {
        data = Object.assign({}, data, TrackingMappings[ns][key].data);
      }
    }
    if($window.isSaaS){
      data.productTitle = 'APIC';
      data.name = normalizeRouteName('route', $rootScope.nextState.name);
      data.category = data.category+' ('+data.productTitle+')'
    }
    analytics.track(eventName, data, def.resolve);

    return def.promise;
  };

  svc.getAnalyticsKey = function(force){
    var key = $localStorage.getItem('analytics-key');

    if (!force && (typeof key === 'undefined' || !key.length)) {
      force = true;
    }

    if (!force) return $q.resolve(key);

    return ConfigServices.getAnalyticsKey()
      .then(function(result){
        var key = result.data.key;

        $localStorage.setItem('analytics-key', key);

        return key;
      });
  };

  return svc;
}

