/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

'use strict';

var secureGateways = angular.module('apim.securegateways');

var transformGateway = function(data) {
  if(data.status) {
    data.enabled = (data.status.toLowerCase() === 'enabled');
  }

  var connectedClientsArr = data.connectedClientsArr;

  data.clients = [];

  if(connectedClientsArr) {
    for(var c = 0; c < connectedClientsArr.length; c++) {
      data.clients.push({
        id: connectedClientsArr[c].id,
        status: 'connected'
      });
    }
  }

  var recentlyDisconnected = data.recentlyDisconnected;

  if(recentlyDisconnected) {
    var reducedDisconnectedClients = {};

    for(var d = 0; d < recentlyDisconnected.length; d++) {
      var id = recentlyDisconnected[d].id;

      if(reducedDisconnectedClients.hasOwnProperty(id)) {
        reducedDisconnectedClients[id] = (recentlyDisconnected[d].disconnectedAt > reducedDisconnectedClients[id]) ?
          recentlyDisconnected[d].disconnectedAt : reducedDisconnectedClients[id];
      } else {
        reducedDisconnectedClients[id] = recentlyDisconnected[d].disconnectedAt
      }
    }

    for(var reducedDisconnectedClientsKey in reducedDisconnectedClients) {
      if(reducedDisconnectedClients.hasOwnProperty(reducedDisconnectedClientsKey)) {
        var date = new Date(reducedDisconnectedClients[reducedDisconnectedClientsKey]);
        data.clients.push({
          id: reducedDisconnectedClientsKey,
          disconnectedAt: date.toString(),
          status: 'disconnected'
        });
      }
    }
  }

  var acl = data.ACL;

  data.allowedHosts = [];
  data.deniedHosts = [];

  if(acl) {
    var reducedAllowedHosts = {};

    for(var a = 0; a < acl.allow.length; a++) {
      var hostSplit = acl.allow[a].split('/');
      var host = hostSplit[0];
      var path = (hostSplit.length > 1) ? '/' + hostSplit.slice(1).join('/') : '/';

      if(reducedAllowedHosts.hasOwnProperty(host) && path !== '/') {
        reducedAllowedHosts[host].push(path);
      } else {
        reducedAllowedHosts[host] = (path !== '/') ? [path] : [];
      }
    }

    for(var reducedAllowedHostsKey in reducedAllowedHosts) {
      if(reducedAllowedHosts.hasOwnProperty(reducedAllowedHostsKey)) {
        data.allowedHosts.push({
          name: reducedAllowedHostsKey,
          paths: reducedAllowedHosts[reducedAllowedHostsKey]
        });
      }
    }

    data.deniedHosts = acl.deny;
  }
};

var transformGatewayResponse = function(data, headersGetter, status) {
  data = JSON.parse(data);

  if (status < 200 || status >= 400) {
    return data;
  }

  if(Array.isArray(data)) {
    for(var i = 0; i < data.length; i++) {
      transformGateway(data[i]);
    }
  } else {
    transformGateway(data);
  }

  return data;
};

var transformInstallerResponse = function(data, headersGetter, status) {
  data = JSON.parse(data);

  if (status < 200 || status >= 400) {
    return data;
  }

  var results = [];

  for(var x = 0; x < data.length; x++) {
    if(data[x].MD5) {
      continue;
    }

    var result = {
      platform: data[x].name,
      download: data[x].url,
      size: data[x].stats.size + " " + data[x].stats.type
    }

    for(var y = 0; y < data.length; y++) {
      if(!data[y].MD5) {
        continue;
      }

      if(data[y].name.includes(data[x].name)) {
        result.md5 = data[y].url;
        break;
      }
    }

    results.push(result);
  }

  return results;
};

var transformSwaggerResponse = function(data, headersGetter, status) {
  data = JSON.parse(data);

  if (status < 200 || status >= 400) {
    return data;
  }

  var results = [];

  for(var x = 0; x < data.length; x++) {
    var urls = data[x].urls;
    var apiTitle = data[x].apiTitle;
    var apiId = data[x].apiId;

    for(var y = 0; y < urls.length; y++) {
      var destination = urls[y];

      results.push({
        gateway: '',
        destination: destination,
        apiTitle: apiTitle,
        apiId: apiId
      });
    }
  }

  return results;
};

secureGateways.factory('Gateway', ['$resource',
  function($resource) {
    return $resource('proxy/sg/orgs/:orgId/gateways/:gatewayId', {}, {
      save: {
        method: 'POST',
        params: { orgId: '@orgId' },
        transformResponse: transformGatewayResponse
      },
      query: {
        method: 'GET',
        params: { orgId: '@orgId' },
        isArray: true,
        transformResponse: transformGatewayResponse
      },
      update: {
        method: 'PUT',
        params: { orgId: '@orgId', gatewayId: '@gatewayId' },
        transformResponse: transformGatewayResponse
      },
      remove: {
        method: 'DELETE',
        params: { orgId: '@orgId', gatewayId: '@gatewayId' }
      }
    });
  }
]);

secureGateways.factory('Installer', ['$resource',
  function($resource) {
    return $resource('proxy/sg/installers', {}, {
      query: {
        method: 'GET',
        isArray: true,
        transformResponse: transformInstallerResponse
      }
    });
  }
]);

secureGateways.factory('Swagger', ['$resource',
  function($resource) {
    return $resource('proxy/sg/swagger/:productId', {}, {
      query: {
        method: 'GET',
        params: { productId: '@productId' },
        isArray: true,
        transformResponse: transformSwaggerResponse
      }
    });
  }
]);

