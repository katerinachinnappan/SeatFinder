/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var secureGateways = angular.module('apim.securegateways', ['ngResource', 'angular-clipboard']);

secureGateways.config(['$tooltipProvider', function($tooltipProvider) {
  // This is an object that contains a map of 'startingEvent' and its corresponding 'ending event'
  // The mapping in this object is added to the default mapping specified in bootstrap-ui tooltip docs
  $tooltipProvider.setTriggers({
    'showTechTooltipEvent': 'hideTechTooltipEvent'
  });
}]);

secureGateways.controller('SecureGatewaysController', [
  '$scope',
  '$rootScope',
  '$q',
  '$modal',
  '$mdDialog',
  '$location',
  '$filter',
  '$timeout',
  '$window',
  'Gateway',
  'Installer',
  secureGatewaysController
]);

function secureGatewaysController($scope, $rootScope, $q, $modal, $mdDialog, $location, $filter, $timeout, $window, Gateway, Installer) {
  $scope.context = $rootScope.context;
  $scope.preSelectGateway = null;
  $scope.secureGatewaysLoaded = false;
  $scope.softwareInstallersLoaded = false;
  $scope.saveDisabled = true;
  $scope.secureGatewayNamePattern = /^[^|&;$@\'\"<>.()\\+]*$/;

  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) {
      return;
    }

    var promises = [];
    promises.push($scope.refreshGateways());
    promises.push($scope.refreshInstallers());

    $q.all(promises).then(function() {
      var showTechTooltip = $window.localStorage['sgTechTooltip_' + $scope.currentUser.id] === 'false' ? false : true;
      var techPreviewElem = angular.element(document.getElementById('sgTechPreviewTT'));
      if(showTechTooltip) {
        $timeout(function() {
          techPreviewElem.triggerHandler('showTechTooltipEvent');
        }, 500);
        // disable tooltip after five seconds
        $timeout(function() {
          techPreviewElem.triggerHandler('hideTechTooltipEvent');
        }, 5000);
        $window.localStorage['sgTechTooltip_' + $scope.currentUser.id] = false;
      }
      // enable tooltip on mousenter
      techPreviewElem.on('mouseenter', function() {
        techPreviewElem.triggerHandler('showTechTooltipEvent');
      });
      techPreviewElem.on('mouseleave', function() {
        techPreviewElem.triggerHandler('hideTechTooltipEvent');
      });
    });
  });

  $scope.refresh = function() {
    if(!$scope.secureGateways.$resolved) {
      return;
    }

    // perform a navigate check - cant have unsaved changes when we create a new profile
    $scope.onNavigateOut($scope.selectedSecureGateway).then(function() {
      $scope.saveDisabled = true;
      $scope.preSelectGateway = $scope.selectedSecureGateway._id;
      $scope.$broadcast("secureGateway_discarded");
      $scope.refreshGateways();
      $scope.refreshInstallers();
    }, function() {
      // user doesn't want to discard changes - nothing to do
    });
  };

  $scope.refreshGateways = function() {
    $scope.secureGatewaysLoaded = false;

    $scope.secureGateways = Gateway.query({
      orgId: $scope.orgId
    });

    $scope.secureGateways.$promise.then(function() {
      $scope.secureGatewaysLoaded = true;

      // pre-select a profile if needed
      if($scope.preSelectGateway) {
        for (var i = 0; i < $scope.secureGateways.length; i++) {
          if ($scope.secureGateways[i]._id === $scope.preSelectGateway) {
            $scope.selectedSecureGateway = $scope.secureGateways[i];
            break;
          }
        }

        $scope.preSelectGateway = null;
      }

      if (!$scope.selectedSecureGateway && $scope.secureGateways.length > 0) {
        $scope.selectedSecureGateway = $scope.secureGateways[0];
      }
    });

    return $scope.secureGateways.$promise;
  };

  $scope.refreshInstallers = function() {
    $scope.softwareInstallersLoaded = false;

    $scope.softwareInstallers = Installer.query();

    $scope.softwareInstallers.$promise.then(function() {
      $scope.softwareInstallersLoaded = true;
    });

    return $scope.softwareInstallers.$promise;
  }

  $scope.$on("$locationChangeStart", function(event, next, current) {
    if (!$scope.saveDisabled) {
      event.preventDefault();

      $scope.confirmation = {
        titleKey: 'unsaved_changes_title',
        messageKey: 'unsaved_changes',
        confirmed: function() {
          $scope.saveDisabled = true;
          $location.path($location.url(next).hash());
        },
        rejected: function() {}
      };

      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        size: 'sm',
        scope: $scope
      });
    }
  });

  $scope.onNavigateOut = function(oldValue) {
    var deferred = $q.defer();

    if (!$scope.saveDisabled) {
      $scope.positiveAction = 'discard';
      $scope.confirmation = {
        titleKey: 'confirmUnsavedChangesSecureGatewayIdentityTitle',
        message: $filter('translate')('confirmUnsavedChangesSecureGatewayIdentity', {
          secureGateway: oldValue ? oldValue.desc : $scope.selectedSecureGateway.desc
        }),
        confirmed: function() {
          $scope.saveDisabled = true;
          deferred.resolve();
        },
        rejected: function() {
          deferred.reject();
        }
      };

      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        scope: $scope,
        backdrop: 'static'
      });
    } else {
      deferred.resolve();
    }

    return deferred.promise;
  };

  $scope.confirmDisableSecureGateway = function(index) {
    $scope.positiveAction = 'disable';
    $scope.confirmation = {
      titleKey: 'confirmDisableSecureGatewayIdentityTitle',
      message: $filter('translate')('confirmDisableSecureGatewayIdentity', {
        secureGateway: $scope.secureGateways[index].desc
      }),
      confirmed: function() {
        $scope.changeSecureGatewayStatus(index);
      },
      rejected: function() {
        $scope.secureGateways[index].enabled = !$scope.secureGateways[index].enabled;
      }
    };

    if($scope.secureGateways[index].enabled) {
      $scope.changeSecureGatewayStatus(index);
    } else {
      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        scope: $scope,
        backdrop: 'static'
      });
    }
  };

  $scope.changeSecureGatewayStatus = function(index) {
    var timestamp = (new Date()).getTime();
    var messageId = "changingSecureGatewayStatus-" + timestamp;
    $scope.$root.notifyUser('changingSecureGatewayStatus', [], "BUSY", false, messageId);

    $scope.changingStatus = true;
    $scope.saveDisabled = true;

    var secureGateway = $scope.secureGateways[index];

    var params = {
      orgId: $scope.orgId,
      gatewayId: secureGateway._id
    };

    secureGateway.$update(params).then(function() {
      $scope.$emit('secureGateway_updated', secureGateway);
      $scope.changingStatus = false;
      $scope.$root.notifyUser('changedSecureGatewayStatus', [], "SUCCESS", true, messageId);
    }, function(error) {
      $scope.changingStatus = false;
      $scope.$root.notifyUser('errorChangingSecureGatewayStatus', [], "ERROR", false, messageId);
    });
  };

  $scope.addSecureGateway = function($event) {
    if(!$scope.secureGateways.$resolved) {
      return;
    }

    // perform a navigate check - cant have unsaved changes when we create a new secure gateway
    $scope.onNavigateOut($scope.selectedSecureGateway).then(function() {
      $scope.saveDisabled = true;
      $scope.$broadcast("secureGateway_discarded");

      $mdDialog.show({
        controller: 'AddSecureGatewayController',
        templateUrl: 'apim/securegateways/partials/addSecureGateway.html',
        parent: angular.element(document.body),
        targetEvent: $event,
        focusOnOpen: false,
        locals: {
          secureGatewayNamePattern: $scope.secureGatewayNamePattern
        }
      }).then(function(newSecureGateway) {
        $scope.secureGateways.unshift(newSecureGateway);
        $scope.selectedSecureGateway = newSecureGateway;
        $scope.$broadcast('secureGateway_created');
      }, function() {
        // called when dialog is cancelled - nothing to do
      });
    }, function() {
      // user doesn't want to discard changes - nothing to do
    });
  };

  $scope.saveSecureGateway = function() {
    if ($scope.saveDisabled) {
      return;
    }

    var timestamp = (new Date()).getTime();
    var messageId = "savingSecureGateway-" + timestamp;
    $scope.$root.notifyUser('savingSecureGateway', [], "BUSY", false, messageId);

    $scope.saveDisabled = true;

    var params = {
      orgId: $scope.orgId,
      gatewayId: $scope.selectedSecureGateway._id
    };

    $scope.selectedSecureGateway.$update(params).then(function() {
      $scope.saveDisabled = true;
      $scope.$broadcast("secureGateway_saved");
      $scope.$root.notifyUser('savedSecureGateway', [], "SUCCESS", true, messageId);
    }, function(error) {
      $scope.saveDisabled = false;
      $scope.$root.notifyUser('errorSavingSecureGateway', [], "ERROR", false, messageId);
    });
  };

  $scope.confirmDeleteSecureGateway = function(index) {
    $scope.positiveAction = 'delete';
    $scope.confirmation = {
      titleKey: 'confirmDeleteSecureGatewayIdentityTitle',
      message: $filter('translate')('confirmDeleteSecureGatewayIdentity', {
        secureGateway: $scope.secureGateways[index].desc
      }),
      confirmed: function() {
        $scope.deleteSecureGateway(index);
      },
      rejected: function() {
      }
    };

    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      scope: $scope,
      backdrop: 'static'
    });
  };

  $scope.deleteSecureGateway = function(index) {
    var timestamp = (new Date()).getTime();
    var messageId = "deletingSecureGateway-" + timestamp;
    $scope.$root.notifyUser('deletingSecureGateway', [], "BUSY", false, messageId);

    $scope.beingDeleted = true;
    $scope.saveDisabled = true;

    var secureGateway = $scope.secureGateways[index];

    if(!secureGateway.newSecureGateway) {
      var params = {
        orgId: $scope.orgId,
        gatewayId: secureGateway._id
      };

      secureGateway.$remove(params).then(function() {
        $scope.secureGateways.splice(index, 1);

        if($scope.secureGateways.length > 0) {
          $scope.selectedSecureGateway = $scope.secureGateways[0];
        } else {
          $scope.selectedSecureGateway = null;
        }

        $scope.$emit('secureGateway_removed', secureGateway);
        $scope.beingDeleted = false;
        $scope.$root.notifyUser('deletedSecureGateway', [], "SUCCESS", true, messageId);
      }, function(error) {
        $scope.beingDeleted = false;
        $scope.$root.notifyUser('errorDeletingSecureGateway', [], "ERROR", false, messageId);
      });
    }
  }

  // Called when a different profile is selected from the list
  $scope.secureGatewayChanged = function(newValue, oldValue) {
    if (!$scope.saveDisabled && newValue !== oldValue) {
      // perform a navigate check - send original value in case the user vetoes the operation
      $scope.onNavigateOut(oldValue).then(function() {
        if (newValue) {
          $scope.preSelectGateway = newValue._id;
        }

        $scope.saveDisabled = true;
        $scope.$broadcast("secureGateway_discarded");
        $scope.refreshGateways();
      }, function() {
        // restore previous selection, user wants to stay - must switch off watch temporarily
        // otherwise we get stuck in a loop
        $scope.unwatchGateway();
        $scope.selectedSecureGateway = oldValue;
        $scope.unwatchGateway = $scope.$watch('selectedSecureGateway', $scope.secureGatewayChanged);
      });
    }
  };


  $scope.unwatchGateway = $scope.$watch('selectedSecureGateway', $scope.secureGatewayChanged);

  // Called when event is raised from contained form
  $scope.$on("secureGateway_canSave", function(evt, canSave) { $scope.saveDisabled = !canSave; });
}

secureGateways.controller('SecureGatewayController', [
  '$scope',
  '$modal',
  secureGatewayController
]);

function secureGatewayController($scope, $modal) {
  $scope.showSetup = function() {
    $modal.open({
      templateUrl: 'apim/securegateways/partials/setup.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'SetupController',
      size: 'lg',
      scope: $scope,
      backdrop: 'static'
    });
  };

  // Called when the form is either invalid or has been changed
  $scope.handleFormUpdate = function() {
    var canSave = true;

    if (!$scope.secureGatewayForm || $scope.secureGatewayForm.$invalid || $scope.secureGatewayForm.$pristine) {
      canSave = false;
    }

    $scope.$emit("secureGateway_canSave", canSave);
  };

  // called from parent scope when the IDP has been successfully saved
  $scope.secureGatewaySaved = function() {
    // mark the form as clean again
    $scope.secureGatewayForm.$setPristine();
  };

  $scope.$watch('secureGatewayForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('secureGatewayForm.$pristine', $scope.handleFormUpdate);
  $scope.$on("secureGateway_saved", $scope.secureGatewaySaved);
  $scope.$on("secureGateway_discarded", $scope.secureGatewaySaved);
}

secureGateways.controller('AddSecureGatewayController', [
  '$scope',
  '$rootScope',
  '$mdDialog',
  'Gateway',
  'secureGatewayNamePattern',
  addSecureGatewayController
]);

function addSecureGatewayController($scope, $rootScope, $mdDialog, Gateway, secureGatewayNamePattern) {
  $scope.newSecureGateway = new Gateway();
  $scope.secureGatewayNamePattern = secureGatewayNamePattern;
  $scope.modifyingObject = false;

  $scope.commit = function() {
    $scope.modifyingObject = true;

    $scope.newSecureGateway.$save({
      orgId: $rootScope.orgId
    }, function() {
      $mdDialog.hide($scope.newSecureGateway);
    }, function() {
      $mdDialog.cancel();
    });
  }

  $scope.cancel = function() {
    $mdDialog.cancel();
  };
}

secureGateways.controller('SetupController', ['$scope', '$modalInstance', setupController]);

function setupController($scope, $modalInstance) {
  $scope.clientTypes = [
    { value: "apim/securegateways/partials/installer.html", name: 'ibmInstallers' },
    { value: "apim/securegateways/partials/docker.html", name: 'docker' },
    { value: "apim/securegateways/partials/dataPower.html", name: 'ibmDataPower' }
  ];

  $scope.selectedClientType = $scope.clientTypes[0].value;

  $scope.dockerRun = [
    'docker',
    'run',
    '-it',
    'ibmcom/secure-gateway-client',
    $scope.selectedSecureGateway._id,
    '--sectoken',
    $scope.selectedSecureGateway.jwt
  ].join(' ');

  $scope.dockerPull = [
    'docker',
    'pull',
    'ibmcom/secure-gateway-client'
  ].join(' ');

  $scope.close = function() {
    $modalInstance.close();
  };
};

angular.module('apim').config(['$tooltipProvider', function($tooltipProvider) {
  //This is an object that contains a map of 'startingEvent' and its corresponding 'ending event'
  //The mapping in this object is added to the default mapping specified in bootstrap-ui tooltip docs
  $tooltipProvider.setTriggers({
    'createSecureGatewayTooltipEvent': 'click',
    'installSecureGatewayTooltipEvent': 'click'
  });
}]);

secureGateways.controller('TourController', ['$scope', '$rootScope', '$window', '$timeout', tourController]);

function tourController($scope, $rootScope, $window, $timeout) {
  $scope.tourMinimized = $window.localStorage['sgTourMinimized_' + $scope.currentUser.id] === 'true' ? true : false;
  $scope.tourClosed = $window.localStorage['sgTourClosed_' + $scope.currentUser.id] === 'true' ? true : false;
  $scope.currentStep = parseInt($window.localStorage['sgTourCurrentStep_' + $scope.currentUser.id]);

  if(!$scope.currentStep) {
    $scope.currentStep = ($scope.secureGateways && $scope.secureGateways.length > 0) ? 2 : 1;
    $window.localStorage['sgTourCurrentStep_' + $scope.currentUser.id] = $scope.currentStep;
  }

  $scope.toggleMinimizeTour = function() {
    $scope.$broadcast('toggleGuidedTourEvent');
  };

  $scope.toggleCloseTour = function() {
    $scope.$broadcast('toggleCloseTourEvent');
  };

  $scope.advanceToStep = function(step) {
    if(step > $scope.currentStep) {
      $scope.currentStep = step;
      $window.localStorage['sgTourCurrentStep_' + $scope.currentUser.id] = step;
    }
  };

  $scope.triggerCreateStep = function() {
    angular.element(document.getElementById('addSecureGatewayButton')).triggerHandler('createSecureGatewayTooltipEvent');
  };

  $scope.triggerInstallStep = function() {
    angular.element(document.getElementById('setupClientButton')).triggerHandler('installSecureGatewayTooltipEvent');
    $scope.advanceToStep(3);
  };

  $scope.openDoc = function(url) {
    $window.open(url);
  };

  $scope.$on('toggleGuidedTourEvent', function() {
    $scope.tourMinimized = !$scope.tourMinimized;
    $window.localStorage['sgTourMinimized_' + $scope.currentUser.id] = $scope.tourMinimized;
  });

  $scope.$on('toggleCloseTourEvent', function() {
    $scope.tourClosed = !$scope.tourClosed;
    $window.localStorage['sgTourClosed_' + $scope.currentUser.id] = $scope.tourClosed;
    $rootScope.sgTourTextOff = !$rootScope.sgTourTextOff;

    if($scope.tourClosed) {
      $timeout(function() {
        angular.element(document.getElementById('helpbtn')).triggerHandler('click');
        angular.element(document.getElementById('reopenSgTourBtn')).triggerHandler('closeGettingStartedEvent');
      }, 500);
    }
  });

  $scope.$on('secureGateway_created', function() {
    $scope.advanceToStep(2);
  });
}
