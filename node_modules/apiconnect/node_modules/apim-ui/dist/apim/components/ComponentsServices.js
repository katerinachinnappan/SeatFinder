/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */


  function componentFileHeader(requestConfig) {
    if (requestConfig.params && requestConfig.params.fileHeader) return requestConfig.params.fileHeader;
  }

var components = angular.module('apim.components');

components.factory('Component', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/components/:componentId/', {}, {
      query: {method: 'GET', params: {orgId: '@orgId', componentId: '@componentId'}, isArray: true},
      get: {method: 'GET', params: {orgId: '@orgId', componentId: '@componentId'}, isArray: false},
      create: {method: 'POST', params: {orgId: '@orgId'}, isArray: false},
      update: {method: 'PUT', params: {orgId: '@orgId', componentId: '@componentId'}, isArray: false,
        headers: {
          'x-ibm-component-file': componentFileHeader
        }
      },
      delete: {method: 'DELETE', params: {orgId: '@orgId', componentId: '@componentId'}, isArray: false,
        headers: {
          'x-ibm-component-file': componentFileHeader
        }
      }
    });
  }
]);

components.factory('ComponentReference', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/components/references', {}, {
      query: {method: 'GET', params: {orgId: '@orgId'}, isArray: false}
    });
  }
]);

components.factory('ComponentRegistry', ['$rootScope', '$http', 'Component', 'ComponentReference', function($rootScope, $http, Component, ComponentReference) {
  return (function () {
    var self = {};

    var components = null;
    var componentReferences = null;

    self.getComponents = function(refresh) {
      if (components && !refresh) return components;
      components = Component.query({orgId: $rootScope.orgId});
      return components;
    };

    self.getComponentReferences = function(refresh) {
      return (componentReferences && !refresh) ?
        componentReferences :
        componentReferences = ComponentReference.query({orgId: $rootScope.orgId});
    };

    self.getDocumentReferences = function(document) {
      return $http.post(
        'proxy/orgs/' + $rootScope.orgId + '/references',
        angular.toJson(document)
      );
    }

    self.getReference = function(reference, referenceScope) {
      if (!componentReferences) return;
      var withoutDotSlash = (reference.indexOf("./") === 0) ? reference.substring(2) : reference;
      var withDotSlash = (reference.indexOf("./") === -1) ? "./" + reference : reference;
      if (referenceScope && componentReferences[referenceScope][withDotSlash]) return componentReferences[referenceScope][withDotSlash];
      if (referenceScope && componentReferences[referenceScope][withoutDotSlash]) return componentReferences[referenceScope][withoutDotSlash];
      return componentReferences[reference];
    }

    self.addReference = function(reference, object, referenceScope) {
      self.getComponentReferences().$promise.then(function(data) {
        data[referenceScope][reference] = object;
        data[referenceScope]["./" + reference] = object;
      });
    }

    self.referenceToLink = function(reference) {
      if (reference.indexOf("http") === 0) return reference;
      var filtered = components.filter(function(compoment) {
        return reference.indexOf(compoment.file) === 0 ||
          reference.indexOf(compoment.id) === 0;
      });
      if (filtered.length > 0) {
        return self.componentToLink(filtered[0]);
      } else {
        return "";
      }
    }

    self.componentToLink = function(component) {
      return "#/design/components/editor/" + component.info.name + ":" + component.info.version;
    }

    self.refresh = function() {
      self.getComponents(true);
      self.getComponentReferences(true);
    }

    $rootScope.$on('component_refresh', self.refresh);

    return self;
  }());


}]);

components.service('ComponentActions', ['$rootScope', '$q', 'ComponentRegistry',
  function($rootScope, $q, ComponentRegistry) {

    var self = {};

    function componentToReference(component, headers) {
      var headersObj = headers();
      if (headersObj['x-ibm-component-file']) return headersObj['x-ibm-component-file'];
      return component.id;
    };

    self.addToComponent = function(component, referencedObject, name, referenceScope) {
      var deferred = $q.defer();
      component.$get({
        orgId: $rootScope.orgId,
        componentId: component.info.name + ":" + component.info.version
      }, function(component, headers) {
        if (component[referenceScope] && component[referenceScope][name]) {
          $rootScope.notifyUser('component_' + referenceScope + '_name_exists', {name: name}, 'ERROR');
          deferred.reject();
        }
        if (!component[referenceScope]) {
          component[referenceScope] = {};
        }
        var originalObject = angular.copy(referencedObject);
        component[referenceScope][name] = originalObject;
        component.$update({
          orgId: $rootScope.orgId,
          componentId: component.info.name + ":" + component.info.version,
          fileHeader: headers()['x-ibm-component-file'],
        }, function(component, headers) {
          var reference = componentToReference(component, headers) + "#/" + referenceScope + "/" + name;
          ComponentRegistry.addReference(reference, originalObject, referenceScope);
          var link = ComponentRegistry.componentToLink(component);
          $rootScope.notifyUser('component_updated_with_reference', {name: name, component: component.info.title + ", " + component.info.version}, 'SUCCESS', null, null, link);
          deferred.resolve({
            reference: reference,
            resolved: originalObject
          });
        }, function(error) {
          $rootScope.notifyUser('component_failed_to_update', [], 'ERROR');
          deferred.resolve(error);
        });
      }, function(error) {
        $rootScope.notifyUser('component_failed_to_update', [], 'ERROR');
        deferred.resolve(error);
      });
      return deferred.promise;
    };

    return self;

  }]);

