/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Controllers */

var components = angular.module('apim.components', ['ngResource']);

components.controller('ComponentSelectorController', ['$scope', '$mdDialog', '$modal', 'ComponentRegistry', ComponentSelectorController]);

function ComponentSelectorController($scope, $mdDialog, $modal, ComponentRegistry) {

  var self = this;

  $scope.currentReference = $scope.referenceSource.$ref;

  $scope.refreshComponents = function() {
    $scope.components = ComponentRegistry.getComponents();
    $scope.references = ComponentRegistry.getComponentReferences();
  };

  $scope.refreshComponents();

  var showComponentReferenceChooser = function($event) {
    return $mdDialog.show({
      controller: 'ComponentReferenceDialogController',
      templateUrl: "apim/components/partials/choose-component-reference.html",
      parent: angular.element(document.body),
      targetEvent: $event,
      locals: {
        currentReference: $scope.currentReference,
        references: $scope.references[$scope.referenceScope],
        components: $scope.components
      },
      focusOnOpen: false
    });
  };

  var showComponentChooser = function($event) {
    return $mdDialog.show({
      controller: 'ComponentDialogController',
      templateUrl: "apim/components/partials/choose-component.html",
      parent: angular.element(document.body),
      targetEvent: $event,
      locals: {
        currentObject: $scope.referenceSource,
        components: $scope.components,
        referenceScope: $scope.referenceScope
      },
      focusOnOpen: false
    });
  };

  function replaceWithReference(object, reference) {
    for (var property in object) {
      if (object.hasOwnProperty(property) && property.indexOf('$$') !== 0) {
        delete object[property];
      }
    }
    object.$ref = reference;
  };

  self.moveToNewComponent = function($event) {
    $event.stopPropagation();
    $scope.menuOpen = false;
    $mdDialog.show({
      controller: 'CreateComponentController',
      templateUrl: "apim/components/partials/create-component.html",
      parent: angular.element(document.body),
      targetEvent: $event,
      locals: {
        currentObject: $scope.referenceSource,
        referenceScope: $scope.referenceScope
      },
      focusOnOpen: false
    }).then(function(response) {
      // close
      replaceWithReference($scope.referenceSource, response.reference);
      $scope.currentReference = response.reference;
      $scope.$emit('reference_created', response);
      $scope.refreshComponents();
    }, function() {
      // dismiss
    });
  };

  self.moveToComponent = function($event) {
    $event.stopPropagation();
    $scope.menuOpen = false;
    showComponentChooser($event).then(function(response) {
      replaceWithReference($scope.referenceSource, response.reference);
      $scope.currentReference = response.reference;
      $scope.$emit('reference_created', response);
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  self.replaceFromComponent = function($event) {
    $event.stopPropagation();
    $scope.menuOpen = false;
    showComponentReferenceChooser($event).then(function(response) {
      $scope.referenceSource.$ref = response;
      $scope.currentReference = response;
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  self.updateComponent = function($event) {
    $event.stopPropagation();
    $scope.menuOpen = false;
    showComponentReferenceChooser($event).then(function(response) {
      $scope.referenceSource.$ref = response;
      $scope.currentReference = response;
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  self.cloneComponent = function($event) {
    $event.stopPropagation();
    $scope.menuOpen = false;
    $scope.confirmation = {
      title: 'components_clone_component_title',
      messageKey: 'components_clone_component_message',
      confirmed: function() {
        delete $scope.referenceSource.$ref;
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
};

components.controller('ComponentDialogController', ['$scope', '$mdDialog', 'currentObject', 'components', 'referenceScope', 'ComponentActions',  ComponentDialogController]);

function ComponentDialogController($scope, $mdDialog, currentObject, components, referenceScope, ComponentActions) {

  $scope.components = components;
  $scope.currentObject = currentObject;
  $scope.referenceScope = referenceScope;

  if ($scope.currentObject.name) $scope.propertyName = $scope.currentObject.name;

  $scope.done = function() {
    $mdDialog.hide(ComponentActions.addToComponent($scope.selectedComponent, $scope.currentObject, $scope.propertyName, $scope.referenceScope));
  };

  $scope.cancel = function() {
    $mdDialog.cancel();
  };

};

components.controller('ComponentReferenceDialogController', ['$scope', '$mdDialog', 'references', 'currentReference', 'components', ComponentReferenceDialogController]);

function ComponentReferenceDialogController($scope, $mdDialog, references, currentReference, components) {

  $scope.components = components;
  $scope.references = references;
  $scope.currentReference = currentReference;

  $scope.done = function() {
    var reference = $scope.selectedReference || $scope.externalReference;
    if (reference === $scope.currentReference) {
      $scope.cancel();
    } else {
      $mdDialog.hide($scope.selectedReference || $scope.externalReference);
    }
  };

  $scope.cancel = function() {
    $mdDialog.cancel();
  };

};

components.controller('ComponentsController', ['$scope', '$mdDialog', 'ComponentRegistry', ComponentsController]);

function ComponentsController($scope, $mdDialog, ComponentRegistry) {

  var self = this;

  $scope.refreshComponents = function() {
    $scope.$watch('currentOrg', function() {
      if (!$scope.currentOrg) return;
      $scope.xhrProcessing = true;
      $scope.components = ComponentRegistry.getComponents();
      $scope.components.$promise.then(function() {
        $scope.xhrProcessing = false;
      });
    });
  };

  $scope.refreshComponents();

  $scope.createComponent = function($event) {
    $mdDialog.show({
      controller: 'CreateComponentController',
      templateUrl: "apim/components/partials/create-component.html",
      parent: angular.element(document.body),
      targetEvent: $event,
      locals: {
        currentObject: null,
        referenceScope: null
      },
      focusOnOpen: false
    }).then(function(response) {
      // close
      window.location.hash = "#/design/components/editor/" + response.component.info.name + ":" + response.component.info.version;
      $scope.refreshComponents();
    }, function() {
      // dismiss
    });
  };

};

components.controller('ComponentEditorController', ['$scope', '$rootScope', '$stateParams', '$location', '$modal', '$filter', 'Component', 'DirtyService', 'SlugService', ComponentEditorController]);

function ComponentEditorController($scope, $rootScope, $stateParams, $location, $modal, $filter, Component, DirtyService, SlugService) {

  var self = this;

  $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;
    $scope.editable = !!$scope.permissions['org_draftApis/edit'];
  });

  $scope.cleanUpKey = function(key) {
    return key.replace(/\W/g, '');
  };

  $scope.propertyTypes = {
    "integer-int32": {
      name: "integer",
      type: "integer",
      format: "int32"
    },
    "integer-int64": {
      name: "long",
      type: "integer",
      format: "int64"
    },
    "number-float": {
      name: "float",
      type: "number",
      format: "float"
    },
    "number-double": {
      name: "double",
      type: "number",
      format: "double"
    },
    "string": {
      name: "string",
      type: "string"
    },
    "string-byte": {
      name: "byte",
      type: "string",
      format: "byte"
    },
    "string-binary": {
      name: "binary",
      type: "string",
      format: "binary"
    },
    "boolean": {
      name: "boolean",
      type: "boolean"
    },
    "string-date": {
      name: "date",
      type: "string",
      format: "date"
    },
    "string-date-time": {
      name: "dateTime",
      type: "string",
      format: "date-time"
    },
    "string-password": {
      name: "password",
      type: "string",
      format: "password"
    },
    "array": {
      name: "array",
      type: "array",
      items: {
        "type": "string"
      }
    },
    "object": {
      name: "object",
      type: "object"
    }
  };

  $scope.allTypes = angular.copy($scope.propertyTypes);

  $scope.$on("$locationChangeStart", function (event, next, current) {
    if ($scope.checkDirty()) {
      event.preventDefault();
      $scope.confirmation = {
        titleKey: 'unsaved_changes_title',
        messageKey: 'unsaved_changes',
        confirmed: function() {
          DirtyService.clearDirty('ComponentEditorController');
          $location.path($location.url(next).hash());
        },
        rejected: function() {
        }
      };
      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        size: 'sm',
        scope: $scope
      });
    }
  });

  $scope.saveComponent = function() {
    if (!$scope.component.$update) $scope.component = new Component($scope.component);
    $scope.component.$update({
      orgId: $rootScope.orgId,
      componentId: $scope.component.info.name + ":" + $scope.component.info.version,
      fileHeader: $scope.headers['x-ibm-component-file']
    }, function() {
      DirtyService.clearDirty('ComponentEditorController');
      $scope.$emit('component_refresh');
    });
  };

  $scope.deleteComponent = function() {
    $scope.confirmation = {
      titleKey: 'components_confirm_delete_title',
      messageKey: 'components_confirm_delete',
      confirmed: function() {
        $scope.beingDeleted = true;
        if (!$scope.component.$delete) $scope.component = new Component($scope.component);
        $scope.component.$delete({
          orgId: $rootScope.orgId,
          componentId: $scope.component.info.name + ":" + $scope.component.info.version,
          fileHeader: $scope.headers['x-ibm-component-file']
        }, function() {
          $scope.$emit("component_refresh");
          window.location.hash = "#/design/components";
        }, function() {
          $scope.$emit("component_refresh");
          window.location.hash = "#/design/components";
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.$watch('component.definitions', function() {
    if (!$scope.swaggerDocument || !$scope.swaggerDocument.definitions) return;
    for(var definitionName in $scope.swaggerDocument.definitions) {
      $scope.allTypes[definitionName] = {type: definitionName, name: definitionName, $ref: '#/definitions/' + definitionName};
    }
  }, true);

  var selectedPath;
  var navigatedByTocClick = false;
  $scope.navigate = function(path, subPath, expand) {
    selectedPath = path + (subPath ? "-" + $scope.cleanUpKey(subPath) : "");
    // Scroll in api editor
    if ($scope.mainTab == 'editor') {
      var editNode = document.querySelector('.detailsEditor .navigate-' + selectedPath);
      if (editNode) {
        navigatedByTocClick = true;
        $('.toc .tocItem .selected').removeClass('selected');
        $('.toc .tocItem .toc-navigate-' + selectedPath).addClass('selected');
        editNode.scrollIntoView();
        if (expand) $scope.$broadcast('expand-'+path+'-'+subPath);
      }
    } else if ($scope.mainTab == 'code') {
      // Scroll in ACE editor
      var editor = ace.edit('ace-api-editor');
      var stringToFind = path + ":";
      var lines = editor.session.doc.getAllLines();
      for(var i=0; i<lines.length; i++) {
        if (lines[i].indexOf(stringToFind) == 0) {
          if(subPath) {
            var subStringToFind = subPath;
            for(var j=i; j<lines.length; j++) {
              var index1 = lines[j].indexOf(subStringToFind + ":");
              var index2 = lines[j].indexOf(subStringToFind + "':");
              var index3 = lines[j].indexOf(subStringToFind + "\":");
              if(index1 >= 0 || index2 >= 0 || index3 >= 0) {
                i = j;
                break;
              }
            }
          }
          $scope.aceCurrentLine = i + 1;
          editor.scrollToLine($scope.aceCurrentLine, true, true, function () {});
          editor.gotoLine($scope.aceCurrentLine, 10, true);
          break;
        }
      }
    }
  };

  $scope.setDefinitionExpanded = function(definitionName) {
    if($scope.expandedDefinition == definitionName) $scope.expandedDefinition = null;
    else $scope.expandedDefinition = definitionName;
  };

  $scope.isDefinitionExpanded = function(definitionName) {
    return $scope.expandedDefinition == definitionName;
  };

  $scope.removeDefinition = function($event, name) {
    $event.stopPropagation();
    $scope.confirmation = {
      titleKey: 'api_definition_delete_title',
      messageKey: 'api_definition_delete_message',
      confirmed: function() {
        delete $scope.swaggerDocument.definitions[name];
        delete $scope.allTypes[name];
        if(angular.equals({}, $scope.swaggerDocument.definitions)) {
          delete $scope.swaggerDocument.definitions;
        }
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.addDefinition = function() {
    var testNameBase = $filter('translate')("api_definition_new").toLowerCase().replace(/\W/g, '-');
    var existingDefinitions = $scope.swaggerDocument.definitions;
    if (!existingDefinitions) existingDefinitions = {};
    var i = 1;
    while(existingDefinitions[testNameBase + "-" + i] != null) {
      i++;
    }

    var newDefinitionName = testNameBase + "-" + i;
    var propertyName = $filter('translate')("api_property_new").toLowerCase().replace(/\W/g, '-') + "-1";

    var updatedDefinitions = {};
    updatedDefinitions[newDefinitionName] = {properties: {}, additionalProperties: false};
    updatedDefinitions[newDefinitionName].properties[propertyName] = {type: "string"};
    for(var definitionName in existingDefinitions) {
      updatedDefinitions[definitionName] = existingDefinitions[definitionName];
    }
    $scope.swaggerDocument.definitions = updatedDefinitions;
  };

  $scope.addAssembly = function() {
    if (!$scope.component) return;
    if (!$scope.component.assemblies) $scope.component.assemblies = {};
    var newName = SlugService.createUniqueName(
      $filter('translate')("api_policy_assembly_new"),
      $scope.component.assemblies
    );
    $scope.component.assemblies[newName] = {
      execute: [],
      catch: []
    };
  };

  $scope.setAssemblyExpanded = function(assemblyName, $event, isExpanded) {
    // only let an event trigger if the click was on the correct element
    if ($event && $event.target !== $event.currentTarget) return;
    if (isExpanded === true) {
      $scope.expandedAssembly = assemblyName;
    } else if (isExpanded === false) {
      $scope.expandedAssembly = null;
    } else if ($scope.expandedAssembly == assemblyName) {
      $scope.expandedAssembly = null;
    } else {
      $scope.expandedAssembly = assemblyName;
    }
  };

  $scope.editAssembly = function(assemblyName, assembly) {
    $scope.$emit('menu-configuration', {assembly: true});
    $scope.currentAssembly = {
      'x-ibm-configuration': {
        assembly: assembly
      }
    };
    $scope.setMainTab('assembly');
  };

  $scope.switchToCodeView = function(section, subsection) {
    $scope.setMainTab('code');
    if(section) {
      setTimeout(function(){$scope.navigate(section, subsection);}, 0);
    }
  };

  var orgWatcher = $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    orgWatcher();
    $scope.xhrProcessing = true;
    Component.get({orgId: $scope.orgId, componentId: $stateParams.id}, function(component, headers) {
      $scope.xhrProcessing = false;
      $scope.headers = headers();
      $scope.component = component;
      $scope.swaggerDocument = component;

      var firstWatchHit = false;
      $scope.$watch('component', function() {
        if (!$scope.component) return;
        if (firstWatchHit) {
          DirtyService.setDirty('ComponentEditorController');
        }
        firstWatchHit = true;
      }, true);
    });
  });

  $scope.checkDirty = function() {
    return DirtyService.isDirty('ComponentEditorController');
  };

  $scope.$watch('componentAsYaml', function() {
    if (!$rootScope.componentAsYaml) return;
    if ($scope.mainTab === 'editor') return;
    $scope.component = jsyaml.safeLoad($rootScope.componentAsYaml);
  });

  $scope.$watch('component', function() {
    if (!$scope.component) return;
    if ($scope.mainTab === 'code') return;
    $rootScope.componentAsYaml = jsyaml.safeDump(angular.fromJson(angular.toJson($scope.component)), {lineWidth: -1});
  }, true);

};


components.controller('ComponentAssemblyController', ['$scope', '$modal', ComponentAssemblyController]);

function ComponentAssemblyController($scope, $modal) {

  $scope.currentAssembly = {
    'x-ibm-configuration': {
      assembly: $scope.assembly
    }
  };

  $scope.removeAssembly = function($event) {
    $event.stopPropagation();
    $scope.confirmation = {
      titleKey: 'api_policy_assembly_delete_title',
      messageKey: 'api_policy_assembly_delete_message',
      confirmed: function() {
        delete $scope.component.assemblies[$scope.assemblyName];
        if (_.isEmpty($scope.component.assemblies)) {
          delete $scope.component.assemblies;
        }
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.$assemblyName = function(newName) {
    if (arguments.length){
      // Setter
      if(newName) {
        // Check for name clash
        for(var defName in $scope.component.assemblies) {
          if(defName == newName) {
            $scope.tempName = newName;
            return;
          }
        }
        $scope.tempName = null;

        // Update
        var updatedAssemblies = {};
        for(var assemblyName in $scope.component.assemblies) {
          if(assemblyName == $scope.assemblyName) {
            updatedAssemblies[newName] = $scope.component.assemblies[assemblyName];
          } else {
            updatedAssemblies[assemblyName] = $scope.component.assemblies[assemblyName];
          }
        }
        $scope.component.assemblies = updatedAssemblies;
        $scope.assemblyName = newName;
        $scope.setAssemblyExpanded(newName);
      }
    } else {
      // Getter
      if($scope.tempName) return $scope.tempName;
      return $scope.assemblyName;
    }
  };

};

components.controller('ComponentController', ['$scope', '$rootScope', '$modal', ComponentController]);

function ComponentController($scope, $rootScope, $modal) {

  var self = this;

  $scope.deleteComponent = function() {
    $scope.confirmation = {
      titleKey: 'components_confirm_delete_title',
      messageKey: 'components_confirm_delete',
      confirmed: function() {
        $scope.beingDeleted = true;
        $scope.component.$delete({
          orgId: $rootScope.orgId,
          componentId: $scope.component.info.name + ":" + $scope.component.info.version,
          fileHeader: $scope.component.file
        }, function() {
          $scope.$emit("component_refresh");
          $scope.refreshComponents();
        }, function() {
          $scope.$emit("component_refresh");
          $scope.refreshComponents();
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  }

};

components.controller('CreateComponentController', ['$scope', '$rootScope', '$mdDialog', 'currentObject', 'referenceScope', 'Component', 'ComponentRegistry', 'ArtifactBuilder', 'SlugService', CreateComponentController]);

function CreateComponentController($scope, $rootScope, $mdDialog, currentObject, referenceScope, Component, ComponentRegistry, ArtifactBuilder, SlugService) {

  if (currentObject && referenceScope) {
    $scope.creatingWithContent = true;
  }

  if (!$scope.newComponent) {
    $scope.newComponent = {
      version: "1.0.0",
      title: ""
    };
  }

  var generateName = function() {
    // apply title -> name conversion rules
    $scope.newComponent.name = SlugService.createName($scope.newComponent.title);
  };
  $scope.$watch('newComponent.title', generateName);

  $scope.create = function() {
    $scope.creatingComponent = true;
    if (currentObject && referenceScope) {
      // we have content to add to the component already
      $scope.newComponent[referenceScope] = {};
      $scope.newComponent[referenceScope][$scope.newReferenceName] = currentObject;
    }
    var templateDeferred = ArtifactBuilder.createFromTemplate('component', $scope.newComponent);
    templateDeferred.promise.then(function(newComponent) {
      var component = new Component(newComponent);
      component.$create({orgId: $rootScope.orgId}, function(comp, headers) {
        $scope.creatingComponent = false;
        var reference = "";
        if ($scope.creatingWithContent) {
          reference = "#/" + referenceScope + "/" + $scope.newReferenceName;
        }
        var headersObj = headers();
        if (headersObj['x-ibm-component-file']) {
          reference = headersObj['x-ibm-component-file'] + reference;
        } else {
          reference = "apic://" + component.id + reference;
        }
        if ($scope.components) $scope.components.push(component);
        if ($scope.creatingWithContent) {
          ComponentRegistry.addReference(reference, currentObject, referenceScope);
        }
        $mdDialog.hide({
          component: component,
          reference: reference
        });
        $scope.$emit("component_refresh");
      }, function() {
        $scope.creatingComponent = false;
        $scope.$emit("component_refresh");
      });
    });
  };

  $scope.cancel = function() {
    $mdDialog.cancel('cancel');
  };

}

