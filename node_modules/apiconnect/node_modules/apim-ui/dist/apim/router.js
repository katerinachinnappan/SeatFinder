/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

  /* global networkMode */
'use strict';

angular.module('apim').config(function Router($compileProvider, $stateProvider,
  $urlRouterProvider, $logProvider) {

    var isOffline = (networkMode === 'offline');

    if (window.isExplorer) {
      $urlRouterProvider.otherwise(function($injector, $location) {
        var state = $injector.get('$state');
        state.go("explorer");
        return $location.path() + "?source=" + $location.$$search.source;
      });
    } else if (window.isAPIEditor){
      $urlRouterProvider.otherwise(function($injector, $location) {
        var state = $injector.get('$state');
        state.go("api");
        return $location.path();
      });
    } else if (isOffline) {
      $urlRouterProvider.otherwise('/design/apis');
    } else {
      $urlRouterProvider.otherwise('/initial');
    }

    $stateProvider
      .state('apis', {
        url: '/design/apis',
        views: {
          '': {
            templateUrl: 'apim/apis/partials/draft-apis.html'
          }
        }
      })
      .state('api', {
        url: '/design/apis/editor/:id?section&import&tags&no-proxy',
        views: {
          '': {
            templateUrl: 'apim/apis/partials/api.html',
            controller: 'ApiEditorController as apiEditorCtrl'
          }
        }
      })
      .state('components', {
        url: '/design/components',
        views: {
          '': {
            templateUrl: 'apim/components/partials/draft-components.html'
          }
        }
      })
      .state('component', {
        url: '/design/components/editor/:id',
        views: {
          '': {
            templateUrl: 'apim/components/partials/component-editor.html',
            controller: 'ComponentEditorController as componentEditorCtrl'
          }
        }
      })
      .state('products', {
        url: '/design/products',
        views: {
          '': {
            templateUrl: 'apim/products/partials/draft-products.html'
          }
        }
      })
      .state('product', {
        url: '/design/products/:editMode/:id',
        views: {
          '': {
            templateUrl: 'apim/products/partials/product-full-editor.html'
          }
        }
      })
      .state('assemblies', {
        url: '/design/assemblies',
        views: {
          '': {
            templateUrl: 'apim/assembly/partials/draft-assemblies.html'
          }
        }
      })
      .state('assembly', {
        url: '/design/assemblies/:id',
        views: {
          '': {
            templateUrl: 'apim/assembly/partials/assembly-editor.html'
          }
        }
      })
      .state('projects', {
        url: '/projects',
        templateUrl: 'apim/projects/partials/projects.html',
        controller: 'ProjectsController'
      })
      .state('projects-new', {
        url: '/projects/new',
        templateUrl: 'apim/projects/partials/new-project.html',
        controller: 'AddProjectController'
      })
      .state('styleguide', {
        url: '/styleguide',
        templateUrl: 'apim/styleguide/partials/styleguide.html',
        controller: 'StyleguideController'
      })
      .state('admin_initial', {
        url: '/admin/initial',
        controller: 'InitialAdminController'
      })
      .state('users', {
        url: '/admin/users',
        views: {
          '': {
            templateUrl: 'apim/users/partials/users.html'
          }
        }
      })
      .state('roles', {
        url: '/admin/roles',
        views: {
          '': {
            templateUrl: 'apim/users/partials/roles.html'
          }
        }
      })
      .state('securegateways', {
        url: '/admin/securegateways',
        views: {
          '': {
            templateUrl: 'apim/securegateways/partials/secureGateways.html'
          }
        }
      })
      .state('billing', {
       url: '/admin/billing?section&filter',
        views: {
          '': {
            templateUrl: 'apim/billing/partials/billing.html'
          }
        }
      })
      .state('objects', {
        url: '/admin/objects?section&filter',
        views: {
          '': {
            templateUrl: 'apim/objects/partials/objects.html'
          }
        }
      })
      .state('catalogs', {
        url: '/catalogs',
        views: {
          '': {
            templateUrl: 'apim/catalogs/partials/catalogs.html'
          }
        }
      })
      .state('spaces_initial', {
        url: '/catalogs/:id/spaces/:spaceId/initial',
        controller: 'InitialSpaceController'
      })
      .state('spaces_products', {
        url: '/catalogs/:id/spaces/:spaceId/products',
        views: {
          '': {
            templateUrl: 'apim/deployment/partials/deployed-products.html'
          }
        }
      })
      .state('spaces_approvals', {
        url: '/catalogs/:id/spaces/:spaceId/approvals',
        views: {
          '': {
            templateUrl: 'apim/deployment/partials/approvals.html'
          }
        }
      })
      .state('spaces_subscriptions', {
        url: '/catalogs/:id/spaces/:spaceId/subscriptions',
        views: {
          '': {
            templateUrl: 'apim/subscriptions/partials/subscriptions.html'
          }
        }
      })
      .state('spaces_community', {
        url: '/catalogs/:id/spaces/:spaceId/community?section&filter',
        views: {
          '': {
            templateUrl: 'apim/community/partials/community.html'
          }
        }
      })
      .state('spaces_developers', {
        url: '/catalogs/:id/spaces/:spaceId/developers',
        views: {
          '': {
            templateUrl: 'apim/developers/partials/developer-organizations.html'
          }
        }
      })
      .state('spaces_developer', {
        url: '/catalogs/:id/spaces/:spaceId/developers/:developer',
        views: {
          '': {
            templateUrl: 'apim/developers/partials/developer-organization-detail.html'
          }
        }
      })
      .state('spaces_analytics', {
        url: '/catalogs/:catalogId/spaces/:spaceId/analytics?type&id&name',
        views: {
          '': {
            templateUrl: 'apim/analytics/partials/analytics.html'
          }
        }
      })
      .state('spaces_settings', {
        url: '/catalogs/:id/spaces/:spaceId/settings',
        views: {
          '': {
            templateUrl: 'apim/environments/partials/environment-settings.html'
          }
        }
      })
      .state('spaces_users', {
        url: '/catalogs/:id/spaces/:spaceId/users',
        views: {
          '': {
            templateUrl: 'apim/users/partials/users.html'
          }
        }
      })
      .state('catalogs_initial', {
        url: '/catalogs/:id/initial',
        controller: 'InitialCatalogController'
      })
      .state('catalogs_products', {
        url: '/catalogs/:id/products',
        views: {
          '': {
            templateUrl: 'apim/deployment/partials/deployed-products.html'
          }
        }
      })
      .state('catalogs_approvals', {
        url: '/catalogs/:id/approvals',
        views: {
          '': {
            templateUrl: 'apim/deployment/partials/approvals.html'
          }
        }
      })
      .state('catalogs_subscriptions', {
        url: '/catalogs/:id/subscriptions',
        views: {
          '': {
            templateUrl: 'apim/subscriptions/partials/subscriptions.html'
          }
        }
      })
      .state('catalogs_community', {
        url: '/catalogs/:id/community?section&filter',
        views: {
          '': {
            templateUrl: 'apim/community/partials/community.html'
          }
        }
      })
      .state('catalogs_developers', {
        url: '/catalogs/:id/developers',
        views: {
          '': {
            templateUrl: 'apim/developers/partials/developer-organizations.html'
          }
        }
      })
      .state('catalogs_developer', {
        url: '/catalogs/:id/developers/:developer',
        views: {
          '': {
            templateUrl: 'apim/developers/partials/developer-organization-detail.html'
          }
        }
      })
      .state('catalogs_analytics', {
        url: '/catalogs/:catalogId/analytics?type&id&name',
        views: {
          '': {
            templateUrl: 'apim/analytics/partials/analytics.html'
          }
        }
      })
      .state('catalogs_settings', {
        url: '/catalogs/:id/settings',
        views: {
          '': {
            templateUrl: 'apim/environments/partials/environment-settings.html'
          }
        }
      })
      .state('catalogs_users', {
        url: '/catalogs/:id/users',
        views: {
          '': {
            templateUrl: 'apim/users/partials/users.html'
          }
        }
      })
      .state('catalogs_app', {
        url: '/catalogs/apps/:id',
        views: {
          '': {
            templateUrl: 'apim/catalogs/partials/app-details.html'
          }
        }
      })
      .state('account', {
        url: '/account',
        abstract: true,
        templateUrl: 'apim/account/partials/account.html'
      })
      .state('account.profile', {
        url: '',
        templateUrl: 'apim/account/partials/profile.html',
        controller: 'AccountController'
      })
      .state('account.settings', {
        url: '/settings',
        templateUrl: 'apim/account/partials/settings.html',
        controller: 'AccountSettingsController'
      })
      .state('notifications', {
        url: '/notifications',
        views: {
          '': {
            templateUrl: 'apim/notifications/partials/notifications.html'
          }
        }
      })
      .state('explorer', {
        url: '/explore?source&api',
        views: {
          '': {
            templateUrl: 'apim/explorer/partials/explorer.html'
          }
        }
      })
      .state('initial', {
        url: '/initial',
        controller: 'InitialController'
      });

    if (isOffline) {
      $stateProvider
        .state('security', {
          url: '/design/security',
          templateUrl: 'apim/objects/partials/objects.html',
          controller: 'ObjectsController'
        })
        .state('models', {
          url: '/design/models',
          templateUrl: 'apim/models/partials/modelList.html',
          controller: 'ModelsController'
        })
        .state('model', {
          url: '/design/models/:id',
          templateUrl: 'apim/models/partials/modelEdit.html',
          controller: 'ModelEditController'
        })
        .state('datasources', {
          url: '/design/datasources',
          templateUrl: 'apim/datasources/partials/dataSourceList.html',
          controller: 'DataSourcesController'
        })
        .state('datasource', {
          url: '/design/datasources/:id',
          templateUrl: 'apim/datasources/partials/dataSourceEdit.html',
          controller: 'DataSourceEditController'
        })
        .state('datasourceDiscover', {
          url: '/design/datasources/:id/discover?all',
          templateUrl: 'apim/datasources/partials/discoverList.html',
          controller: 'DataSourceDiscoverController',
          controllerAs: 'vm'
        })
        .state('run', {
          url: '/run',
          views: {
            'navView': {
              templateUrl: 'apim/runner/partials/appRunnerSubnav.html',
              controller: 'appRunnerSubnav'
            },
            '': {
              templateUrl: 'apim/runner/partials/appRunnerMain.html',
              controller: 'AppRunnerController'
            }
          }
        });
    }

    $compileProvider.aHrefSanitizationWhitelist('.');

    // Disable debug info in production. To detect the "production" mode we are
    // examining location.host to see if it matches localhost
    var isProduction = !/localhost/.test(window.location.host);

    $compileProvider.debugInfoEnabled(!isProduction);
    $logProvider.debugEnabled(!isProduction);
});
