/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var publicCloudDomains = [
  'apiconnect.ibmcloud.com',
  'apiconnect.cloud.ibm.com',
  'apiconnect.test.cloud.ibm.com',
  'apim.ibmcloud.com'
];

angular.module('apim').controller('StagingController', ['$scope', '$rootScope', '$modal', 'StagingTarget', StagingController]);

function StagingController($scope, $rootScope, $modal, StagingTarget) {

  $scope.stagingDropdownOpen = false;

  $rootScope.reloadStagingTargets = function() {
    $rootScope.stagingTargets = StagingTarget.query({
      orgId: $scope.orgId
    });
  };

  $rootScope.$on('event:reloadStagingTargets', $rootScope.reloadStagingTargets);

  if (!$rootScope.stagingTargets) {
    $rootScope.reloadStagingTargets();
  }

  $scope.$watch('stagingTargets', function(newTargets) {
    if (newTargets.$promise) {
      newTargets.$promise.then(function(targets) {
        splitStagingTargets(targets);
      })
    } else{
      splitStagingTargets(newTargets);
    }
  });

  //regenerate split lists when stagingTargets are changed
  var splitStagingTargets = function(targets) {
    $scope.bluemixStagingTargets = [];
    $scope.otherStagingTargets = [];
    for (var i in targets) {
      if (targets[i].info && targets[i].info.type === 'bluemix') {
        $scope.bluemixStagingTargets.push(targets[i]);
      } else if (targets[i].info) {
        $scope.otherStagingTargets.push(targets[i]);
      }
    }
  };

  $scope.handleStagingClick = function() {
    $scope.stagingDropdownOpen = true;
  };

  function manageTargets() {
    $modal.open({
      templateUrl: 'apim/projectStaging/partials/manageTargets.html',
      controller: 'ManageTargetsModalController',
      backdropClass: 'staging-modal-backdrop-z-index',
      windowClass: 'staging-modal-z-index',
      size: 'md',
      scope: $scope
    });
  }

  function publishOptions(target) {
    $scope.selectedTarget = target;
    $modal.open({
      templateUrl: 'apim/projectStaging/partials/publishOptions.html',
      controller: 'PublishOptionsModalController',
      size: 'md',
      scope: $scope
    });
  }

  $scope.openManageTargets = manageTargets;
  $scope.openPublishOptions = publishOptions;
}

angular.module('apim').controller('ManageTargetsModalController', ['$scope', '$rootScope', '$modalInstance', '$window', 'StagingTarget', 'Bluemix', 'APIc', 'SlugService', 'TrackingServices', 'LocationService', ManageTargetsModalController]);

function ManageTargetsModalController($scope, $rootScope, $modalInstance, $window, StagingTarget, Bluemix, APIc, SlugService, TrackingServices, LocationService) {

  $scope.stagingPanel = 'selectStagingTarget';

  $scope.onPremSignOnInfo = {};
  $scope.bluemixTargetSignOnInfo = {};
  $scope.stagingOptions = {};
  $scope.apicServers = APIc.servers.query({
    orgId: $scope.orgId
  });
  $scope.APIcIsLoggedIn = null;

  $scope.setCatalogs = function(orgId) {
    $scope.possibleTargets = [];
    $scope.xhrProcessing = 1;
    $scope.catalogs = APIc.catalogs.query({
      orgId: orgId
    });
    $scope.catalogs.$promise.then(function(){
      for (var i = 0; i < $scope.catalogs.length; i++){
        var catalog = $scope.catalogs[i];
        var target;
        if (!catalog.spaceEnabled) {
          target = {"type":"CATALOG","catalog":catalog, "environmentTitle":catalog.name,
            "space":{"none":true}, "spaceTitle":null, "displayAs":catalog.name}
          $scope.possibleTargets.push(target)
        } else {
          for (var j in catalog.spaces) {
            var space = catalog.spaces[j];
            target = {"type":"SPACE","catalog":catalog, "environmentTitle":catalog.name,
              "space":space, "spaceTitle":space.title, "displayAs":catalog.name + " - " + space.title}
            $scope.possibleTargets.push(target)
          }
        }
      }
    });
    $scope.catalogs.$promise
      .finally(function() {
        $scope.xhrProcessing = 0;
      });
  };

  function clearCatalogs () {
    $scope.possibleTargets = [];
    delete $scope.catalogs;
  }

  function setOrgs () {
    $scope.xhrProcessing = 1;
    $scope.providerOrgs = APIc.orgs.query();
    $scope.providerOrgs.$promise
      .then(function() {
        if ($scope.stagingOptions.org && isOrgLoaded($scope.stagingOptions.org)) {
          $scope.setCatalogs($scope.stagingOptions.org.id);
        } else if ($scope.providerOrgs[0]) {
          $scope.setStagingOption('org', $scope.providerOrgs[0]);
        } else {
          clearCatalogs();
        }
      }).finally(function() {
        $scope.xhrProcessing = 0;
      });
  }

  function setApps(instance, orgId) {
    $scope.xhrProcessing = 1;
    $scope.providerApps = APIc.apps.query({
      instance: instance,
      orgId: orgId
    });
    $scope.providerApps.$promise
      .finally(function() {
        $scope.xhrProcessing = 0;
      });
  }

  function clearOrgs () {
    delete $scope.providerOrgs;
  }

  function doLogin(instance, credentials) {
    clearOrgs();
    clearCatalogs();
    clearAPIcServer();
    return APIc.instances.login({
      instance: instance
    }, {
      credentials: credentials
    }).$promise;
  }

  function clearAPIcServer() {
    delete $rootScope.connectedAPIcServer;
  }

  //regenerate catalogs when org is changed
  $scope.$watch(function() {
    return $scope.stagingOptions.org;
  }, function(newOrg) {
    if (newOrg && $scope.APIcIsLoggedIn) {
      $scope.setCatalogs(newOrg.id);
    }
  });

  //relogin when selected server is changed
  $scope.$watch(function() {
    return $scope.stagingOptions.server;
  }, function(newServer) {
    if (newServer && $scope.stagingOptions.type === 'bluemix') {
      handleBluemixTargetChange(newServer.host);
    }
  });

  function isOrgLoaded(org) {
    return $scope.providerOrgs.filter(function(pOrg) {
      return pOrg.id == org.id
    }).length;
  }

  function handleBluemixTargetChange (host) {
    clearOrgs();
    clearCatalogs();
    APIc.instances.isLoggedIn({
      instance: host
    }).$promise
      .then(function(status) {
        if (!status.loggedIn) {
          clearAPIcServer();
          $scope.bluemixTargetSignOnInfo = {};
          APIc.instances.metadata({
            instance: host
          }).$promise
            .then(function(metadata) {
              $scope.showBluemixTargetSignin = true;
              if (metadata.supportsTokenAuth) {
                $scope.bluemixTargetAuthType = 'token';
              } else {
                $scope.bluemixTargetAuthType = 'basic';
              }
            })
        } else {
          $scope.APIcIsLoggedIn = true;
          $scope.showBluemixTargetSignin = false;
          delete $scope.bluemixTargetAuthType;
          setOrgs();
        }
      });
  }

  function handleEditOtherTarget(host) {
    clearOrgs();
    clearCatalogs();
    APIc.instances.isLoggedIn({
      instance: host
    }).$promise
      .then(function(status) {
        if (!status.loggedIn) {
          clearAPIcServer();
          $rootScope.$emit('event:showError', {
            responseText: 'Editing this target has failed because you are no longer logged into the management server.'
          });
        } else {
          $scope.APIcIsLoggedIn = true;
          setOrgs();
        }
      });
  }

  $scope.close = function() {
    $modalInstance.close();
  };

  $scope.switchStagingPanel = function(panel) {
    $scope.stagingPanel = panel;
  };

  $scope.setStagingOption = function(option, value) {
    $scope.stagingOptions[option] = value;
  };

  $scope.selectOrgRegPlan = function(plan) {
    $scope.selectedOrgRegPlan = plan;
  };

  $scope.addNewBluemixApp = function(name) {
    var filteredName = SlugService.createName(name);
    $scope.newBluemixApp = {
      new: true,
      name: filteredName
    };
    $scope.setStagingOption('app', $scope.newBluemixApp);
  };


  $scope.gatherBluemixToken = function() {
    var host = $scope.stagingOptions.server.host;
    var loginServer = getLoginServer(host);
    $scope.loginURL = loginServer + '/auth?redirectURL=' + encodeURIComponent(LocationService.getOrigin() + '/auth/targetCallback?host=' + host +'&authEndpoint=' + loginServer);
    popupCenter($scope.loginURL, '_blank', 800, 600);

    $window.onSuccessMessage = function(message) {
      $scope.bluemixTokenSuccess = message;
      if ($scope.showBluemixTargetSignin){
        $scope.APIcIsLoggedIn = true;
        $scope.showBluemixTargetSignin = false;
        setOrgs();
      } else {
        $scope.handleClick.catalogNext();
      }
      delete $window.onSuccessMessage;
    };
  };

  /*
    Target ops
    */
    function saveTarget() {
      var target = $scope.stagingOptions;
      $modalInstance.close();

      //create target
      if (target.id) {
        StagingTarget.update({
          orgId: $scope.orgId
        }, target)
      } else {
        StagingTarget.create({
          orgId: $scope.orgId
        },target).$promise.then(function() {
          $rootScope.stagingTargets = StagingTarget.query({
            orgId: $scope.orgId
          });
        });
      }
    }

  function editTarget(targetId) {
    for (var i=0; i<$scope.stagingTargets.length; i++) {
      if ($scope.stagingTargets[i].info.id == targetId) {
        $scope.stagingOptions = $scope.stagingTargets[i].info;
        if ($scope.stagingOptions.type !== 'bluemix') {
          handleEditOtherTarget($scope.stagingOptions.server.host);
        }
        $scope.stagingPanel = 'selectStagingOrgCatalog';
      }
    }
  }

  function deleteTarget(targetId) {
    StagingTarget.delete({
      orgId: $scope.orgId,
      targetId: targetId
    }).$promise.then(function() {
      $rootScope.stagingTargets = StagingTarget.query({
        orgId: $scope.orgId
      });
    });
  }

  /*
    Handle panel clicks
    */
    function handleCatalogNextClick() {
      if ($scope.stagingOptions.type === 'bluemix') {   //switch panel and load bluemix spaces
        var host = $scope.stagingOptions.server.host;
        $scope.xhrProcessing = 1;

        //check to see if logged in
          Bluemix.instances.status({
            instance: host
          }).$promise
          .then(function(status) {
            if (status.loggedIn) {
              $scope.switchStagingPanel('bluemix-selectStagingApp');
              var spaceGuid = $scope.stagingOptions.org.externalSpaceId;
              $scope.xhrProcessing = 1;
              $scope.bluemixApps = Bluemix.apps.query({
                instance: host,
                spaceId: spaceGuid
              });
              $scope.bluemixApps.$promise
                .finally(function() {
                  $scope.xhrProcessing = 0;
                });
            } else{
              $scope.xhrProcessing = 0;
              $scope.switchStagingPanel('bluemix-gatherToken');
            }
          });
      } else{                                               //switch panel and load onprem runtimes
        setApps($scope.stagingOptions.server.host ,$scope.stagingOptions.org.id);
        $scope.switchStagingPanel('onprem-selectStagingApp');
      }
    }

  function handleOnPremSignOnClick() {
    var server = {
      host: $scope.onPremSignOnInfo.host
    };
    var creds = {
      login: $scope.onPremSignOnInfo.username,
      password: $scope.onPremSignOnInfo.password
    };
    $scope.onPremSignOnInfo = {};
    $scope.stagingOptions.type = 'onprem';
    $scope.stagingOptions.server = server;
    $scope.xhrProcessing = 1;
    doLogin(server.host, creds)
      .then(function() {
        $rootScope.connectedAPIcServer = server;
        $scope.APIcIsLoggedIn = true;
        $scope.switchStagingPanel('selectStagingOrgCatalog');
        setOrgs();
      })
      .finally(function() {
        $scope.xhrProcessing = 0;
      })
  }

  function handleRegisterBluemixOrgClick() {
    $scope.switchStagingPanel('bluemix-registerOrgForApic');
    var orgs = Bluemix.orgs.query({});
    orgs.$promise.then(function(orgs) {
      $scope.bluemixOrgs = orgs;
      $scope.selectedBluemixOrg = $scope.bluemixOrgs[0];
    });
  }

  function handleAddNewTargetClick(type) {
    $scope.setStagingOption('type', type);
    if (type === 'bluemix') {
      $scope.setStagingOption('server', $scope.apicServers[0]);
      $scope.switchStagingPanel('selectStagingOrgCatalog');
    } else{
      $scope.switchStagingPanel('onprem-addStagingTarget');
    }

    TrackingServices.track('publish', type);
  }

  function handleBluemixTargetSignOn() {
    $scope.xhrProcessing = 1;
    var server = $scope.stagingOptions.server;
    var credentials = {
      login: $scope.bluemixTargetSignOnInfo.username,
      password: $scope.bluemixTargetSignOnInfo.password
    };
    doLogin(server.host, credentials)
      .then(function() {
        $rootScope.connectedAPIcServer = server;
        $scope.APIcIsLoggedIn = true;
        $scope.showBluemixTargetSignin = false;
        setOrgs();
      })
      .finally(function() {
        $scope.xhrProcessing = 0;
      });
    $scope.bluemixTargetSignOnInfo = {};
  }

  function handleBackButtonClick() {
    switch ($scope.stagingPanel) {
      case 'selectStagingOrgCatalog':
        $scope.switchStagingPanel('selectStagingTarget');
        break;
      case 'bluemix-selectStagingApp':
        $scope.switchStagingPanel('selectStagingOrgCatalog');
        break;
      case 'onprem-selectStagingApp':
        $scope.switchStagingPanel('selectStagingOrgCatalog');
        break;
      case 'onprem-addStagingTarget':
        $scope.switchStagingPanel('selectStagingTarget');
        break;
    }
  }

  $scope.targetOp = {
    save: saveTarget,
    edit: editTarget,
    delete: deleteTarget
  };

  $scope.handleClick = {
    catalogNext: handleCatalogNextClick,
    registerBluemixOrg: handleRegisterBluemixOrgClick,
    onPremSignOn: handleOnPremSignOnClick,
    addNewTarget: handleAddNewTargetClick,
    bluemixTargetSignOn: handleBluemixTargetSignOn,
    back: handleBackButtonClick
  };
}

angular.module('apim').controller('PublishOptionsModalController', ['$scope', '$rootScope', '$modalInstance', '$q', '$window', 'APIc', 'Bluemix', 'Product', 'SlugService', 'LocationService', PublishOptionsModalController]);

function PublishOptionsModalController($scope, $rootScope, $modalInstance, $q, $window, APIc, Bluemix, Product, SlugService, LocationService) {

  $scope.selectedPanel = 'publishProducts';

  $scope.publishOptions = $scope.selectedTarget;

  if (!$scope.publishOptions.app.none) {
    if ($scope.publishOptions.app.entity) {
      $scope.publishOptions.app.name = $scope.publishOptions.app.entity.name;
    }
    $scope.publishOptions.versionOptions = {
      inplaceUpdate: true
    };
  }

  $scope.products = Product.query({
    orgId: $scope.orgId
  });

  if ($scope.publishOptions.type === 'bluemix') {
    checkForBluemixToken();
  }

  $scope.close = function() {
    $modalInstance.close();
  };

  $scope.handlePublishClick = function() {
    $scope.publishProject();
  };

  $scope.publishProject = function() {
    var opts = $scope.publishOptions;
    var instance = opts.server.host;
    $scope.xhrProcessing = 1;

    if (opts.catalog.none) {
      opts.publishApp = true;
    } else if (opts.app.none) {
      opts.publishProducts = true;
    }

    if (opts.versionOptions && !opts.versionOptions.inplaceUpdate && opts.versionOptions.newName) {
      opts.versionOptions.newName = SlugService.createName(opts.versionOptions.newName);
    }

    var publishPromise;

    if (opts.publishApp && opts.publishProducts) {
      publishPromise = publishRuntime(instance, opts).then(function() {
        return publishProducts(instance, opts);
      });
    } else if (opts.publishApp) {
      publishPromise = publishRuntime(instance, opts);
    } else if (opts.publishProducts) {
      publishPromise = publishProducts(instance, opts);
    }

    publishPromise
      .then(function(){
        var messageId = new Date().getTime();
        $scope.xhrProcessing = 0;
        $modalInstance.close();
        if(opts.publishApp && opts.publishProducts){
          $scope.$root.notifyUser('publishAppProductsSuccess', [], "SUCCESS", true, messageId);
        } else if(opts.publishApp){
          $scope.$root.notifyUser('publishAppSuccess', [], "SUCCESS", true, messageId);
        } else if(opts.publishProducts) {
          if (opts.productStageOnly) {
            $scope.$root.notifyUser('publishProductsSuccess-stage', [], "SUCCESS", true, messageId);
          } else {
            $scope.$root.notifyUser('publishProductsSuccess', [], "SUCCESS", true, messageId);
          }
        }
        if (opts.publishApp) {
          $rootScope.reloadStagingTargets();
        }
      })
      .finally(function() {
        $scope.xhrProcessing = 0;
        $modalInstance.close();
      });
  };

  $scope.gatherBluemixToken = function() {
    popupCenter($scope.loginURL, '_blank', 800, 600);

    $window.addEventListener('message', function(message) {
      $scope.bluemixTokenSuccess = message.data.success;
      $scope.switchSelectedPanel('publishProducts');
    }, false);
  };

  $scope.switchSelectedPanel = function(panel) {
    $scope.selectedPanel = panel;
  };

  var publishProducts = function(instance, opts) {
    opts.products = [];
    if (opts.specificProducts) {
      for (var i in $scope.products) {
        if ($scope.products[i].selected) {
          opts.products.push($scope.products[i]);
        }
      }
    } else {
      opts.products = $scope.products;
    }

    return APIc.instances.publishProducts({
      instance: instance
    }, opts).$promise;
  };

  var publishRuntime = function(instance, opts) {
    opts.workspaceDir = $rootScope.workspaceDir;

    return APIc.instances.publishRuntime({
      instance: instance,
    }, opts).$promise;
  };

  function checkForBluemixToken() {
    var host = $scope.publishOptions.server.host;
    $scope.xhrProcessing = 1;

    //check to see if logged in
      Bluemix.instances.status({
        instance: host
      }).$promise
      .then(function(status) {
        $scope.xhrProcessing = 0;
        if (!status.loggedIn) {
          $scope.switchSelectedPanel('bluemix-gatherToken');
          var loginServer = getLoginServer(host);
          $scope.loginURL = loginServer + '/auth?redirectURL=' + encodeURIComponent(LocationService.getOrigin() + '/auth/targetCallback?host=' + host + '&authEndpoint=' + loginServer);
        }
      });
  }
}

function getLoginServer(host) {
  host = host.replace(/apimanager./ig, '');
  var isPublicHost = publicCloudDomains.some(function(domain) {
    return host.indexOf(domain) > -1;
  });

  if (isPublicHost) {
    return 'https://login.service.' + host;
  } else {
    return 'https://login-service-apiconnect' + host.substr(host.indexOf('.'), host.length);
  }

}

function popupCenter(url, title, w, h) {
  var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
  var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;

  var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
  var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

  var left = ((width / 2) - (w / 2)) + dualScreenLeft;
  var top = ((height / 2) - (h / 2)) + dualScreenTop;
  var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

  // Puts focus on the newWindow
  if (window.focus) {
    newWindow.focus();
  }
}
