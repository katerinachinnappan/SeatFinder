/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var apim = angular.module('apim');

var templates = {
  'ui-api': 'templates/ui-api.hbs',
  'cli-api': 'templates/api.hbs',
  'oauth2': 'templates/oauth2.hbs',
  'product': 'templates/product.hbs',
  'component': 'templates/component.hbs'
}

function registerHelpers() {
  Handlebars.registerHelper('isEmpty', function(data, options) {
    if (!data || Object.keys(data).length === 0) {
      return options.fn(this);
    }
    return options.inverse(this);
  });
  Handlebars.registerHelper('json', function(context) {
    return JSON.stringify(context);
  });
  Handlebars.registerHelper('escapeDoubleQuotes', function(context) {
    return context.replace(/"/g, '\\\"');
  });
};

apim.factory('Template', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/templates', {}, {
      query: {method: 'GET', params: {orgId: '@orgId'}, isArray: false},
    });
  }
]);

apim.service('ArtifactBuilder', ['$rootScope', '$http', '$q', 'Template', function($rootScope, $http, $q, Template) {

  var self = this;

  registerHelpers();

  self.defaultApiName = "__default_api__";
  self.defaultProductName = "__default_product__";

  self.defaults = {
    api: "ui-api",
    product: "product"
  };

  // load up templates
  $rootScope.customApiTemplates = {};
  $rootScope.customProductTemplates = {};
  if ($rootScope.offlineMode) {
    Template.query({orgId: $rootScope.orgId}).$promise.then(function(loadedTemplates) {
      if (loadedTemplates.defaults.api) self.defaults.api = loadedTemplates.defaults.api;
      if (loadedTemplates.defaults.product) self.defaults.product = loadedTemplates.defaults.product;
      if (!loadedTemplates.templates) return;
      Object.keys(loadedTemplates.templates).forEach(function(templateName) {
        var templateString = loadedTemplates.templates[templateName];
        if (typeof templateString !== "string") return;
        if (templateString.indexOf("swagger: '2.0'") >= 0) {
          $rootScope.customApiTemplates[templateName] = templateString;
          if (loadedTemplates.defaults.api && _.endsWith(templateName, loadedTemplates.defaults.api + ".hbs")) {
            self.defaults.api = templateName;
          }
        } else if (templateString.indexOf("product:") >= 0) {
          $rootScope.customProductTemplates[templateName] = templateString;
          if (loadedTemplates.defaults.product && _.endsWith(templateName, loadedTemplates.defaults.product + ".hbs")) {
            self.defaults.product = templateName;
          }
        }
      });
    });
  }
  function buildFromTemplate(templateString, instance, deferred) {
    var templateConstructor = Handlebars.compile(templateString);
    instance = angular.fromJson(angular.toJson(instance));
    var asYaml = templateConstructor(instance);
    deferred.resolve(jsyaml.safeLoad(asYaml));
  };
  self.createFromTemplate = function(template, instance) {
    var deferred = $q.defer();

    // honour defaults
    if (template === self.defaultApiName) template = self.defaults.api;
    if (template === self.defaultProductName) template = self.defaults.product;

    var customTemplate = $rootScope.customApiTemplates[template] || $rootScope.customProductTemplates[template];
    if (customTemplate) {
      buildFromTemplate(customTemplate, instance, deferred);
    } else {
      $http.get(templates[template]).then(function(response) {
        buildFromTemplate(response.data, instance, deferred);
      });
    }
    return deferred;
  };
}]);

apim.service('ProductPublisher', ['$http', '$q', '$rootScope', 'DeployedProduct', 'APIc', function($http, $q, $rootScope, DeployedProduct, APIc) {

  function checkForTask(response) {
    return response &&
      response.operationStatusSummary &&
      response.operationStatusSummary.messages &&
      response.operationStatusSummary.messages.CREATED_WORKFLOW_TASK;
  };

  this.publish = function(product, target) {
    if ($rootScope.offlineMode) {
      return publishOffline(product, target);
    } else {
      return publishOnline(product, target);
    }
  };

  function publishOffline(product, target) {
    var opts = angular.copy(target.info);
    opts.publishProducts = true;
    opts.specificProducts = true;
    opts.products = [product];
    var messageId = new Date().getTime();
    $rootScope.notifyUser('publishBeingPublished', {name: product.info.title, version: product.info.version, environment: target.info.catalog.name}, "BUSY", false, messageId);
    var promise = APIc.instances.publish({
      instance: target.info.server.host
    }, opts).$promise;
    promise.then(function() {
      $rootScope.notifyUser('publishDoneBeingPublished', {name: product.info.title, version: product.info.version, environment: target.info.catalog.name}, 'SUCCESS', true, messageId);
    }, function(error) {
      $rootScope.notifyUser('publishFailedToPublish', {name: product.info.title, version: product.info.version, environment: target.info.catalog.name}, 'ERROR', false, messageId);
    });
    return promise;
  };

  function publishOnline(product, publishTarget) {
    var deferred = $q.defer();

    var messageId = new Date().getTime();
    var dProduct = new DeployedProduct();
    var dProductArgs = {orgId: $rootScope.orgId, envId: publishTarget.environmentId, productId: product.info.name + ':' + product.info.version};
    if (publishTarget.type == "SPACE") {
      $rootScope.notifyUser('deployBeingDeployedSpace', {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, "BUSY", messageId);
      dProductArgs.spaces = "spaces";
      dProductArgs.spaceId = publishTarget.spaceId;
    } else {
      $rootScope.notifyUser('deployBeingDeployed', {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, "BUSY", messageId);
    }
    dProduct.$create(dProductArgs).then(function(dProd) {
      var messageKey;
      if (publishTarget.type == "SPACE") {
        messageKey = "deployDoneBeingDeployedSpace";
        if (dProd && dProd.deploymentState == "pending") {
          messageKey = "deployDoneBeingDeployedSpacePending";
        }
        $rootScope.notifyUser(messageKey, {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, "SUCCESS", true, messageId);
      } else {
        messageKey = "deployDoneBeingDeployed";
        if (dProd && dProd.deploymentState == "pending") {
          messageKey = "deployDoneBeingDeployedPending";
        }
        $rootScope.notifyUser(messageKey, {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, "SUCCESS", true, messageId);
      }


      var messageId2 = new Date().getTime();
      dProductArgs = {orgId: $rootScope.orgId, envId: publishTarget.environmentId, productId: dProd.id};
      $rootScope.notifyUser('publishBeingPublished', {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, 'BUSY', false, messageId2);
      if (publishTarget.type == "SPACE") {
        $rootScope.notifyUser('publishBeingPublishedSpace', {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, "BUSY", messageId2);
        dProductArgs.spaces = "spaces";
        dProductArgs.spaceId = publishTarget.spaceId;
      } else {
        $rootScope.notifyUser('publishBeingPublished', {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, "BUSY", messageId2);
      }

      dProduct.$publish(dProductArgs).then(function(data){
        var messageKey;
        if (publishTarget.type == "SPACE") {
          messageKey = "publishDoneBeingPublishedSpace";
          if (checkForTask(data)) messageKey += 'PendingApproval';
          $rootScope.notifyUser(messageKey, {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, "SUCCESS", true, messageId2);
        } else {
          messageKey = "publishDoneBeingPublished";
          if (checkForTask(data)) messageKey += 'PendingApproval';
          $rootScope.notifyUser(messageKey, {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, "SUCCESS", true, messageId2);
        }
        deferred.resolve(dProduct);
      }, function(error) {
        if (publishTarget.type == "SPACE") {
          $rootScope.notifyUser('publishFailedToPublishSpace', {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, 'ERROR', false, messageId2);
        } else {
          $rootScope.notifyUser('publishFailedToPublish', {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, 'ERROR', false, messageId2);
        }
        deferred.reject(error);
      });
    }, function(error) {
      if (publishTarget.type == "SPACE") {
        $rootScope.notifyUser('deployFailedToDeploySpace', {name: product.info.title, version: product.info.version, space: publishTarget.spaceTitle, environment: publishTarget.environmentTitle}, 'ERROR', false, messageId);
      } else {
        $rootScope.notifyUser('deployFailedToDeploy', {name: product.info.title, version: product.info.version, environment: publishTarget.environmentTitle}, 'ERROR', false, messageId);
      }
      deferred.reject(error);
    });
    return deferred.promise;
  };

}]);
