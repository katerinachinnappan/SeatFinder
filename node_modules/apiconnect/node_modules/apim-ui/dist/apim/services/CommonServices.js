/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services used by both APIM-UI and CMC-UI */

var common = angular.module('apim.common', []);

// Polyfill for browsers that dont yet support all of ES6
if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(searchString, position){
    position = position || 0;
    return this.substr(position, searchString.length) === searchString;
  };
}

// create a sluggified name
// which is a-z 0-9 and hyphen but no hyphen at start or end and no number at the start
// and multiple spaces should be replaced by a single hyphen
// returns "" if title is null or undefined
common.service('SlugService', function() {
  // create a slug name from the provided value
  this.createName = function(title, allowUpperCase) {
    var name = title || '';
    // multiple spaces replaced by single hyphen
    name = name.replace(/ +/gi, '-');
    // multiple hyphens replaced by single hyphen
    name = name.replace(/-+/gi, '-');
    // anything not a-z 0-9 hyphen removed
    name = name.replace(/[^a-zA-Z0-9-]/gi, '');
    // remove all start hyphens
    name = name.replace(/^[-0-9]+/, '');
    // remove all end hyphens
    name = name.replace(/[-]+$/, '');
    if (!allowUpperCase) {
      name = name.toLowerCase();
    }
    return name;
  };

  // create a unique slug name from the provided value
  this.createUniqueName = function(prefix, hash) {
    if (!prefix) prefix = "new";
    var name = this.createName(prefix);
    if (!hash) return name;
    var suffix = 1;
    while (name && hash[name]) {
      name = this.createName(prefix + " " + suffix);
      suffix++;
    }
    return name;
  };
});

// parse the form factor field
common.service('FormFactor', function() {
  var BLUEMIX_PUBLIC = "BLUEMIX_PUBLIC";
  var BLUEMIX_DEDICATED = "BLUEMIX_DEDICATED";
  var ON_PREMISES = "ON_PREMISES";

  function isOnPremises(formFactor) {
    return formFactor == ON_PREMISES;
  }

  function isBluemixDedicated(formFactor) {
    return formFactor == BLUEMIX_DEDICATED;
  }

  function isBluemixPublic(formFactor) {
    return formFactor == BLUEMIX_PUBLIC;
  }

  function isBluemix(formFactor) {
    return isBluemixPublic(formFactor) || isBluemixDedicated(formFactor);
  }

  return {
    isOnPremises: isOnPremises,
    isBluemixDedicated: isBluemixDedicated,
    isBluemixPublic: isBluemixPublic,
    isBluemix: isBluemix
  };
});

// Location utility functions
// Note: that some older IE11 does not have $window.location.origin
common.service('LocationService', ['$location', function($location) {
  this.getOrigin = function() {
    return $location.protocol() + '://' + $location.host() +
      ($location.port() === 80 ? '' : ':' + $location.port());
  };
}]);

// utility functions
common.service('CommonUtils', function() {

  // strip matching outer quotes from a string
  function stripOuterQuotes(value) {
    var ret = value;
    if (value) {
      value = value.trim();
      var len = value.length;
      if (len >= 2) {
        var first = value.substring(0, 1);
        var last = value.substr(len - 1);
        if (first == last && (first == "'" || first == "\"")) {
          ret = value.substring(1, len - 1);
        }
      }
    }
    return ret;
  }

  return {
    stripOuterQuotes: stripOuterQuotes
  };
});

