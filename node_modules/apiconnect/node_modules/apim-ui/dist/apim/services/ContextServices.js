/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

  angular.module('apim.core').factory('ContextMenu', ['$rootScope', function($rootScope) {
    // set up known context variables
    var contextVariables = [
      'api.name',
      'api.root',
      'api.version',
      'api.endpoint.address',
      'api.endpoint.hostname',
      'api.type',
      'api.properties.propertyname',
      'plan.name',
      'plan.id',
      'plan.version',
      'env.path',
      'request.verb',
      'request.uri',
      'request.path',
      'request.parameters.paramname',
      'request.headers.headername',
      'request.content-type',
      'client.app.name',
      'client.app.id',
      'client.app.secret',
      'client.org.id',
      'client.org.name',
      'oauth.access-token',
      'oauth.resource-owner',
      'oauth.scope',
      'oauth.not-before',
      'oauth.not-after',
      'oauth.miscinfo',
      'oauth.introspect.active',
      'oauth.introspect.response',
      'system.datetime',
      'system.time',
      'system.time.hour',
      'system.time.minute',
      'system.time.seconds',
      'system.date',
      'system.date.day-of-week',
      'system.date.day-of-month',
      'system.date.month',
      'system.date.year',
      'system.timezone'
    ];

    var $menu;
    var showContext = function(keyEvent, isValue, config, extensions) {
      // make sure we update the variable list
      registerExtensions(extensions);
      // only if we're not already open
      if ($menu && $menu.is(":visible")) return;
      $menu = $('#contextMenu')
        .show()
        .css({
          position: "absolute",
          left: $(keyEvent.target).offset().left, //- $(keyEvent.target).offsetParent().offsetParent().offset().left,
          top: $(keyEvent.target).offset().top + $(keyEvent.target).height() + 10// - $(keyEvent.target).offsetParent().offsetParent().offset().top
        })
        .off('click')
        .on('click', 'a', function (clickEvent) {
          $menu.hide();
          var currentValue = $(keyEvent.target).val();
          var caretPosition = keyEvent.target.selectionStart;
          if (caretPosition < 0) return;
          if (isValue) {
            // this one needs decorating as a context value and inserting
            $(keyEvent.target).val([currentValue.slice(0, caretPosition - $rootScope.contextMenuFilter.length), $(clickEvent.target).attr('value') + ")", currentValue.slice(caretPosition)].join('')).change();
          } else {
            // this is a variable - fill the whole field with the value
            $(keyEvent.target).val($(clickEvent.target).attr('value')).change();
          }
        }
  );

    var handler = function () {
      $('#contextMenu').hide();
      $('body').unbind('click', handler);
      $(keyEvent.target).unbind('blur', handler);
    };
    //make sure menu closes on any click
    $('body').bind('click', handler);
    $(keyEvent.target).bind('blur', function() {
      setTimeout(handler, 100);
    });
    };

    var hideContext = function(keyEvent) {
      if ($menu) {
        $menu.hide();
        $menu = null;
      }
    };

    var extensionVariables = [];
    var registerExtensions = function(extensions) {
      if (extensions && extensions.length) {
        // copy the supplied array so we cant possibly damage the original data
        extensionVariables = angular.copy(extensions);
      } else {
        extensionVariables.length = 0;
      }
      generateVars();
    };

    // always keep the same output array so that the binding can detect changes
    var variables = [];
    var generateVars = function() {
      variables.length = 0;
      var len = contextVariables.length;
      for (var i=0;i<len;i++) {
        variables.push(contextVariables[i]);
      } // end for
      if (extensionVariables.length) {
        len = extensionVariables.length;
        for (i=0;i<len;i++) {
          variables.push(extensionVariables[i]);
        } // end for
      }
    };

    // one-off call to init variable list
    generateVars();

    return {
      variables: variables,
      showContext: showContext,
      hideContext: hideContext,
      registerExtensions: registerExtensions
    };
  }]).directive('apimContextValue', ['$rootScope', 'ContextMenu', function($rootScope, ContextMenu) {
    return function (scope, element, attrs) {
      var insideDollar = false;
      var insideBracket = false;

      element.bind("keydown", function (event) {
        if (insideBracket && event.which === 8 /* backspace */) {
          if ($rootScope.contextMenuFilter.length > 0) {
            $rootScope.contextMenuFilter = $rootScope.contextMenuFilter.substring(0, $rootScope.contextMenuFilter.length - 1);
          } else {
            insideBracket = false;
            scope.$apply(function () {
              ContextMenu.hideContext(event);
            });
          }
        } else if (insideDollar && event.which === 8 /* backspace */) {
          insideDollar = false;
        }
      });

      element.bind("keypress", function (event) {
        if(event.which === 36 /* $ */) {
          insideDollar = true;
          insideBracket = false;
          $rootScope.contextMenuFilter = "";
        } else if (insideDollar && event.which === 40 /* ( */) {
          insideBracket = true;
          scope.$apply(function () {
            // check if we need to register some extensions for this field
            var extensions = [];
            if (scope.getContextExtensions && typeof scope.getContextExtensions == "function") {
              extensions = scope.getContextExtensions();
            }
            ContextMenu.showContext(event, true, attrs.apimContext, extensions);
          });
        } else if (insideBracket && event.which === 41 /* ) */) {
          insideBracket = false;
          insideDollar = false;
          scope.$apply(function () {
            ContextMenu.hideContext(event);
          });
        } else if (insideBracket) {
          $rootScope.contextMenuFilter += String.fromCharCode(event.which);
        }
      });
    };
  }]).directive('apimContextVariable', ['$rootScope', 'ContextMenu', function($rootScope, ContextMenu) {
    return function (scope, element, attrs) {
      element.bind("keyup", function (event) {
        $rootScope.contextMenuFilter = $(event.target).val();
        $rootScope.$apply();
        // check if we need to register some extensions for this field
        var extensions = [];
        if (scope.getContextExtensions && typeof scope.getContextExtensions == "function") {
          extensions = scope.getContextExtensions();
        }
        ContextMenu.showContext(event, false, attrs.apimContext, extensions);
      });
    };
  }]);

