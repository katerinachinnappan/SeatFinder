/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

angular.module('apim.common').service('RoleService', ['Permission', '$rootScope', '$modal', function(Permission, $rootScope, $modal) {
  var roleService = {};

  var constants = {
    PERMISSION_RESOURCE_DEPLOYMENT_ANY_ENVIRONMENT: "<<_deploymentAnyEnv_>>",
    PERMISSION_RESOURCE_DEPLOYMENT_ANY_SPACE: "<<_deploymentAnySpace_>>",
    PERMISSION_RESOURCE_APPROVAL_ANY_ENVIRONMENT: "<<_approvalAnyEnv_>>",
    PERMISSION_RESOURCE_APPROVAL_ANY_SPACE: "<<_approvalAnySpace_>>",
    PERMISSION_RESOURCE_APPROVAL_ANY_ACTION: "<<_approvalAnyAction_>>",
    PERMISSION_RESOURCE_COMMUNITY_VIEW_ENVIRONMENT: "<<_communityViewEnv_>>",
    PERMISSION_RESOURCE_COMMUNITY_VIEW_SPACE: "<<_communityViewSpace_>>",
    PERMISSION_RESOURCE_ROLES: "org_organizationManagement",
    PERMISSION_RESOURCE_USERS: "org_members",
    PERMISSION_RESOURCE_PRODUCTS: "org_draftProducts",
    PERMISSION_RESOURCE_APIS: "org_draftApis",
    PERMISSION_RESOURCE_ENVIRONMENTS: "org_catalogs",
    PERMISSION_RESOURCE_DEPLOYMENT: "productDeployment",
    PERMISSION_RESOURCE_DEVELOPERS: "catalog_developers",
    PERMISSION_RESOURCE_PLAN_SUBSCRIPTIONS: "catalog_planSubscriptions",
    PERMISSION_RESOURCE_ANALYTICS: "catalog_environmentAnalytics",
    PERMISSION_RESOURCE_USAGE: "usage",

    PERMISSION_RESOURCE_HOME: "home",
    PERMISSION_RESOURCE_SETTINGS: "settings",
    PERMISSION_RESOURCE_CLUSTERS: "clusters",
    PERMISSION_RESOURCE_ORGANIZATIONS: "orgs",
    PERMISSION_RESOURCE_USER_REGISTRIES: "org_organizationManagement",
    PERMISSION_RESOURCE_EMAIL_CONFIGURATION: "emailConfiguration",
    PERMISSION_RESOURCE_SSL_IDENTITIES: "org_organizationManagement",

    PERMISSION_RESOURCE_APPS: "apps",
    PERMISSION_RESOURCE_PLAN_REGISTRATIONS: "planRegistrations",

    PERMISSION_RESOURCE_CMC_USERS: "users",
    PERMISSION_RESOURCE_CMC_SSL_IDENTITIES: "sslIdentities",
    PERMISSION_RESOURCE_CMC_USER_REGISTRIES: "userRegistries",

    // Permission actions
    PERMISSION_VIEW: "view",
    PERMISSION_EDIT: "edit",
    PERMISSION_CREATE: "create",
    PERMISSION_APPROVE: "approve",
    PERMISSION_DEPLOY: "deploy",
    PERMISSION_DEPLOY_RESTRICTED: "deployToRestricted",
    PERMISSION_PUBLISH: "publish",
    PERMISSION_PUBLISH_RESTRICTED: "publishToRestricted",
    PERMISSION_MANAGE: "manage",
    PERMISSION_CONFIGURE: "configure",
    PERMISSION_STAGE: "stage",

    // permission types
    PERMISSION_TYPE_ENV: "org_environment",
    PERMISSION_TYPE_SPACE: "catalog_space",

    // Environment instance permissions
    PERMISSION_ENVIRONMENT_PRODUCT_DEPLOYMENT: "catalog_productDeployment",
    PERMISSION_ENVIRONMENT_PRODUCT_DEPLOYMENT_APPROVAL: "catalog_productDeploymentApproval",
    PERMISSION_ENVIRONMENT_SUBSCRIPTION_APPROVAL: "catalog_subscriptionApproval",
    PERMISSION_ENVIRONMENT_DEVELOPERS: "catalog_developers",
    PERMISSION_ENVIRONMENT_APPLICATIONS: "catalog_applications",
    PERMISSION_ENVIRONMENT_PLAN_SUBSCRIPTIONS: "catalog_planSubscriptions",

    // Space instance permissions
    PERMISSION_SPACE_PRODUCT_DEPLOYMENT: "space_productDeployment",
    PERMISSION_SPACE_PRODUCT_DEPLOYMENT_APPROVAL: "space_productDeploymentApproval",
    PERMISSION_SPACE_SUBSCRIPTION_APPROVAL: "space_subscriptionApproval",
    PERMISSION_SPACE_DEVELOPERS: "space_developers",
    PERMISSION_SPACE_APPLICATIONS: "space_applications",
    PERMISSION_SPACE_PLAN_SUBSCRIPTIONS: "space_planSubscriptions"
  };

  // normalise the action name - allows us to unify the permissions that common panels use between CMC and APIM
  var normaliseAction = function(resource, action) {
    var ret = action;
    if (action == constants.PERMISSION_EDIT) {
      if (resource != constants.PERMISSION_RESOURCE_APIS && resource != constants.PERMISSION_RESOURCE_PRODUCTS) {
        ret = constants.PERMISSION_MANAGE;
      }
    }
    return ret;
  };

  // normalise the resource name - allows us to unify the permissions that common panels use between CMC and APIM
  var normaliseResource = function(resource) {
    var ret = resource;
    if (resource == constants.PERMISSION_RESOURCE_CMC_USERS) {
      ret = constants.PERMISSION_RESOURCE_USERS;
    } else if (resource == constants.PERMISSION_RESOURCE_CMC_SSL_IDENTITIES) {
      ret = constants.PERMISSION_RESOURCE_SSL_IDENTITIES;
    } else if (resource == constants.PERMISSION_RESOURCE_CMC_USER_REGISTRIES) {
      ret = constants.PERMISSION_RESOURCE_USER_REGISTRIES;
    }
    return ret;
  };

  roleService.getPermissions = function() {
    var unregister = $rootScope.$watch('orgId', function() {
      if (!$rootScope.orgId) return;
      unregister();
      Permission.query({orgId: $rootScope.orgId}).$promise.then(function(response) {
        var permissions = {};
        /*
         * Check whether the org has been reactivated from being dormant
         * as part of this login to this org and notify the user is so
         */
        if (response.dormantOrgReactivated === true) {
          $rootScope.information = {
            titleKey: 'orgReactivatedAfterDormancyTitle',
            messageKey: 'orgReactivatedAfterDormancy',
            accepted: function() {
            }
          };
          $modal.open({
            templateUrl: 'apim/partials/information.html',
            windowTemplateUrl: 'apim/partials/main-template.html',
            controller: 'InformationController',
            scope: $rootScope
          });
        }
        response.permissions.forEach(function(permission) {
          if (permission.actions) {
            for(var i = 0; i < permission.actions.length; i++) {
              var actionName = permission.actions[i].name ? permission.actions[i].name : permission.actions[i];
              if ($rootScope.context == "cmc") {
                // CMC needs original unmodified permission and a fully normalised one for
                // common panels
                var cmcAction = permission.resource + "/" + actionName;
                permissions[cmcAction] = cmcAction;
                cmcAction = normaliseResource(permission.resource) + "/" + normaliseAction(permission.resource, actionName);
                permissions[cmcAction] = cmcAction;
              } else {
                var action = permission.resource + "/" + normaliseAction(permission.resource, actionName);
                // anything with a permission type is a default permission and not part of the org
                if (!permission.type) {
                  permissions[action] = action;
                }
              }
            }
          }
        });
        response.environments.forEach(function(envPermission) {
          var anyEnvironmentViewPermission = false;
          var anyEnvironmentStagePermission = false;
          var anyEnvironmentManagePermission = false;
          var anyEnvironmentApprovalPermission = false;
          envPermission.permissions.forEach(function(permission) {
            // permission type can also be "space", but those are default values - we dont want them here
            if (permission.type == "environment") {
              if ((permission.resource == constants.PERMISSION_ENVIRONMENT_PRODUCT_DEPLOYMENT_APPROVAL ||
                permission.resource == constants.PERMISSION_ENVIRONMENT_SUBSCRIPTION_APPROVAL) &&
                permission.actions && permission.actions.length > 0) {
                  anyEnvironmentApprovalPermission = true;
                  var anyAction = envPermission.id + "/" + constants.PERMISSION_RESOURCE_APPROVAL_ANY_ACTION;
                  permissions[anyAction] = anyAction;
              }
              if ((permission.resource == constants.PERMISSION_ENVIRONMENT_DEVELOPERS ||
                permission.resource == constants.PERMISSION_ENVIRONMENT_APPLICATIONS ||
                permission.resource == constants.PERMISSION_ENVIRONMENT_PLAN_SUBSCRIPTIONS) &&
                permission.actions && permission.actions.indexOf(constants.PERMISSION_VIEW) != -1) {
                  // create a combined view permission for community
                  var communityAction = envPermission.id + "/" + constants.PERMISSION_RESOURCE_COMMUNITY_VIEW_ENVIRONMENT;
                  permissions[communityAction] = communityAction;
              }
              permission.actions.forEach(function(actionName) {
                var action = envPermission.id + "/" + permission.resource + "/" + actionName;
                permissions[action] = action;
                if (permission.resource == constants.PERMISSION_ENVIRONMENT_PRODUCT_DEPLOYMENT) {
                  if (actionName == constants.PERMISSION_VIEW) {
                    anyEnvironmentViewPermission = true;
                  } else if (actionName == constants.PERMISSION_STAGE) {
                    anyEnvironmentStagePermission = true;
                  } else if (actionName == constants.PERMISSION_MANAGE) {
                    anyEnvironmentManagePermission = true;
                  }
                }
              });
            }
          });
          var anyEnvPermission, anyApprovalPermission;
          if (anyEnvironmentApprovalPermission) {
            anyApprovalPermission = constants.PERMISSION_RESOURCE_APPROVAL_ANY_ENVIRONMENT + "/" + constants.PERMISSION_VIEW;
            permissions[anyApprovalPermission] = "true";
          }
          if (anyEnvironmentViewPermission) {
            anyEnvPermission = constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_ENVIRONMENT + "/" + constants.PERMISSION_VIEW;
            permissions[anyEnvPermission] = anyEnvPermission;
          }
          if (anyEnvironmentStagePermission) {
            anyEnvPermission = constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_ENVIRONMENT + "/" + constants.PERMISSION_STAGE;
            permissions[anyEnvPermission] = anyEnvPermission;
          }
          if (anyEnvironmentManagePermission) {
            anyEnvPermission = constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_ENVIRONMENT + "/" + constants.PERMISSION_MANAGE;
            permissions[anyEnvPermission] = anyEnvPermission;
          }
          // now look at spaces
          if (envPermission.spaces) {
            envPermission.spaces.forEach(function(spacePermission) {
              var anySpaceViewPermission = false;
              var anySpaceStagePermission = false;
              var anySpaceManagePermission = false;
              var anySpaceApprovalPermission = false;
              spacePermission.permissions.forEach(function(permission) {
                if ((permission.resource == constants.PERMISSION_SPACE_PRODUCT_DEPLOYMENT_APPROVAL ||
                  permission.resource == constants.PERMISSION_SPACE_SUBSCRIPTION_APPROVAL) &&
                  permission.actions && permission.actions.length > 0) {
                    anySpaceApprovalPermission = true;
                    var anyAction = spacePermission.id + "/" + constants.PERMISSION_RESOURCE_APPROVAL_ANY_ACTION;
                    permissions[anyAction] = anyAction;
                }
                if ((permission.resource == constants.PERMISSION_SPACE_DEVELOPERS ||
                  permission.resource == constants.PERMISSION_SPACE_APPLICATIONS ||
                  permission.resource == constants.PERMISSION_SPACE_PLAN_SUBSCRIPTIONS) &&
                  permission.actions && permission.actions.indexOf(constants.PERMISSION_VIEW) != -1) {
                    // create a combined view permission for community
                    var communityAction = spacePermission.id + "/" + constants.PERMISSION_RESOURCE_COMMUNITY_VIEW_SPACE;
                    permissions[communityAction] = communityAction;
                }
                permission.actions.forEach(function(actionName) {
                  var action = spacePermission.id + "/" + permission.resource + "/" + actionName;
                  permissions[action] = action;
                  if (permission.resource == constants.PERMISSION_SPACE_PRODUCT_DEPLOYMENT) {
                    if (actionName == constants.PERMISSION_VIEW) {
                      anySpaceViewPermission = true;
                    } else if (actionName == constants.PERMISSION_STAGE) {
                      anySpaceStagePermission = true;
                    } else if (actionName == constants.PERMISSION_MANAGE) {
                      anySpaceManagePermission = true;
                    }
                  }
                });
              });
              var anySpacePermission, anyApprovalPermission;
              if (anySpaceApprovalPermission) {
                anyApprovalPermission = envPermission.id + "/" + constants.PERMISSION_RESOURCE_APPROVAL_ANY_SPACE + "/" + constants.PERMISSION_VIEW;
                permissions[anyApprovalPermission] = "true";
              }
              if (anySpaceViewPermission) {
                anySpacePermission = envPermission.id + "/" + constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_SPACE + "/" + constants.PERMISSION_VIEW;
                permissions[anySpacePermission] = anySpacePermission;
              }
              if (anySpaceStagePermission) {
                anySpacePermission = envPermission.id + "/" + constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_SPACE + "/" + constants.PERMISSION_STAGE;
                permissions[anySpacePermission] = anySpacePermission;
              }
              if (anySpaceManagePermission) {
                anySpacePermission = envPermission.id + "/" + constants.PERMISSION_RESOURCE_DEPLOYMENT_ANY_SPACE + "/" + constants.PERMISSION_MANAGE;
                permissions[anySpacePermission] = anySpacePermission;
              }
            });
          }
        });
        $rootScope.permissions = permissions;
      });
    });
  };

  roleService.hasPermission = function (permissions, envId, spaceId) {
    var perms = $rootScope.permissions;

    if (!perms) {
      return false;
    }

    return permissions.some(function(permission) {
      if (spaceId) {
        return Boolean(perms[spaceId + '/space_' + permission]);
      }
      if (envId) {
        return Boolean(perms[envId + '/catalog_' + permission]);
      }
      return false;
    });
  };

  return roleService;
}]);

