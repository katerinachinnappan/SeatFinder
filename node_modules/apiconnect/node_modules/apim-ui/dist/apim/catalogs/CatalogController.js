/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.catalogs', []).controller('CatalogsController', ['$scope', '$rootScope', '$filter', '$modal', 'Environment', 'GatewayCluster', 'AppList', 'CollectivesList', CatalogsController]);

function CatalogsController($scope, $rootScope, $filter, $modal, Environment, GatewayCluster, AppList, CollectivesList) {
  if($scope.helpEnabled) $scope.showHelp({
    id: "apim_help_catalogs",
    template: 'apim/help/partials/help-catalogs.html'
  });

  $scope.typeFilterStates = {
    "catalog": true,
    "app": true
  };
  $scope.typeNameMap = {
    "catalog": $filter('translate')('catalogs_type_catalog'),
    "app": $filter('translate')('catalogs_type_app')
  };
  $scope.fetchingData = false;
  $scope.allData = [];

  if(typeof(localStorage) !== "undefined") {
    $scope.view = localStorage.getItem("apim-catalogs-view") || 'grid';
  }

  if(!$scope.gatewayClusters) {
    var unregister = $scope.$watch('permissions', function() {
      if (!$scope.permissions) return;
      unregister();
      if ($scope.permissions['org_catalogs/view']) {
        GatewayCluster.query().$promise.then(
          function(clusters) {
            $scope.setGatewayClusters(clusters);
          }
        );
      }
    });
  }

  // regular expression for catalog name
  $scope.catalogNameRegEx = '[a-z0-9-]+';

  // expand to full width by default
  $scope.panelExpanded = true;
  $scope.setPanelExpanded = function(expanded) {
    $scope.panelExpanded = expanded;
  };

  $scope.refreshData = function() {
    $scope.fetchingData = true;
    // rebuild local combined summary list
    $scope.allData = $scope.environments.map(function(env) {
      return {
        type: "catalog",
        id: env.id,
        title: env.name,
        createdBy: env.createdBy,
        createdAt: env.createdAt,
        baseUrl: env.baseUrl,
        updatedAt: env.updatedAt,
        ref: env
      };
    });

    // merge in any apps as well
    if ($scope.permissions['org_catalogs/view']) {
      $scope.apps = AppList.query({orgId: $scope.orgId});
      $scope.apps.$promise.then(function(data) {
        $scope.allData = $scope.allData.concat(data.map(function(app) {
          var parts = app.url.split('/');
          var appId = parts[parts.length - 1];
          return {
            type: "app",
            id: appId,
            title: app.title,
            createdAt: app.createdAt,
            updatedAt: app.updatedAt,
            ref: app
          };
        }));
      })
        .finally(function() {
          $scope.fetchingData = false;
        });
    }

    // must check if we have any collectives
    $scope.collectives = CollectivesList.query();
    $scope.collectives.$promise.finally(function() {
      $scope.fetchingData = false;
    });

  };

  // one-off call to initialise data
  var watchEnvironment;
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg || watchEnvironment) return;

    watchEnvironment = $scope.$watch('environments', function() {
      if ($scope.environments && $scope.environments.length > 0) {
        $scope.refreshData();
      }
    });
  });

  $scope.setView = function(view) {
    $scope.view = view;
    if(typeof(localStorage) !== "undefined") {
      localStorage.setItem("apim-catalogs-view", view);
    }
  };

  $scope.getCatalogImage = function(entity) {
    var name = entity.title;
    var asciiTotal = 0;
    for(var i=0; i<name.length; i++) {
      asciiTotal += name.charCodeAt(i);
    }
    var id = (asciiTotal % 10) + 1;
    if(id < 10) id = "0" + id;
    var ret;
    if (entity.type == "app") {
      ret = "app_" + id;
    } else {
      ret = "cat_" + id;
    }
    return ret;
  };

  $scope.getIdFromUrl = function(url) {
    return url.substring(url.lastIndexOf("/") + 1);
  };

  $scope.addApp = function(evt) {
    var appPromise = $modal.open({
      controller: 'CreateAppController',
      templateUrl: 'apim/catalogs/partials/createAppDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
    });

    appPromise.result.then(addAppSuccessHandler);

    function addAppSuccessHandler(catalog) {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list here
      $scope.refreshData();
    };
  };

  $scope.addCatalog = function(evt) {
    var catalogPromise = $modal.open({
      controller: 'CreateCatalogController',
      templateUrl: 'apim/catalogs/partials/createCatalogDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
    });

    catalogPromise.result.then(addCatalogSuccessHandler);

    function addCatalogSuccessHandler(catalog) {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list here
      $scope.refreshPermissions();
      $scope.selectedEnvironment = catalog;
      $scope.advancePortalConfirmed = false;
      if (($scope.isbluemix || $scope.isSCX || $scope.isNonIBMID) &&
        ($scope.selectedEnvironment.portalType &&
          $scope.selectedEnvironment.portalType == 'ADVANCED')) {
            $scope.showAdvanceURL = true;
      } else {
        $scope.showAdvanceURL = false;
      }
      $scope.setPublishableTargets();
      $scope.$emit('environment_added', $scope.selectedEnvironment);
      $scope.$broadcast('environment_added', $scope.selectedEnvironment);
      $scope.refreshData();
    };
  };

  $scope.confirmDeleteEntity = function(entity) {
    var titleKey = "confirmDeleteEnvironmentTitle";
    var messageKey = "confirmDeleteEnvironment";
    if (entity.type == "app") {
      titleKey = "confirmDeleteAppTitle";
      messageKey = "confirmDeleteApp";
    }
    $scope.confirmation = {
      titleKey: titleKey,
      messageKey: messageKey,
      confirmed: function() {
        if (entity.type == "app") {
          $scope.deleteProviderApp(entity);
        } else {
          $scope.deleteEnvironment(entity.ref);
        }
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      scope: $scope
    });
  };

  $scope.deleteEnvironment = function(environmentToDelete) {
    var timestamp = (new Date()).getTime();
    $scope.$root.notifyUser('confirmDeleteEnvironmentTitle', {}, 'BUSY', false, "deletingEnvironment-" + timestamp);

    $scope.beingDeleted = true;
    $scope.saveDisabled = true;

    if($scope.isFavourite('catalog', environmentToDelete)) {
      $scope.setFavourite('catalog', environmentToDelete);	// Remove catalog from favourites
    }

    // var environmentToDelete = $scope.environments[index];
    var index = -1;
    for(var i=0; i<$scope.environments.length; i++) {
      if($scope.environments[i].id == environmentToDelete.id) {
        index = i;
        break;
      }
    }

    if(index >= 0 && !environmentToDelete.newEnvironment) {
      environmentToDelete.$remove({orgId: $scope.orgId, envId: environmentToDelete.id}).then(
        function() {
          $scope.environments.splice(index, 1);
          if($scope.environments.length > 0) {
            $scope.selectedEnvironment = $scope.environments[0];
          } else {
            $scope.selectedEnvironment = null;
          }
          $scope.$emit('environment_removed', environmentToDelete);
          $scope.beingDeleted = false;

          $scope.$root.notifyUser('environmentDeleted', {}, 'SUCCESS', false, "deletingEnvironment-" + timestamp);
          $scope.refreshEnvironments();
          $scope.refreshData();
        },
        function(error) {
          $scope.beingDeleted = false;
          $scope.saveDisabled = false;

          $scope.$root.notifyUser('environmentDeleteError', {}, 'ERROR', false, "deletingEnvironment-" + timestamp);
        });
    }
  };
  $scope.deleteProviderApp = function(providerApp) {
    var timestamp = (new Date()).getTime();
    $scope.$root.notifyUser('catalog_deleting_app', {}, 'BUSY', false, "deletingApp-" + timestamp);
    $scope.beingDeleted = true;
    $scope.saveDisabled = true;
    if ($scope.isFavourite('app', providerApp)) {
      $scope.setFavourite('app', providerApp);	// Remove from favourites
    }
    providerApp.ref.$remove({orgId: $scope.orgId, appId: providerApp.id}).then(function() {
      $scope.beingDeleted = false;
      $scope.$root.notifyUser('catalog_deleted_app', {}, 'SUCCESS', false, "deletingApp-" + timestamp);
      $scope.refreshData();
    }, function(error) {
      $scope.beingDeleted = false;
      $scope.saveDisabled = false;
      $scope.$root.notifyUser('catalog_delete_app_failed', {}, 'ERROR', false, "deletingApp-" + timestamp);
    });
  };
  $scope.showEntityURL = function(entity) {
    var url = "", title = "", message = "";
    if (entity.type == "catalog") {
      url = "apic config:set catalog=apic-catalog://" + location.host + "/orgs/" + $scope.currentOrg.name + "/catalogs/" + entity.ref.shortName;
      title = $filter('translate')('catalogs_url_title');
      message = $filter('translate')('catalogs_url_message');
    } else {
      url = "apic config:set app=apic-app://" + location.host + "/orgs/" + $scope.currentOrg.name + "/apps/" + entity.ref.name;
      title = $filter('translate')('catalogs_url_app_title');
      message = $filter('translate')('catalogs_url_app_message');
    }
    $scope.showURLBox(url, title, message);
  };
};

angular.module('apim.catalogs').controller('CatalogAppsController', ['$scope', '$modal', 'AppList', 'CollectivesList', CatalogAppsController]);

function CatalogAppsController($scope, $modal, AppList, CollectivesList) {
  $scope.fetchingData = true;
  $scope.canManage = false;
  $scope.$watch('currentOrg', function() {
    var appId = location.hash.split('/')[3];
    $scope.providerApp = AppList.get({orgId: $scope.orgId, appId: appId});
    $scope.providerApp.$promise.then(function(data) {
      if ($scope.providerApp.liberty && $scope.providerApp.liberty.collective) {
        var controllers = $scope.providerApp.liberty.collective.controllers;
        if (controllers && controllers.length > 0) {
          $scope.canManage = true;
        }
      } else if ($scope.providerApp.bluemix && $scope.providerApp.bluemix.applicationUrl) {
        $scope.canManage = true;
      }
      $scope.collectives = CollectivesList.query();
      $scope.collectives.$promise.then(function(resp) {
        $scope.fetchingData = false;
      }, function(err) {
        $scope.fetchingData = false;
      });
    }, function(error) {
      $scope.fetchingData = false;
    });
  });

  $scope.backToDashboard = function() {
    location.hash = "#/catalogs";
  };

  $scope.saveApp = function() {
    var timestamp = (new Date()).getTime();
    $scope.$root.notifyUser('catalog_saving_app', {}, 'BUSY', false, "savingApp-" + timestamp);
    var appId = location.hash.split('/')[3];
    $scope.savingData = true;
    AppList.update({orgId: $scope.orgId, appId: appId}, $scope.providerApp).$promise.then(function(response) {
      $scope.savingData = false;
      $scope.collectiveForm.$setPristine();
      $scope.$root.notifyUser('catalog_saved_app', {}, 'SUCCESS', false, "savingApp-" + timestamp);
    }, function(error) {
      $scope.savingData = false;
      $scope.$root.notifyUser('catalog_save_app_failed', {}, 'ERROR', false, "savingApp-" + timestamp);
    });
  };

  $scope.manageApp = function() {
    if ($scope.canManage) {
      if ($scope.providerApp.liberty) {
        var controllers = $scope.providerApp.liberty.collective.controllers;
        if (controllers && controllers.length > 0) {
          var controller = controllers[0];
          var url = "https://" + controller.host + ":" + controller.port + "/adminCenter";
          window.open(url);
        }
      } else if ($scope.providerApp.bluemix) {
        window.open($scope.providerApp.bluemix.applicationUrl);
      }
    }
  };
}

angular.module('apim.catalogs').controller('CreateAppController', ['$scope', '$modalInstance', 'AppList', 'CollectivesList', createAppController]);

function createAppController($scope, $modalInstance, AppList, CollectivesList) {
  var outerScope = $scope;
  $scope.orgId = outerScope.orgId;
  $scope.isSaaS = outerScope.isSaaS;
  $scope.saveDisabled = true;
  $scope.providerApp = {
    title: "",
    name: ""
  };
  if ($scope.isSaaS) {
    $scope.providerApp.bluemix = {};
  } else {
    $scope.providerApp.liberty = {
      collective: ""
    };
  }
  $scope.collectives = CollectivesList.query();
  $scope.$watch('providerApp.title', function() {
    $scope.providerApp.name = $scope.$root.generateName($scope.providerApp.title);
  });

  $scope.performingCreate = false;
  $scope.cancel = function() {
    $modalInstance.dismiss();
  };
  $scope.create = function() {
    $scope.performingCreate = true;
    var timestamp = (new Date()).getTime();
    var messageId = "APP_CREATE_" + timestamp;
    $scope.$root.notifyUser('catalog_creating_app', [], "BUSY", false, messageId);
    // make the request using the local data
    var newApp = new AppList($scope.providerApp);
    var promise = newApp.$save({orgId: $scope.orgId});
    promise.then(function(response) {
      $scope.$root.notifyUser('catalog_created_app', [], "SUCCESS", true, messageId);
      return $modalInstance.close(response);
    }, function(err) {
      $scope.performingCreate = false;
      $scope.$root.notifyUser('catalog_create_app_failed', [], "ERROR", false, messageId);
    });
  };

  // Called when event is raised from contained form
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.collectiveForm || $scope.collectiveForm.$invalid || $scope.collectiveForm.$pristine) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };

  $scope.$watch('collectiveForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('collectiveForm.$pristine', $scope.handleFormUpdate);
}

angular.module('apim.catalogs').controller('CreateCatalogController', ['$scope', '$filter', '$modalInstance', 'Environment', 'UserRegistry', createCatalogController]);

function createCatalogController($scope, $filter, $modalInstance, Environment, UserRegistry) {
  var outerScope = $scope;
  $scope.orgId = outerScope.orgId;
  $scope.saveDisabled = true;
  $scope.catalog = {
    title: "",
    name: ""
  };
  // Work out a suitable default name and path
  var newEnvironmentName = null;
  var newEnvironmentNamePrefix = $filter('translate')('newEnvironment') + " ";
  for (var i=1; newEnvironmentName == null; i++) {
    var testName = newEnvironmentNamePrefix + i;
    var testPath = "new-" + i;
    var nameOrPathAlreadyTaken = false;
    for (var j=0; j<outerScope.environments.length; j++) {
      if(outerScope.environments[j].name == testName || outerScope.environments[j].shortName == testPath) {
        nameOrPathAlreadyTaken = true;
        break;
      }
    } // end for
    if (!nameOrPathAlreadyTaken) {
      $scope.catalog.title = newEnvironmentName = testName;
      $scope.catalog.name = testPath;
    }
  } // end for

  $scope.$watch('catalog.title', function() {
    $scope.catalog.name = $scope.$root.generateName($scope.catalog.title);
  });

  $scope.performingCreate = false;
  $scope.cancel = function() {
    $modalInstance.dismiss();
  };
  $scope.create = function() {
    $scope.performingCreate = true;
    var outerScope = $scope;
    // make the request using the local data
    // Create environment object
    // must make sure we have list of registries
    if (!outerScope.registries) outerScope.registries = UserRegistry.query({orgId: outerScope.currentOrg.id});
    outerScope.registries.$promise.then(function() {
      var newEnvironment = new Environment({
        autoDeploy: true,
        availableRoles: ["developer", "viewer"],
        "default": false,
        invitationEnabled: true,
        name: $scope.catalog.title,
        restrictedDeployment: false,
        selfSignUpEnabled: true,
        shortName: $scope.catalog.name
      });

      for (var i = 0; i < outerScope.registries.length; i++) {
        var reg = outerScope.registries[i];
        if (reg.type != "portal") {
          if (reg.scope && reg.scope.indexOf("portal") != -1) {
            newEnvironment.idp = reg.id;
            break;
          }
        }
      }

      var timestamp = (new Date()).getTime();
      $scope.$root.notifyUser('addingEnvironment', {}, 'BUSY', true, "savingEnvironment-" + timestamp);
      newEnvironment.$save({orgId: $scope.orgId}).then(function(response) {
        $scope.$root.notifyUser('environmentAdded', {}, 'SUCCESS', true, "savingEnvironment-" + timestamp);
        outerScope.environments.unshift(newEnvironment);    // Add to beginning of array
        return $modalInstance.close(response);
      },
        function(error) {
          $scope.performingCreate = false;
          $scope.$root.notifyUser('environmentAddError', {}, 'ERROR', true, "savingEnvironment-" + timestamp);
        });
    }, function(err) {
      $scope.performingCreate = false;
    });
  };

  // Called when event is raised from contained form
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.collectiveForm || $scope.collectiveForm.$invalid) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };

  $scope.$watch('collectiveForm.$invalid', $scope.handleFormUpdate);
}

