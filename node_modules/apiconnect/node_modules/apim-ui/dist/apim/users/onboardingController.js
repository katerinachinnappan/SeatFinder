/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

/*
  Using the tooltips with this controller:
  NOTE: Tooltips are a MESS. Sorry.
  NOTE: the tooltips we are using are those defined here: http://angular-ui.github.io/bootstrap/versioned-docs/0.12.0/#/tooltip
NOTE: using $timeout might eat up your error messages

OPTION1: Use when you need a dynamic tooltip (or the tooltip is not an inline element (such as in a dynamic dropdown menu, or other)
  1. add the attributes: [tooltip, tooltip-placement, tooltip-trigger] to an element's markup you want the tooltip to point to:
  ex: <li role="menuitem" data-ng-show="editable" id="generateProductTag" tooltip="tooltip text goes here" tooltip-placement="left" tooltip-trigger="generateProductEvent" >
  It is important to note a)placement of tooltip (optional: defaults to top), b) content of tooltip, c) the event associated with making the tooltip visible, and d) a unique identifier
Additionally, ENSURE! the class 'tooltipContainer' is added to the container of the object you're adding tooltip too. This will be a hook for future styling different than bootstrap-ui
2. to trigger a tooltip dispatch the above event (^ c) on the above element.
  ex: $('#generateProductTag')).triggerHandler('generateProductEvent');
3. Add your custom event to the .setTriggers function in the config below.
  ex: {'generateProductEvent': 'mouseenter', 'myCustomEvent': 'blur'}
4. Depending on the order events are handled (timing issues), etc, you may have to tweak this using $timeout. triggerGenerate function describes such an extreme example and one way to deal with it.

  OPTION2: Is the most OPTIMAL option. Use it if you can. Use this when you don't need to calculate the position of your tooltip (.right) (or from dropdown)
1. Treat the following markup as you would any regular markup.
  <div class="tooltip right fade" data-ng-class="{'in': gettingStartedActive, fade: true}" is-open=gettingStartedActive>
  <div class="tooltip-arrow"></div>
  <div class="tooltip-inner">tooltip text goes here</div>
  </div>
  a. where class .right or .left determine arrow position,
  b. where 'gettingStartedActive' is the rootScope (or scope) variable that makes this tooltip appear.
  i. in onboardingHandler, in the click controller for [import, generate, explore, test, ...], set this variable to true.
  ii. on completion or cancelation of the flow, set this var to false.
  c. add display:inline-block style to the sibling element you want this to point to.
  d.use style tag to adjust position, I recommend using margin-top and margin-left to position relatively . YOu can supply both positive and negative numbers to margin to adjust position.
  */
  /*
  'Completing' a getting-started list item:
  1. when you click a getting-started list item, you perform some action in this file. These actions/fucntions may in turn result in triggering more actions/functions.
  At the end of an action's behavior, set the corresponding value in $rootScope.gsState to true.
  Example: I click the 'generate and publish' list item. Then, in the function that runs after an api/product has been published, I'll write $rootScope.gsState.generate = true.

  Note: 'completed' is the class name for completed behavior. There also exists 'disabled' class, see the example usage in gettingStarted.html for 'generate and publish'
  */
var users = angular.module('apim.users');

var apim = angular.module('apim');
apim.config(['$tooltipProvider', function($tooltipProvider){
  //This is an object that contains a map of 'startingEvent' and its corresponding 'ending event'
  //The mapping in this object is added to the default mapping specified in bootstrap-ui tooltip docs
  $tooltipProvider.setTriggers({
    'generateProductEvent': 'click',
    'importApiTooltipEvent': 'mouseenter',
    'closeGettingStartedEvent': 'mouseenter'
  });

  //all following options can be overwritten in the markup.
    //sets animation to make the popupdelay a little less obvious.
    //popup delay: just in case dom isn't ready yet. (so tooltip gets right position coords for placing tooltip)
  $tooltipProvider.options({
    placement: 'top',
    animation: true,
    popupDelay: 500,
    appendToBody: false
  });
}]);

/*
  The Onboarding Controller should contain functions related to the getting-started onboarding box.
  Functions triggered by the box should be defined here.
  Tooltip should be used.
  */
  users.controller('OnboardingController',['$scope', '$timeout', '$rootScope', '$localStorage', '$state', '$location', '$anchorScroll', OnboardingController]);

function OnboardingController($scope, $timeout, $rootScope, $localStorage, $state, $location, $anchorScroll){
  if(!$rootScope.gsState && onboarded === undefined){
    $rootScope.gsState = {
      import: false,
      generate: false,
      explore: false,
      test: false,
      analytics: false,
      toolkit: false
    };
  }

  $rootScope.imagesrc ={
    import: 'add_circle',
    generate: 'cloud_upload',
    explore: 'explore',
    test: 'play_arrow',
    analytics: 'equalizer',
    toolkit: 'file_download'
  };

  var onboarded = $localStorage.getItem('onboarded');

  if (onboarded){
    $rootScope.gsState.import = true;
    $rootScope.gsState.generate = true;
    $rootScope.gsState.explore = true;
  } else {
    $localStorage.removeItem('publishedProductInfo');
  }

  //Implementation for "getting-started" box's "import" button behavior
  $scope.triggerImport = function(){
    $state.go('apis');

    $timeout(function() {
      angular.element(document.getElementById('addApi')).triggerHandler('click');
      angular.element(document.getElementById('importSampleApi')).triggerHandler('importApiTooltipEvent');
    },500);
  };


  //placeholder and example for clicking on "getting-startted" box's "generate" butotn behavior
  //IMPORTANT NOTE: This only works when you're in a view of a specific api: ex: http://127.0.0.1:9001/#/design/apis/editor/57485633e4b0e0a236c092b7
  //TODO: Ask matt how to redirect/and how to choose where to redirect (multiple apis)
  $scope.triggerGenerate = function(){//Note: starting tooltip is defined in api.html
    $rootScope.gettingStartedActive = true;

    //justification for timeout: http://stackoverflow.com/questions/25815160/getting-apply-is-already-in-progress-error-even-though-i-dont-explicitly-cal
    $timeout(function(){
      $('.moreButton .design-api-overflow-btn .bx--overflow-menu')[0].click()
      $timeout(function(){//alias for window.timeout(func,0): which pushes new function on queue. So the following
        // should run as far back as I can get it (must run after click ^ has launched menu to get right position coords for tooltip)
        angular.element(document.getElementById('generateProductTag')).triggerHandler('generateProductEvent');
      });
    });

  };

  //placeholder for clicking on "getting-started" box's "explore" button behavior
  $scope.triggerExplore = function(){
    $localStorage.setItem('publishedProductInfo', ($rootScope.gsState));

    $timeout(function() {
      angular.element(document.getElementById('explorebtn')).triggerHandler('click');
      angular.element(document.getElementById('exploreCatalog-sb')).triggerHandler('exploreTooltipEvent');
    }, 500);
    $localStorage.setItem('onboarded', true);
    $rootScope.gsState.explore = true;
    $rootScope.imagesrc.explore = 'check_circle';
  };
  // placeholder for clicking on "getting-started" box's "test" button behavior
  $scope.triggerTest = function(){
    document.forms[0].scrollIntoView();
    $rootScope.gsState.test = true;
    $rootScope.imagesrc.test = 'check_circle';
    $timeout(function() {
      angular.element(document.getElementById('analyticstooltip')).triggerHandler('showAnalyticsEvent');
    }, 500);
  };
  //placeholder for clicking on "getting-started" box's "getToolkit" button behavior
  $scope.triggerGetToolkit = function(){
    //TODO: move to when toolkit action completes:
      $rootScope.gsState.toolkit = true;
    $rootScope.imagesrc.toolkit = 'check_circle';
  };
  //placeholder for clicking on "getting-started" box's "analytics" button behavior
  $scope.triggerAnalytics = function(){
    //TODO: move to when toolkit action completes:
    if($localStorage.getItem('publishedProductInfo')) {
      window.location.hash = '/catalogs/' + $localStorage.getItem('publishedProductInfo').publishedToCatalog + '/analytics?type=api&id=' +
        $localStorage.getItem('publishedProductInfo').publishedApiId + '&name=' + $localStorage.getItem('publishedProductInfo').publishedApiName;
    }
    $rootScope.gsState.analytics = true;
    $rootScope.imagesrc.analytics = 'check_circle';
    $localStorage.removeItem('onboarded');
  };
}
