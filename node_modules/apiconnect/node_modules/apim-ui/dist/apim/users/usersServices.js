/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

var users = angular.module('apim.users');

users.factory('CurrentUser', ['$resource',
  function($resource) {
    return $resource('proxy/me/:suffix', {}, {
      query: {method:'GET', isArray: false},
      update: {method:'PUT', isArray: false},
      listOrgs: {method:'GET', params: {suffix: 'orgs'}, isArray: true},
      listProviderOrgs: {method:'GET', params: {suffix: 'orgs', orgType: 'apiProvider'}, isArray: true},
      logout: {method:'POST', params: {suffix: 'logout'}}
    });
  }
]);

users.factory('Permission', ['$resource',
  function($resource) {
    return $resource('proxy/me/orgs/:orgId/permissions', {}, {
      query: {method:'GET', params: {orgId: '@orgId', expand: 'true'}, isArray: false}
    });
  }
]);

users.factory('ApimUser', ['$resource',
  function($resource) {
    return $resource('proxy/users/:userId/:resendInvite', {}, {
      query: {method:'GET', params: {userId: '@userId'}, isArray: false},
      create: {method:'POST', params: {}},
      resendInvite: {method:'POST', params: {userId: '@userId', resendInvite: 'resendInvite'}}
    });
  }
]);

users.factory('UserSearch', ['$resource',
  function($resource) {
    return $resource('proxy/users/idp/:idpId', {}, {
      query: {method:'GET', params: {idpId: '@idpId'}, isArray: true}
    });
  }
]);

users.factory('UserContext', ['$resource',
  function($resource) {
    return $resource('proxy/users/context/:context/:userId', {}, {
      query: {method:'GET', params: {context: '@context', userId: '@userId'}, isArray: false}
    });
  }
]);

users.factory('SBSToken', ['$resource',
  function($resource) {
    return $resource('proxy/internal/scx/orgs/:orgId/data', {}, {
      query: {method:'GET', params: {orgId: '@orgId'}, isArray: false}
    });
  }
]);

users.factory('Member', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/:environments/:envId/:spaces/:spaceId/members/:userId', {}, {
      query: {method:'GET', params: {orgId: '@orgId'}, isArray: true},
      remove: {method:'DELETE', params: {orgId: '@orgId', userId: '@userId'}},
      add: {method:'POST', params: {orgId: '@orgId'}},
      updateRoles: {method:'PUT', params: {orgId: '@orgId', userId: '@userId'}}
    });
  }
]);

users.factory('Role', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/roles/:roleId/:userId', {}, {
      query: {method:'GET', params: {orgId: '@orgId'}, isArray: true},
      update: {
        method:'PUT',
        params: {orgId: '@orgId', roleId: '@roleId', userId: '@userId'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({displayName: data.displayName, name: data.name, description: data.description, permissions: data.permissions});
        }
      },
      remove: {method:'DELETE', params: {orgId: '@orgId', roleId: '@roleId', userId: '@userId'}},
      save: {method:'POST', params: {}}
    });
  }
]);

users.factory('Organization', ['$resource',
  function($resource) {
    return $resource('proxy/users/:userId/orgs', {}, {
      query: {method:'POST', params: {userId: '@userId'}, isArray: false}
    });
  }
]);

users.factory('BluemixOrganization', ['$resource',
  function($resource) {
    return $resource('proxy/users/:email/bluemixorgs', {}, {
      query: {method:'POST', params: {email: '@email'}, isArray: false}
    });
  }
]);
users.factory('BluemixURLs', ['$resource',
  function($resource) {
    return $resource('proxy/internal/externalorgs/:orgId/links', {}, {
      query: {method:'GET', params: {orgId: '@orgId'}, isArray: false}
    });
  }
]);

