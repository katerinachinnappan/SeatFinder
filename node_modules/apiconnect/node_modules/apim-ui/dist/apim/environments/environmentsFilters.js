/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Filters */

var environments = angular.module('apim.environments');

environments.filter('getClusterNameFromUrl', function() {
  return function (url, clusters) {
    if(!url) return "";
    for(var i=0; i<clusters.length; i++) {
      if(clusters[i].url.indexOf(url) >= 0) {
        return clusters[i].name;
      }
    }
    return url;
  };
});

environments.filter('environmentName', function() {
  return function(envId, environments) {
    if (!environments) return "";
    var filtered = environments.filter(function(environment) {
      return (environment.id == envId);
    });
    if (filtered.length > 0) return filtered[0].name;
    return "";
  };
});

environments.filter('createRoleTag', function() {
  return function (id, roles) {
    if(!id) return null;
    for(var i=0; i<roles.length; i++) {
      if(roles[i].id == id) {
        return {
          "value": roles[i].id,
          "label": roles[i].displayName,
          "className": "orgTag"
        };
      }
    }
    return null;
  };
});

environments.filter('roleNotAlreadySelected', function() {
  return function (roles, selectedRoleIds) {
    if(!selectedRoleIds) return roles;
    var filteredRoles = roles.filter(function(role) {
      for(var i=0; i<selectedRoleIds.length; i++) {
        if(role.id == selectedRoleIds[i]) return false;
      }
      return true;
    });
    return filteredRoles;
  };
});

environments.filter('registryTypeFilter', function() {
  return function (registries, portalType) {
    if (!registries) return [];
    var filteredRegistries = registries.filter(function(registry) {
      if (portalType == "BASIC" && (registry.type == "scim" || registry.id == "newScim")) return false;
      if (registry.scope.indexOf("api") != -1) return false;
      return true;
    });
    return filteredRegistries;
  };
});

environments.filter('policiesQuery', function() {
  return function (policies, query) {
    if(!policies) return policies;
    if(!query) return policies;
    var term = query.toLowerCase();
    return policies.filter(function(policy) {
      return (policy.title && policy.title.toLowerCase().indexOf(term) > -1) ||
        (policy.version && policy.version.toLowerCase().indexOf(term) > -1);
    });
  };
});

environments.filter('extensionsQuery', function() {
  return function (extensions, query) {
    if(!extensions) return extensions;
    if(!query) return extensions;
    var term = query.toLowerCase();
    return extensions.filter(function(extension) {
      return (extension.title && extension.title.toLowerCase().indexOf(term) > -1) ||
        (extension.name && extension.name.toLowerCase().indexOf(term) > -1) ||
        (extension.version && extension.version.toLowerCase().indexOf(term) > -1);
    });
  };
});

environments.filter('clustersInEndpoint', function () {
  return function(clusterList, endpoint){
    var filteredClusters = [];
    var i = 0;
    for (i = 0; i < clusterList.length; i++) {
      var cluster = clusterList[i];
      if (endpoint.gwServices.indexOf(cluster.id) > -1) {
        filteredClusters.push(cluster);
      }
    }
    return filteredClusters;
  }
});

environments.filter('clustersInEnvironment', function () {
  return function(clusterList, environment){
    var filteredClusters = [];
    var i = 0;
    for (i = 0; i < clusterList.length; i++) {
      var cluster = clusterList[i];
      if (environment.gwServices.indexOf(cluster.id) > -1) {
        filteredClusters.push(cluster);
      }
    }
    return filteredClusters;
  }
});

environments.filter('spacesQuery', function() {
  return function (spaces, query) {
    if(!spaces) return spaces;
    if(!query) return spaces;
    var term = query.toLowerCase();
    return spaces.filter(function(space) {
      if (space.name && space.name.toLowerCase().indexOf(term) > -1) return true;
      if (space.title && space.title.toLowerCase().indexOf(term) > -1) return true;
      if (space.owner && space.owner.toLowerCase().indexOf(term) > -1) return true;
      return false;
    });
  };
});

environments.filter('applicationType', ['translateFilter', function(translateFilter) {
  return function (gwServiceType) {
    if(!gwServiceType) return;
    if (gwServiceType === "development") {
      return translateFilter('development_applications');
    }
    if (gwServiceType === "production") {
      return translateFilter('production_applications');
    }
    return;
  };
}]);

