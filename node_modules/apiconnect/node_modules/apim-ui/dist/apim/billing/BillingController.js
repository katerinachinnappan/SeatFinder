/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

'use strict';

var billing = angular.module('apim.billing', []);

billing.controller('billingController', ['$scope', '$rootScope', '$http', '$modal', 'StripeService', 'GatewayAPI', billingController]);

function billingController($scope, $rootScope, $http, $modal, StripeService, GatewayAPI) {
  $scope.stripeInfo = StripeService.getStripeInfo();
  $scope.modalType = {
    connect: 'connect',
    disconnect: 'disconnect',
    update: 'update'
  };

  $scope.loading = true;
  var paymentLoading = true;
  var jobsLoading = true;

  $scope.finishLoading = function() {
    if (!paymentLoading && !jobsLoading) {
      $scope.loading = false;
    }
  }

  $scope.getFailedJobs = function() {
    GatewayAPI.BillingFailed.get({
      org: $rootScope.orgId
    }, function(res) {
      $scope.issueCount = res.count;
    }).$promise.finally(function() {
      jobsLoading = false;
      $scope.finishLoading();
    });
  }

  GatewayAPI.Payment.query({
    org: $rootScope.orgId
  }, function(res) {
    if (res.length > 0) {
      $scope.stripeInfo.id = res[0].id;
      StripeService.getAccount($rootScope.orgId, $scope.stripeInfo);
    }
  }).$promise.finally(function() {
    paymentLoading = false;
    $scope.finishLoading();
  });

  $scope.getFailedJobs();

  $scope.retryJobs = function() {
    GatewayAPI.BillingRequeue.save({
      org: $rootScope.orgId
    }).$promise.finally(function() {
      $scope.getFailedJobs();
    });
  }

  $scope.showModal = function(type) {
    if (type !== 'disconnect') {
      $scope.stripeInfo.secretKey = null;
      $scope.stripeInfo.publishableKey = null;
      StripeService.setStripeInfo($scope.stripeInfo);
    }

    $modal.open({
      controller: 'billingModalController',
      windowTemplateUrl: 'apim/partials/main-template.html',
      templateUrl: 'apim/billing/partials/modal-' + type + '.html'
    });
  };
};

billing.controller('billingModalController', ['$scope', '$rootScope', '$http', 'StripeService', 'GatewayAPI', billingModalController]);

function billingModalController($scope, $rootScope, $http, StripeService, GatewayAPI) {
  $scope.stripeInfo = StripeService.getStripeInfo();

  $scope.connect = function() {
    var data = {
      secretKey: $scope.stripeInfo.secretKey,
      publishableKey: $scope.stripeInfo.publishableKey,
      type: 'stripe'
    };

    GatewayAPI.Payment.save({
      org: $rootScope.orgId
    }, data, function(res) {
      $scope.stripeInfo.id = res.id;
      StripeService.getAccount($rootScope.orgId, $scope.stripeInfo);
    });

    $scope.$close();
  };

  $scope.update = function() {
    var data = {
      secretKey: $scope.stripeInfo.secretKey,
      publishableKey: $scope.stripeInfo.publishableKey,
      type: 'stripe'
    };

    GatewayAPI.Payment.update({
      org: $rootScope.orgId,
      id: $scope.stripeInfo.id
    }, data, function(res) {
      StripeService.getAccount($rootScope.orgId, $scope.stripeInfo);
    });

    $scope.$close();
  };

  $scope.disconnect = function() {
    GatewayAPI.Payment.remove({
      org: $rootScope.orgId,
      id: $scope.stripeInfo.id
    }, function(res) {
      $scope.stripeInfo.id = null;
      StripeService.setStripeInfo($scope.stripeInfo);
    });

    $scope.$close();
  };

  $scope.cancel = $scope.$dismiss;
};
