/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

'use strict';

var billing = angular.module('apim.billing');

billing.service('StripeService', function($q, $http, $resource, GatewayAPI) {
  this.stripeInfo = {
    secretKey: null,
    publishableKey: null,
    id: null,
    name: null,
    connection: null
  };

  this.getStripeInfo = function() {
    return this.stripeInfo;
  };

  this.setStripeInfo = function(newStripe) {
    this.stripeInfo.secretKey = newStripe.secretKey;
    this.stripeInfo.publishableKey = newStripe.publishableKey;
    this.stripeInfo.id = newStripe.id;
    this.stripeInfo.name = newStripe.name;
    this.stripeInfo.connection = newStripe.connection;
  };

  // update local stripeInfo scope with name and status
  this.getAccount = function(org, stripeJSON) {
    return GatewayAPI.Payment.get({
      org: org,
      id: stripeJSON.id,
      action: 'info'
    }, function(res) {
      if (res.hasOwnProperty('name')) {
        stripeJSON.name = res.name;
      }
      stripeJSON.connection = 'billingConnected';
    }).$promise.catch(function(res) {
      if (res.data.errors[0].hasOwnProperty('monetization.api.authentication.error')) {
        stripeJSON.connection = 'billingInvalidKey';
      } else if (res.data.errors[0].hasOwnProperty('monetization.api.connection.error')) {
        stripeJSON.connection = 'billingInvalidConnection';
      } else {
        stripeJSON.connection = 'billingInvalidGeneric';
      }
      stripeJSON.loading = false;
      stripeJSON.name = null;
    });
  };
});

billing.factory('GatewayAPI', ['$resource', function($resource) {
  return {
    Payment: $resource('proxy/orgs/:org/paymentGateways/:id/:action',
    {
      org: '@org',
      id: '@id',
      action: '@action'
    },
    {
      update: { method: 'PUT' },
      info: {
        params: { action: 'info' }
      }
    }),
    BillingFailed: $resource('proxy/orgs/:org/billingQueue/failedJobsCount', { org: '@org' }),
    BillingRequeue: $resource('proxy/orgs/:org/billingQueue/reQueueJobs', { org: '@org' })
  };
}]);
