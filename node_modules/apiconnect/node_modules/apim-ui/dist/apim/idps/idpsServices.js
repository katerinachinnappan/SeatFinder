/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

var idps = angular.module('apim.idps');

idps.factory('IdentityProvider', ['$resource', function($resource) {
  return $resource('proxy/idps/:idpId', {}, {
    query: {method:'GET', params:{idpId: '@idpId'}, isArray: false},
    save: {method:'POST'}
  });
}]);

idps.factory('UserRegistry', ['$resource', function($resource) {
  return $resource('proxy/orgs/:orgId/registries/:idpId', {}, {
    query: {method:'GET', params:{orgId: '@orgId', idpId: '@idpId', scope: '@scope'}, isArray: true}
  });
}]);

idps.factory('BaseDN', ['$resource', function($resource) {
  return $resource('proxy/orgs/:orgId/registries/:idpId/baseDN', {}, {
    test: {method:'POST', params:{orgId: '@orgId', idpId: '@idpId'}, isArray: true}
  });
}]);

idps.factory('IDPBaseDN', ['$resource', function($resource) {
  return $resource('proxy/idps/:idpId/baseDN', {}, {
    test: {method:'POST', params:{idpId: '@idpId'}, isArray: true}
  });
}]);

idps.factory('RegistryTest', ['$resource', function($resource) {
  return $resource('proxy/orgs/:orgId/registries/:idpId/test', {}, {
    test: {method:'POST', params:{orgId: '@orgId', idpId: '@idpId'}}
  });
}]);

idps.factory('IDPTest', ['$resource', function($resource) {
  return $resource('proxy/idps/:idpId/test', {}, {
    test: {method:'POST', params:{idpId: '@idpId'}}
  });
}]);

idps.factory('IDP', ['$resource', function($resource){
  return $resource('proxy/orgs/:orgId/registries/:idpId', {}, {
    query: {method:'GET', params:{orgId: '@orgId'}, isArray:true},
    update: {method:'PUT', params:{orgId: '@orgId', idpId: '@idpId'}},
    save: {method:'POST', params:{orgId: '@orgId'}},
    remove: {method:'DELETE', params:{orgId: '@orgId', idpId: '@idpId'}}
  });
}]);

idps.factory('SSLProfiles', ['$resource', function($resource){
  return $resource('proxy/orgs/:orgId/ssl-profiles', {}, {
    query: {method:'GET', params:{orgId: '@orgId'}, isArray:true}
  });
}]);

// TLS profiles for running inside the CMC
idps.factory('CmcSSLProfiles', ['$resource', function($resource){
  return $resource('proxy/cloud/ssl-profiles', {}, {
    query: {method:'GET', isArray:true}
  });
}]);

idps.factory('IDPForContext', ['$resource', function($resource){
  return $resource('proxy/idps/context/:context', {}, {
    query: {method:'GET', params:{context: '@context'}}
  });
}])

// handle IDPs when running inside the CMC
// use parameter {scope: apimanager|cmc} for GET
idps.factory('CmcIDP', ['$resource', function($resource){
  return $resource('proxy/idps/:idpId', {}, {
    query: {method:'GET', isArray:true, transformResponse: function(data, headersGetter){
      if (data.indexOf("<") == 0) return data;
      // not sure but we may get away with only retrieving with no scope, but we need to remove uneditable types
      var jsonData = angular.fromJson(data);
      var ret = [];
      angular.forEach(jsonData, function(idp) {
        // only edit these types of IDP
        if(idp.type === "ldap" || idp.type === "authUrl" || idp.type === "scim") {
          ret.push(idp);
        }
      });
      return ret;
    }},
    update: {method:'PUT', params: {idpId: '@idpId'}},
    save: {method:'POST', params: {idpId: '@idpId'}},
    remove: {method:'DELETE', params: {idpId: '@idpId'}}
  });
}]);

// user registry when running inside the CMC
idps.factory('CmcUserRegistry', ['$resource', function($resource) {
  return $resource('proxy/idps/:idpId', {}, {
    query: {method:'GET', params:{idpId: '@idpId', scope: '@scope'}, isArray: true}
  });
}]);

// setting and removing scope from an IDP
idps.factory('CmcIDPScopes', ['$resource', function($resource) {
  return $resource('proxy/idps/:idpId/scopes/:scope', {}, {
    // put returns the IDP object
    update: {method:'PUT', params:{idpId: '@idpId'}, isArray: false},
    // delete has no return data
    remove: {method:'DELETE', params:{idpId: '@idpId', scope: '@scope'}, isArray: false}
  });
}]);

