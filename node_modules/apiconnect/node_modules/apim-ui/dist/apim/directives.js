/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

// Directives used solely by apim-ui

var apim = angular.module('apim');


apim.directive('uniqueProjectAttrib', function (){
  return {
    require: 'ngModel',
    link: function(scope, elem, attr, ngModel) {
      var myAttr = attr.uniqueProjectAttrib;
      var skipActiveProject = attr.uniqueProjectAttribSkipActiveProject == 'true';

      if (skipActiveProject){
        scope.projects = scope.projects.filter(function(project){
          return project.name !== scope.activeProject.name;
        });
      }

      var existingAttrs = scope.projects.map(function(project){
        return project[myAttr].toLowerCase();
      });

      function validator(value){
        var valid = !!(value && existingAttrs.indexOf(value.toLowerCase()) === -1);

        ngModel.$setValidity('unique-project-'+myAttr, valid);
        return value;
      }

      //For DOM -> model validation
      ngModel.$parsers.unshift(validator);

      //For model -> DOM validation
      ngModel.$formatters.unshift(validator);
    }
  };
});

apim.directive('uniqueModelAttrib', function () {
  return {
    require: 'ngModel',
    link: function(scope, elem, attr, ngModel) {

      function validator(value) {

        if (value) {

          // check if name is valid with general rule
          var valid = /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(value);

          // check if name is one of reserved words
          valid = valid && [
            'any',
            'array',
            'boolean',
            'date',
            'file',
            'integer',
            'number',
            'object',
            'string'
          ].indexOf(value.toLowerCase()) < 0;

          var myAttr = attr.uniqueModelAttrib;

          valid = valid && !scope.models.some(function(model) {
            return model[myAttr].toLowerCase() === value.toLowerCase();
          });

          ngModel.$setValidity('unique-model-' + myAttr, valid);
        }

        return value;
      }

      //For DOM -> model validation
      ngModel.$parsers.unshift(validator);

      //For model -> DOM validation
      ngModel.$formatters.unshift(validator);
    }
  };
});

apim.directive('runtimeNavigation', [
  '$rootScope',
  '$timeout',
  function($rootScope, $timeout) {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: 'apim/partials/runtimeNavigation.html',
      link: function(scope, elem) {
        function bannerWidth() {
          var bannerWidth = $('.bannerActions').width();

          if (bannerWidth > 0) {
            return $('.bannerActions').width() + 30;
          }

          return 0;
        };

        $rootScope.$on('update.bannerItems', function() {
          $timeout(function() {
            $(elem)
              .css('marginRight', bannerWidth() + 'px')
              .show();
          }, 100);
        });
      }
    };
  }]);

apim.directive('apimVersionList', function() {
  return {
    restrict: 'E',
    templateUrl: 'apim/partials/version-list.html',
    scope: {
      selectedVersion: "=selectedVersion"
    }
  };
});

apim.directive('apimSidenavHeader', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/sidenav-header.html'
  };
});

apim.directive('apimTopnav', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/topnav.html'
  };
});

apim.directive('apimTopnavMenu', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/topnav-menu.html'
  };
});

apim.directive('apimSidenavMenu', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/sidenav-menu.html'
  };
});

apim.directive('apimSubnav', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/subnav.html'
  };
});

apim.directive('apimSubnavCatalogs', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/subnav-catalogs.html'
  };
});

apim.directive('apimSubnavAdmin', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/subnav-admin.html'
  };
});

apim.directive('apimSubnavDesign', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/subnav-design.html'
  };
});

apim.directive('apimSubnavHeader', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/subnav-header.html'
  };
});

apim.directive('apimMessages', function() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'apim/partials/messages.html'
  };
});

