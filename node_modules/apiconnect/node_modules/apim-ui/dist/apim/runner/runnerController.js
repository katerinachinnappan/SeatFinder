/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.runner')
  .controller('appRunnerSubnav', [
    '$scope',
    '$rootScope',
    '$q',
    '$interval',
    '$location',
    'AppRunnerStates',
    'ProcessManager',
    'MicroGatewayService',
    function($scope, $rootScope, $q, $interval, $location, AppRunnerStates,
      ProcessManager, MicroGatewayService) {
        $scope.url = '';
        $scope.disableControls = false;

        $scope.$parent.$watch('processes', function(newVal) {
          var isGw = function(process) {
            return !!process.gw || MicroGatewayService.isGateway(process);
          };

          if ($scope.$parent.processes.some(isGw)) {
            MicroGatewayService.refreshGateway()
              .then(function (gateways) {
                if (gateways.length) {
                  $scope.gatewayUrl = gateways[0].url;
                }
              });
          }
        }, true);

        ['start', 'restart'].map(function(cmd) {
          $scope[cmd] = function() {
            if ($scope.disableControls) {
              return;
            }

            $scope.disableControls = true;
            ProcessManager[cmd]().$promise
              .then(function() {
                $scope.disableControls = false;
                // TODO(jtary) internationalize these messages
                $rootScope.$broadcast('console-log', {
                  msg: cmd + ' test server'
                });
              });
          }
        });

        $scope.status = function() {
          if ($scope.processes.length > 0) {
            return AppRunnerStates.running;
          }

          return AppRunnerStates.stopped;
        };

        $scope.stop = function() {
          if ($scope.disableControls) {
            return;
          }

          $scope.disableControls = true;
          ProcessManager.stop();
          $rootScope.$broadcast('console-log', {
            msg: 'stopping test server'
          });

          var watcher = $scope.$watch('processes', function(newVal) {
            if (newVal.length < 1) {
              // clear the watcher
              watcher();
              $scope.disableControls = false;
              $rootScope.$broadcast('console-log', {
                msg: 'stopped test server'
              });
            }
          });
        };
    }
  ])
  .controller('AppRunnerController', [
    '$scope',
    '$rootScope',
    'AppRunnerStates',
    function($scope, $rootScope, AppRunnerStates) {
      var idx = 0;
      $scope.messages = [];

      $rootScope.$on('console-log', function(evt, args) {
        $scope.messages.unshift({
          index: idx,
          msg: args.msg
        });
      });
    }
  ])

