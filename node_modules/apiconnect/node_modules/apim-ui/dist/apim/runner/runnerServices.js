/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.runner')
  .service('MicroGatewayService', [
    '$q',
    '$http',
    '$location',
    'ProcessManager',
    function($q, $http, $location, ProcessManager) {
      var svc = this;

      var isGateway = function(process) {
        return (process.gw ||
          process.name.indexOf('-gw') === process.name.length - 3);
      };

      var preferredScheme = function(schemes) {
        if (!schemes || schemes.indexOf('https') >= 0) {
          return 'https';
        }

        return schemes[0];
      };

      var getGatewayProcesses = function(scheme, apiHost) {
        var dfd = $q.defer();
        var getGwAddr = function() {
          if (apiHost)
            return apiHost.split(':')[0];
          else
            return $location.host();
        };

        ProcessManager.processList().$promise
          .then(function(response) {
            var gateways = response.processes
              .filter(function(process) {
                return isGateway(process);
              })
              .map(function(process) {
                return angular.extend(process, {
                  url: scheme + '://' + getGwAddr() + ':' + process.port + '/'
                });
              });

            dfd.resolve(gateways);
          });

        return dfd.promise;
      };

      svc.isGateway = function(process) {
        return isGateway(process);
      };

      svc.refreshGateway = function(orgId) {
        return $http.get("proxy/orgs/localhost/runningApis")
          .then(function(response) {
            return response.data;
          }, function(response) {
            return [];
          })
          .then(function(apis) {
            if (apis.length < 1) {
              return undefined;
            }

            localStorage.setItem('apim_local_gateway', apis[0].host);

            return getGatewayProcesses(preferredScheme(apis[0].schemes), apis[0].host);
          });
      };
    }
  ]);

