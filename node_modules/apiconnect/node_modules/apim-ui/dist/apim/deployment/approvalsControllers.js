/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var deployment = angular.module('apim.deployment');

deployment.controller('ApprovalsController', ['$scope', 'Approval', 'Environment', approvalsController]);

function approvalsController($scope, Approval, Environment) {
  $scope.envLoaded = false;
  $scope.envChecked = false;
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      var hashArray = window.location.hash.split("/");
      var envId = hashArray[2];
      if (!$scope.environment || $scope.environment.id != envId) {
        var filtered = $scope.environments.filter(function(env) {
          return env.id == envId;
        });
        if (filtered.length > 0) {
          $scope.envLoaded = true;
          $scope.setEnvironment(filtered[0]);
        }
      } else {
        $scope.envLoaded = true;
      }
      $scope.envChecked = true;
      // make sure we setup the correct space if we land directly on this page
      if (hashArray[3] == "spaces") {
        var spaceId = hashArray[4];
        if (spaceId != $scope.spaceId) {
          $scope.setSpace(spaceId, true);
        }
      } else if ($scope.spaceId) {
        $scope.setSpace("", true);
      }
    });
  });
  $scope.updateApprovals = function() {
    $scope.xhrProcessing = true;
    var queryArgs = {
      orgId: $scope.orgId,
      envId: $scope.environment.id
    };
    if ($scope.spaceId) {
      queryArgs.spaceId = $scope.spaceId;
    }
    $scope.approvals = Approval.query(queryArgs);
    $scope.approvals.$promise.then(function() {
      $scope.xhrProcessing = false;
    });
  };
  $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;

    var spaceId
    var hashArray = window.location.hash.split("/");
    if (hashArray[3] === "spaces") {
      spaceId = hashArray[4];
    }
    var envId = $scope.environment && $scope.environment.id || '';
    if ($scope.permissions[spaceId ? envId + '/<<_approvalAnySpace_>>/view' : '<<_approvalAnyEnv_>>/view'] ||
      $scope.permissions[spaceId ? spaceId + '/space_planSubscriptions/view' : envId + '/catalog_planSubscriptions/view'] ||
      $scope.permissions[spaceId ? envId + '/<<_deploymentAnySpace_>>/view' : '<<_deploymentAnyEnv_>>/view'] ||
      $scope.permissions[spaceId ? envId + '/<<_deploymentAnySpace_>>/manage' : '<<_deploymentAnyEnv_>>/manage'] ||
      $scope.permissions[spaceId ? spaceId + '/space_subscriptionApproval/view' : envId + '/space_subscriptionApproval/view'] ||
      $scope.permissions[spaceId ? spaceId + '/space_subscriptionApproval/manage' : envId + '/space_subscriptionApproval/manage']) {
        $scope.orderDirection = true;
        $scope.orderProp = "updatedAt";
        $scope.$watch('environment', function() {
          if (!$scope.environment) return;
          $scope.updateApprovals();
        });
    }
  });
};

deployment.controller('ApprovalController', ['$scope', '$modal', '$http', 'approvalTaskFilter', 'userDisplayNameFilter', approvalController]);

function approvalController($scope, $modal, $http, approvalTaskFilter, userDisplayNameFilter) {
  var createActivities;
  if ($scope.approval.taskType == "planSubscriptionApproval") {
    $scope.approval.operationLabel = approvalTaskFilter('subscribe');
    $scope.approval.primaryProduct = $scope.approval.taskProperties;
    createActivities = $scope.approval.activities.filter(function(activity) {
      return activity.action == "created";
    });
    if (createActivities.length > 0) {
      $scope.createActivity = createActivities[0];
      $scope.approval.updatedAt = $scope.createActivity.date;
    }
  } else if ($scope.approval.taskType === 'appPromotionApproval') {
    $scope.approval.operationLabel = approvalTaskFilter('promote');
    $scope.approval.primaryProduct = {
      productName: $scope.approval.taskProperties.appName,
      productVersion: '',
    };
    createActivities = $scope.approval.activities.filter(function(activity) {
      return activity.action == "created";
    });
    if (createActivities.length > 0) {
      $scope.createActivity = createActivities[0];
      $scope.approval.updatedAt = $scope.createActivity.date;
      $scope.approval.creatorName = $scope.createActivity.userId;
      $scope.approval.creatorUsername = $scope.createActivity.username;
    }
    $scope.approvable = ($scope.approval.availableActions.indexOf('approve') >= 0);
    $scope.rejectable = ($scope.approval.availableActions.indexOf('reject') >= 0);
    $scope.cancelable = ($scope.approval.availableActions.indexOf('cancel') >= 0);
  } else {
    createActivities = $scope.approval.activities.filter(function(activity) {
      return activity.action == "created";
    });
    if (createActivities.length > 0) {
      $scope.createActivity = createActivities[0];
      $scope.approval.updatedAt = $scope.createActivity.date;
      $scope.approval.operationLabel = approvalTaskFilter($scope.approval.taskProperties.operation);
      $scope.approval.creatorName = $scope.createActivity.displayName;
      $scope.approval.creatorUsername = $scope.createActivity.username;
    }
    var resolutionActivities = $scope.approval.activities.filter(function(activity) {
      return activity.action == "approved" || activity.action == "rejected" || activity.action == "cancelled";
    });
    if (resolutionActivities.length > 0) {
      $scope.resolution = resolutionActivities[0];
      $scope.approval.operationLabel = approvalTaskFilter($scope.approval.taskProperties.operation);
      if ($scope.resolution.comment) $scope.resolutionComment = JSON.parse($scope.resolution.comment).comment;
    }
    $scope.approval.primaryProduct = $scope.approval.taskProperties.primaryResource;
  }
  if (!$scope.approval.primaryProduct.version) {
    $scope.approval.primaryProduct.version = $scope.approval.primaryProduct.productVersion;
  }
  if ($scope.approval.availableActions && $scope.approval.availableActions.length > 0) {
    $scope.approvable = ($scope.approval.availableActions.indexOf('approve') >= 0);
    $scope.rejectable = ($scope.approval.availableActions.indexOf('reject') >= 0);
    $scope.cancelable = ($scope.approval.availableActions.indexOf('cancel') >= 0);
  }
  $scope.$watch('environments', function() {
    if (!$scope.environments) return;
    $scope.environments.$promise.then(function() {
      var thisEnvironment = $scope.environments.filter(function(environment) {
        return (($scope.approval.taskType == "planSubscriptionApproval" && environment.id == $scope.approval.envId) ||
          ($scope.approval.taskType == "productDeploymentApproval" && environment.id == $scope.approval.taskProperties.envId) ||
          ($scope.approval.taskType == "appPromotionApproval" && environment.id == $scope.approval.taskProperties.envId));
      });
      if (thisEnvironment.length > 0) $scope.approval.environment = thisEnvironment[0];
    });
  });
  $scope.approveRequest = function() {
    if ($scope.approval.taskType == "planSubscriptionApproval") {
      $http.put($scope.approval.url, {approve: true}).then(function() {
        $scope.approvals.splice($scope.approvals.indexOf($scope.approval), 1);
      });
    } else {
      $scope.action = 'approvalApprove';
      $scope.actionTitle = 'approvalApproveTitle';
      $modal.open({
        templateUrl: 'apim/deployment/partials/approval-action.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ApprovalActionController',
        size: 'lg',
        scope: $scope
      });
    }
  };
  $scope.rejectRequest = function() {
    if ($scope.approval.taskType == "planSubscriptionApproval") {
      $http.put($scope.approval.url, {approve: false}).then(function() {
        $scope.approvals.splice($scope.approvals.indexOf($scope.approval), 1);
      });
    } else {
      $scope.action = 'approvalReject';
      $scope.actionTitle = 'approvalRejectTitle';
      $modal.open({
        templateUrl: 'apim/deployment/partials/approval-action.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ApprovalActionController',
        size: 'lg',
        scope: $scope
      });
    }
  };
  $scope.cancelRequest = function() {
    $scope.action = 'approvalCancel';
    $scope.actionTitle = 'approvalCancelTitle';
    $modal.open({
      templateUrl: 'apim/deployment/partials/approval-action.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ApprovalActionController',
      size: 'lg',
      scope: $scope
    });
  };
};

deployment.controller('ApprovalActionController', ['$scope', '$modalInstance', 'DeployedPlan', 'approvalActionLabelFilter', 'userDisplayNameFilter', approvalActionController]);

function approvalActionController($scope, $modalInstance, DeployedPlan, approvalActionLabelFilter, userDisplayNameFilter) {
  $scope.cancel = function() {
    $modalInstance.dismiss('cancel');
  };
  $scope.enact = function() {
    var messageId = new Date().getTime();
    if ($scope.action == 'approvalApprove') {
      $scope.approval.$approve({
        taskId: $scope.approval.id
      }).then($scope.updateApprovals);
      $scope.$root.notifyUser('approvalApprovedNotification', [], "SUCCESS", true, messageId);
    } else if ($scope.action == 'approvalReject') {
      $scope.approval.$reject({
        taskId: $scope.approval.id
      }).then($scope.updateApprovals);
      $scope.$root.notifyUser('approvalRejectNotification', [], "SUCCESS", true, messageId);
    } else if ($scope.action == 'approvalCancel') {
      $scope.approval.$cancel({
        taskId: $scope.approval.id
      }).then($scope.updateApprovals);
      $scope.$root.notifyUser('approvalCancelNotification', [], "SUCCESS", true, messageId);
    }
    $modalInstance.close();
  };
};

