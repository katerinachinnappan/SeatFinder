/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

var deployment = angular.module('apim.deployment');

deployment.factory('DeployedPlan', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/environments/:envId/:published/plans/:documentId/:version/:action', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId'}, isArray:true},
      update: {
        method:'PUT',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({visibility: data.deploymentVisibility});
        }
      },
      publish: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'publish'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({visibility: data.deploymentVisibility});
        }
      },
      replace: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'replace', plan: '@plan'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      supersede: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'supersede', plan: '@plan'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      remove: {
        method:'DELETE',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version'}
      },
      archive: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'archive'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      deprecate: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'deprecate'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      retire: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'retire'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      stage: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'stage'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      migrate: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', published: 'published', action: 'migrate-subscription'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({subscriptions: data.subscriptions});
        }
      }
    });
  }]);

deployment.factory('DeployedProduct', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/environments/:envId/:spaces/:spaceId/:published/products/:productId/:action', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId'}, isArray:true},
      create: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId'} //use product-name:product-version
      },
      update: {
        method:'PUT',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({visibility: data.deploymentVisibility, plans: data.plans});
        }
      },
      publish: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'publish'},
        transformRequest: function(data, headersGetter) {
          var json = { visibility: data.deploymentVisibility, plans: data.plans };

          if(data.secureGatewayDeploymentInfo && data.secureGatewayDeploymentInfo.length > 0) {
            json.secureGatewayDeploymentInfo = data.secureGatewayDeploymentInfo.map(function(data) {
              return {
                gateway: data.gateway,
                apiId: data.apiId,
                destination: data.destination,
                spaceGUID: data.spaceGUID,
                orgGUID: data.orgGUID
              };
            });
          }

          return JSON.stringify(json);
        }
      },
      replace: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'replace'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify(data.$body);
        }
      },
      supersede: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'supersede'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify(data.$body);
        }
      },
      migration: {
        method:'PUT',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'set-migration'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify(data.$body);
        }
      },
      remove: {
        method:'DELETE',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId'}
      },
      archive: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'archive'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      deprecate: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'deprecate'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      retire: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'retire'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      stage: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', action: 'stage'},
        transformRequest: function(data, headersGetter) {
          return null;
        }
      },
      migrate: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', productId: '@productId', published: 'published', action: 'migrate-subscription'},
        transformRequest: function(data, headersGetter) {
          return JSON.stringify({subscriptions: data.subscriptions});
        }
      }
    });
  }]);

deployment.factory('DeployedApi', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/environments/:envId/apis/:documentId/:version/:action', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId'}, isArray:true},
      start: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'start'}
      },
      stop: {
        method:'POST',
        params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version', action: 'stop'}
      }
    });
  }]);

deployment.factory('DeployedPolicy', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/environments/:envId/policies/:name/:version', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId'}, isArray:true}
    });
  }]);

deployment.factory('DeployedGatewayPolicy', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/environments/:envId/gw-services/:gwServiceId/policies/:name/:version', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId', gwServiceId: '@gwServiceId'}, isArray:true}
    });
  }]);

deployment.factory('PlanApproval', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/environments/:envId/plans/:documentId/:version/tasks', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId', documentId: '@documentId', version: '@version'}, isArray:true}
    });
  }]);

deployment.factory('ProductApproval', ['$resource',
  function($resource) {
    return $resource('proxy/orgs/:orgId/environments/:envId/:spaces/:spaceId/products/:productId/tasks', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId', productId: '@productId'}, isArray:true}
    });
  }]);

deployment.factory('Approval', ['$resource',
  function($resource) {
    return $resource('proxy/:me/tasks/:taskId/:action', {}, {
      query: {method:'GET', params:{orgId: '@orgId', envId: '@envId', me: 'me'}, isArray: true},
      approve: {
        method:'POST',
        params:{taskId: '@taskId', action: 'approve'},
        transformRequest: function(data, headersGetter) {
          return (data.comment) ? JSON.stringify({comment: data.comment}) : null;
        }
      },
      reject: {
        method:'POST',
        params:{taskId: '@taskId', action: 'reject'},
        transformRequest: function(data, headersGetter) {
          return (data.comment) ? JSON.stringify({comment: data.comment}) : null;
        }
      },
      cancel: {
        method:'POST',
        params:{taskId: '@taskId', action: 'cancel'},
        transformRequest: function(data, headersGetter) {
          return (data.comment) ? JSON.stringify({comment: data.comment}) : null;
        }
      }
    });
  }]);

