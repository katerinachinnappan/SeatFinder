/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Filters */

var deployment = angular.module('apim.deployment');

deployment.filter('deploymentQuery', function() {
  return function(descriptors, query, documentType) {
    return descriptors.filter(function(descriptor) {
      return descriptor.productName && descriptor.productName.toLowerCase().indexOf(query.toLowerCase()) > -1;
    });
  };
});

deployment.filter("nameMatchFilter", function() {
  return function(versions, name) {
    if (!versions) return [];
    if (!name) return versions;
    return versions.filter(function(version) {
      return (version.productName == name);
    });
  };
});

deployment.filter('deploymentSubscriberCount', function() {
  return function(subscriptions, planVersion) {
    if (!subscriptions) return 0;
    if (!planVersion) return 0;
    return subscriptions.filter(function(subscription) {
      return (subscription.planId == planVersion.documentId && subscription.planVersion == planVersion.documentVersion);
    }).length;
  }
});

deployment.filter('deploymentSubscribers', function() {
  return function(subscriptions, planVersion) {
    if (!subscriptions) return [];
    if (!planVersion) return [];
    return subscriptions.filter(function(subscription) {
      return (subscription.planId == planVersion.documentId && subscription.planVersion == planVersion.documentVersion);
    });
  }
});

deployment.filter('deploymentNameOnlyQuery', function() {
  return function (descriptors, query) {
    if(!descriptors) return descriptors;
    if(!query) return descriptors;
    var term = query.toLowerCase();
    return descriptors.filter(function(descriptor) {
      return (descriptor.planName && descriptor.planName.toLowerCase().indexOf(term) > -1) ||
        (("" + descriptor.planVersion).indexOf(term) > -1) ||
        (descriptor.productName && descriptor.productName.toLowerCase().indexOf(term) > -1) ||
        (("" + descriptor.productVersion).indexOf(term) > -1) ||
        (descriptor.document && descriptor.document.info && descriptor.document.info.title && descriptor.document.info.title.toLowerCase().indexOf(term) > -1);
    });
  };
});

deployment.filter('publishOrRepublish', ['translateFilter', function(translateFilter) {
  return function (descriptor) {
    if (descriptor.deploymentState == "staged") return translateFilter('productPublish');
    return translateFilter('productRepublish');
  };
}]);

deployment.filter('deploymentStateForPublishTarget', function() {
  return function (descriptors, publishTarget) {
    if(!descriptors) return descriptors;
    var filtered = descriptors.filter(function(descriptor) {
      return (descriptor.envId == publishTarget.environmentId && (!descriptor.spaceId || descriptor.spaceId == publishTarget.spaceId));
    });
    if (filtered.length > 0) return filtered[0].deploymentState;
    return "unstaged";
  };
});

deployment.filter('deploymentStateForEnv', function() {
  return function (descriptors, environment) {
    if(!descriptors) return descriptors;
    var filtered = descriptors.filter(function(descriptor) {
      return (descriptor.envId == environment.id);
    });
    if (filtered.length > 0) return filtered[0].deploymentState;
    return "unstaged";
  };
});

deployment.filter('deploymentState', function() {
  return function (descriptors, status) {
    if(!descriptors) return descriptors;
    return descriptors.filter(function(descriptor) {
      return status[descriptor.deploymentState.toLowerCase()];
    });
  };
});

deployment.filter('deploymentPlanDigest', ['translateFilter', 'translatePluralityFilter', function(translateFilter, translatePluralityFilter) {
  return function (descriptors) {
    var published = descriptors.filter(function(descriptor) {
      return (descriptor.deploymentState == "published");
    });
    if (published.length > 0) {
      return translatePluralityFilter(published.length, 'planPublishedStateCount', 'count');
    } else {
      // nothing published, let's show deprecated counts
      var deprecated = descriptors.filter(function(descriptor) {
        return (descriptor.deploymentState == "deprecated");
      });
      if (deprecated.length > 0) {
        return translatePluralityFilter(deprecated.length, 'planDeprecatedStateCount', 'count');
      } else {
        // nothing published, let's show staged counts
        var staged = descriptors.filter(function(descriptor) {
          return (descriptor.deploymentState == "staged");
        });
        if (staged.length > 0) {
          return translatePluralityFilter(staged.length, 'planDeployedStateCount', 'count');
        } else {
          return translateFilter('planNoDeployedOrPublished');
        }
      }
    }
  }
}]);

deployment.filter('deploymentApiDigest', ['translatePluralityFilter', function(translatePluralityFilter) {
  return function (descriptors) {
    var running = descriptors.filter(function(descriptor) {
      return (descriptor.deploymentState == "running");
    });
    if (running.length > 0) {
      return translatePluralityFilter(running.length, 'apiRunningStateCount', 'count');
    } else {
      // nothing running, let's show suspended counts
      var suspended = descriptors.filter(function(descriptor) {
        return (descriptor.deploymentState == "suspended");
      });
      if (suspended.length > 0) {
        return translatePluralityFilter(suspended.length, 'apiSuspendedStateCount', 'count');
      } else {
        // nothing suspended, let's show stopped counts
        var stopped = descriptors.filter(function(descriptor) {
          return (descriptor.deploymentState == "stopped");
        });
        return translatePluralityFilter(stopped.length, 'apiStoppedStateCount', 'count');
      }
    }
  }
}]);

deployment.filter('deploymentMasterState', function() {
  return function (descriptors, documentType) {
    if (documentType == 'plans') {
      var published = descriptors.filter(function(descriptor) {
        return (descriptor.deploymentState == "published");
      });
      if (published.length > 0) {
        return "published";
      } else {
        var deprecated = descriptors.filter(function(descriptor) {
          return (descriptor.deploymentState == "deprecated");
        });
        if (deprecated.length > 0) {
          return "deprecated";
        } else {
          var deployed = descriptors.filter(function(descriptor) {
            return (descriptor.deploymentState == "staged");
          });
          if (deployed.length > 0) {
            return "staged";
          } else {
            return "";
          }
        }
      }
    } else {
      var running = descriptors.filter(function(descriptor) {
        return (descriptor.deploymentState == "running");
      });
      if (running.length > 0) {
        return "running";
      } else {
        var suspended = descriptors.filter(function(descriptor) {
          return (descriptor.deploymentState == "suspended");
        });
        if (suspended.length > 0) {
          return "suspended";
        } else {
          return "stopped";
        }
      }
    }
  }
});

deployment.filter('otherPublishedPlanVersions', function() {
  return function (planVersions, planVersion) {
    return planVersions.filter(function(thisPlanVersion) {
      return (thisPlanVersion.deploymentState == "published" && thisPlanVersion.deploymentPackageId != planVersion.deploymentPackageId);
    });
  }
});

deployment.filter('otherPublishedProductVersions', function() {
  return function (productVersions, productVersion) {
    return productVersions.filter(function(thisProductVersion) {
      return (thisProductVersion.deploymentState == "published" && thisProductVersion.deploymentPackageId != productVersion.deploymentPackageId);
    });
  }
});

deployment.filter('otherPublishedOrDeprecatedProductVersions', function() {
  return function (productVersions, productVersion) {
    return productVersions.filter(function(thisProductVersion) {
      return ((thisProductVersion.deploymentState == "published" || thisProductVersion.deploymentState == "deprecated") && thisProductVersion.deploymentPackageId != productVersion.deploymentPackageId);
    });
  }
});

deployment.filter('publishedProductVersions', function() {
  return function (productVersions) {
    return productVersions.filter(function(thisProductVersion) {
      return (thisProductVersion.deploymentState == "published");
    });
  }
});

deployment.filter('publishedProductVersionsExcludingPlan', function() {
  return function (productVersions, productVersion) {
    return productVersions.filter(function(thisProductVersion) {
      if (thisProductVersion.productName !== productVersion.productName || thisProductVersion.productVersion !== productVersion.productVersion) {
        return (thisProductVersion.deploymentState == "published");
      }
      // else, it's this product...
        // return it if it contains any other plans...
        return (Object.keys(productVersion.document.plans).length > 1);
    });
  }
});

deployment.filter('otherPublishedPlans', function() {
  return function (plans, productVersion, otherProductVersion, plan) {
    // is this the same product? If not, no filtering necessary
    if (productVersion.productName !== otherProductVersion.productName || productVersion.productVersion !== otherProductVersion.productVersion) {
      return plans;
    }
    var planName = (typeof plan === "string") ? plan : plan.planName;
    // otherwise, it's this product version - we need to strip out this plan
    var filteredKeys = Object.keys(plans).filter(function(thisPlanName) {
      return (thisPlanName !== planName);
    });
    var stripped = {};
    filteredKeys.forEach(function(key) {
      stripped[key] = plans[key];
    });
    return stripped;
  }
});

deployment.filter('otherPublishedPlansArray', function() {
  return function (plans, productVersion, otherProductVersion, plan) {
    // is this the same product? If not, no filtering necessary
    if (productVersion.productName !== otherProductVersion.productName || productVersion.productVersion !== otherProductVersion.productVersion) {
      return plans;
    }
    // otherwise, it's this product version - we need to strip out this plan
    return plans.filter(function(thisPlan) {
      return (thisPlan.planName !== plan.planName);
    });
  }
});

deployment.filter('deploymentAvailableToDigest', ['translateFilter', 'translateMultipleFilter', function(translateFilter, translateMultipleFilter) {
  return function (descriptor, property, productVersion) {
    if (!descriptor) return;
    var visibility = descriptor.deploymentVisibility;
    if (!visibility) visibility = descriptor.visibility;
    if (!visibility && productVersion) visibility = productVersion.visibility;
    if (!visibility && productVersion) visibility = productVersion.deploymentVisibility;
    if (!visibility) return;
    if (!visibility[property]) return;
    if (descriptor.deploymentState && descriptor.deploymentState != "published" && descriptor.deploymentState != "deprecated") return translateFilter('none');
    if (productVersion && productVersion.deploymentState != "published" && productVersion.deploymentState != "deprecated") return translateFilter('none');
    var visibilityObj = visibility[property];
    if (!visibilityObj.enabled) return translateFilter('none');
    if (visibilityObj.type == "none") return translateFilter('none');
    if (visibilityObj.type == "public") return translateFilter('productAvailableToEveryone');
    if (visibilityObj.type == "authenticated") return translateFilter('productAvailableToAuthenticated');
    if (!visibilityObj.orgs || visibilityObj.orgs.length == 0) {
      // if no orgs...
        if (!visibilityObj.tags || visibilityObj.tags.length == 0) return translateFilter('none');
      if (visibilityObj.tags.length == 1) return translateFilter('managementSubscribableByTag');
      if (visibilityObj.tags.length > 1) return translateMultipleFilter('managementSubscribableByTags', {tags: visibilityObj.tags.length});
    }
    if (!visibilityObj.tags || visibilityObj.tags.length == 0) {
      // if no tags...
        if (visibilityObj.orgs.length == 1) return translateFilter('managementSubscribableByOrg');
      if (visibilityObj.orgs.length > 1) return translateMultipleFilter('managementSubscribableByOrgs', {orgs: visibilityObj.orgs.length});
    }
    if (visibilityObj.orgs.length > 1 && visibilityObj.tags.length == 1) return translateMultipleFilter('managementSubscribableByOrgsTag', {orgs: visibilityObj.orgs.length});
    if (visibilityObj.orgs.length == 1 && visibilityObj.tags.length > 1) return translateMultipleFilter('managementSubscribableByOrgTags', {tags: visibilityObj.tags.length});
    if (visibilityObj.orgs.length == 1 && visibilityObj.tags.length == 1) return translateFilter('managementSubscribableByOrgTag');
    if (visibilityObj.orgs.length > 0 && visibilityObj.tags.length > 0) return translateMultipleFilter('managementSubscribableByOrgsTags', {orgs: visibilityObj.orgs.length, tags: visibilityObj.tags.length});
  }
}]);

deployment.filter('deploymentVisibleToDigest', ['translateFilter', 'translateMultipleFilter', function(translateFilter, translateMultipleFilter) {
  return function (descriptor) {
    if (!descriptor) return;
    if (!descriptor.deploymentVisibility) return;
    if (!descriptor.deploymentVisibility.view) return;
    if (descriptor.deploymentState != "published") return translateFilter('planNone');
    if (!descriptor.deploymentVisibility.view.enabled) return translateFilter('planNone');
    if (descriptor.deploymentVisibility.view.type == "none") return translateFilter('planNone');
    if (descriptor.deploymentVisibility.view.type == "authenticated") return translateFilter('planAuthenticated');
    if (descriptor.deploymentVisibility.view.type == "public") return translateFilter('planPublic');
  }
}]);

deployment.filter('deploymentNoDescriptors', ['translateFilter', function(translateFilter) {
  return function (descriptors, documentType, spaceId) {
    if (!descriptors || descriptors.length == 0) {
      if (documentType == "plans") return translateFilter(spaceId ? 'managementNoPlansInSpace' : 'managementNoPlansInEnvironment');
      if (documentType == "apis") return translateFilter(spaceId ? 'managementNoApisInSpace' : 'managementNoApisInEnvironment');
      if (documentType == "products") return translateFilter(spaceId ? 'managementNoProductsInSpace' : 'managementNoProductsInEnvironment');
      if (documentType == "policies") return translateFilter(spaceId ? 'managementNoPoliciesInSpace' : 'managementNoPoliciesInEnvironment');
    }
    if (documentType == "plans") return translateFilter(spaceId ? 'managementNoMatchingPlansInSpace' : 'managementNoMatchingPlansInEnvironment');
    if (documentType == "apis") return translateFilter(spaceId ? 'managementNoMatchingApisInSpace' : 'managementNoMatchingApisInEnvironment');
    if (documentType == "products") return translateFilter(spaceId ? 'managementNoMatchingProductsInSpace' : 'managementNoMatchingProductsInEnvironment');
    if (documentType == "policies") return translateFilter(spaceId ? 'managementNoMatchingPoliciesInSpace' : 'managementNoMatchingPoliciesInEnvironment');
  }
}]);

deployment.filter('deploymentReplaceNoDescriptors', ['translateFilter', function(translateFilter) {
  return function (descriptors) {
    if (!descriptors || descriptors.length == 0) return translateFilter('planPublishReplaceVersionNone');
    return translateFilter('planPublishReplaceVersionNoneMatching');
  }
}]);

deployment.filter('deploymentProductReplaceNoDescriptors', ['translateFilter', function(translateFilter) {
  return function (descriptors, planVersionQuery) {
    if (!descriptors || descriptors.length == 0 || planVersionQuery == "") return translateFilter('product_publish_version_none');
    return translateFilter('product_publish_version_none_matching');
  }
}]);

deployment.filter('deploymentReplaceNoAppSubscriptions', ['translateFilter', function(translateFilter) {
  return function (appSubscriptions) {
    if (!appSubscriptions || appSubscriptions.length == 0) return translateFilter('planPublishMigrateAppNone');
    return translateFilter('planPublishMigrateAppNoneMatching');
  }
}]);

deployment.filter('approvalQuery', function() {
  return function (approvals, query) {
    if(!approvals) return approvals;
    if(!query) return approvals;
    var term = query.toLowerCase();
    return approvals.filter(function(approval) {
      if (approval.taskType == "planSubscriptionApproval") {
        return (approval.operationLabel && approval.operationLabel.toLowerCase().indexOf(term) > -1) ||
          (approval.taskProperties.appName && approval.taskProperties.appName.toLowerCase().indexOf(term) > -1) ||
          (approval.environment && approval.environment.name.toLowerCase().indexOf(term) > -1) ||
          (approval.primaryProduct && approval.primaryProduct.productName.toLowerCase().indexOf(term) > -1) ||
          (approval.taskProperties.developerOrg && approval.taskProperties.developerOrg.toLowerCase().indexOf(term) > -1);
      } else {
        return (approval.operationLabel && approval.operationLabel.toLowerCase().indexOf(term) > -1) ||
          (approval.environment && approval.environment.name.toLowerCase().indexOf(term) > -1) ||
          (approval.primaryProduct && approval.primaryProduct.productName.toLowerCase().indexOf(term) > -1) ||
          (approval.taskProperties && approval.taskProperties.secondaryResource && approval.taskProperties.secondaryResource.productName.toLowerCase().indexOf(term) > -1) ||
          (approval.creatorName && approval.creatorName.toLowerCase().indexOf(term) > -1);
      }
    });
  };
});

deployment.filter('approvalTask', ['translateFilter', function(translateFilter) {
  return function (operation) {
    return translateFilter('approvalTask_' + operation);
  };
}]);

deployment.filter('approvalStatus', ['translateFilter', function(translateFilter) {
  return function (status) {
    if (status == "pending") return translateFilter("approvalPendingApproval");
    if (status == "approved") return translateFilter("approvalApprovedApproval");
    if (status == "rejected") return translateFilter("approvalRejectedApproval");
    if (status == "cancelled") return translateFilter("approvalCanceledApproval");
  };
}]);

deployment.filter('approvalTargetState', ['translateFilter', function(translateFilter) {
  return function (state) {
    return translateFilter('approvalTargetState_' + state);
  };
}]);

deployment.filter('approvalsNoApprovals', ['translateFilter', function(translateFilter) {
  return function (approvals) {
    if (!approvals || approvals.length == 0) return translateFilter('approvalsNoApprovals');
    return translateFilter('approvalsNoMatchingApprovals');
  }
}]);

deployment.filter('approvalActionLabel', ['translateFilter', function(translateFilter) {
  return function (action) {
    return translateFilter('managePublish');
  }
}]);

deployment.filter('supersededByObject', function() {
  return function(plan, productVersion, productVersions) {
    if (!productVersion || !productVersion.supersededByResponse) return {};
    var supersedingProductVersions = Object.keys(productVersion.supersededByResponse);
    var productName, productVersionNumber, planName, planShortName;
    for (var i = 0; i < supersedingProductVersions.length; i++) {
      var thisSupersedingProduct = productVersion.supersededByResponse[supersedingProductVersions[i]];
      var supersededPlans = Object.keys(thisSupersedingProduct);
      for (var j = 0; j < supersededPlans.length; j++) {
        if (supersededPlans[j] == plan.planName) {
          var superseder = productVersions.filter(function(version) {
            return (supersedingProductVersions[i] === version.productName + ":" + version.productVersion);
          });
          if (superseder.length > 0) {
            productName = superseder[0].productName;
            productVersionNumber = superseder[0].productVersion;
            planShortName = thisSupersedingProduct[supersededPlans[j]];
            planName = superseder[0].document?superseder[0].document.plans[planShortName].title:planShortName
            return {
              productName: productName,
              productVersion: productVersionNumber,
              planName: planName,
              planShortName: planShortName,
              object: superseder[0]
            };
          } else {
            return;
          }
        }
      }
    }
    return;
  }
});

deployment.filter('supersededBy', ['translateFilter', 'supersededByObjectFilter', function(translateFilter, supersededByObjectFilter) {
  return function(plan, productVersion, productVersions) {
    if (!productVersion || !productVersion.supersededByResponse) return "";
    var supersedingObject = supersededByObjectFilter(plan, productVersion, productVersions);
    if (!supersedingObject) return "";
    return "[" + translateFilter('manageMigrationTargetSubtext') + ": " + supersedingObject.productName + " " + supersedingObject.productVersion + ", " + supersedingObject.planName + "]";
  }
}]);

