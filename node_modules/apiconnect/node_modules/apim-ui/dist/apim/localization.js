/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apiconnect-assembly-localization', []);
angular.module('apiconnect-explorer-localization', []);
angular.module('localization', ['tmh.dynamicLocale', 'ngStorage'
]).config(['$translateProvider', '$localStorageProvider', '$windowProvider', 'tmhDynamicLocaleProvider',
function ($translateProvider, $localStorageProvider, $windowProvider, tmhDynamicLocaleProvider) {
  $translateProvider.useSanitizeValueStrategy('escaped');
  var enBundle = __inline(nls/en.json);
  var deBundle = __inline(nls/de.json);
  var esBundle = __inline(nls/es.json);
  var frBundle = __inline(nls/fr.json);
  var itBundle = __inline(nls/it.json);
  var jaBundle = __inline(nls/ja.json);
  var koBundle = __inline(nls/ko.json);
  var nlBundle = __inline(nls/nl.json);
  var ptBRBundle = __inline(nls/pt_BR.json);
  var trBundle = __inline(nls/tr.json);
  var zhBundle = __inline(nls/zh.json);
  var zhTWBundle = __inline(nls/zh_TW.json);
  $translateProvider.translations('en', enBundle);
  $translateProvider.translations('de', deBundle);
  $translateProvider.translations('es', esBundle);
  $translateProvider.translations('fr', frBundle);
  $translateProvider.translations('it', itBundle);
  $translateProvider.translations('ja', jaBundle);
  $translateProvider.translations('ko', koBundle);
  $translateProvider.translations('nl', nlBundle);
  $translateProvider.translations('pt_BR', ptBRBundle);
  $translateProvider.translations('tr', trBundle);
  $translateProvider.translations('zh', zhBundle);
  $translateProvider.translations('zh_TW', zhTWBundle);
  $translateProvider.registerAvailableLanguageKeys(['en', 'de', 'es', 'fr', 'it', 'ja', 'ko', 'nl', 'pt_BR', 'tr', 'zh', 'zh_TW'], {
    "en_*": 'en',
    "de_*": 'de',
    "es_*": 'es',
    "fr_*": 'fr',
    "it_*": 'it',
    "ja_*": 'ja',
    "ko_*": 'ko',
    "nl_*": 'nl',
    "tr_*": 'tr',
    "zh_CN": 'zh',
    "*": 'en'
  });

  // locale files
  tmhDynamicLocaleProvider.localeLocationPattern('apim/nls/locales/angular-locale_{{locale}}.js');

  // use browser local list if it's available
  var navLang = $windowProvider.$get().navigator || false;
  var locale = navLang.languages && navLang.languages[0] || navLang.language || navLang.userLanguage || 'en-us';

  if (navLang.languages) {
    $translateProvider.determinePreferredLanguage();
  } else {
    if (typeof(localStorage) !== "undefined") {
      var userLocale = localStorage.getItem("apim-client-locale");
      // check if we've got the session locale in global var
      // supports browsers that dont have the new language list
      if (window['apimSessionLocale']) {
        var adjusted = window['apimSessionLocale'].split('-').join('_');
        localStorage.setItem("apim-client-locale", adjusted);
        userLocale = adjusted;
      }
      if (userLocale) {
        $translateProvider.preferredLanguage(userLocale);
      } else {
        $translateProvider.determinePreferredLanguage();
      }
    } else {
      // no local storage - probably private browsing, do the best we can instead
      $translateProvider.determinePreferredLanguage();
    }
  }
  $translateProvider.fallbackLanguage('en');
  $localStorageProvider.set('userLocale', locale.toLowerCase());
}]);
