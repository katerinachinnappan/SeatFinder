/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.models')
  .directive('modelPropertyEditor', [
    function modelPropertyEditor() {
      return {
        restrict: 'E',
        replace: true,
        scope: {
          properties: '=',
          propertyTypes: '='
        },
        templateUrl: 'apim/models/partials/modelPropertyEditor.html',
        controller: ['$scope', function($scope) {
          $scope.modelId = {
            propertyId: null
          };
        }]
      };
    }
  ])
  .directive('modelPropertyEntry', [
    function() {
      return {
        replace: true,
        templateUrl: 'apim/models/partials/modelPropertyEntry.html',
        scope: {
          property: '=',
          propertyTypes: '=',
          modelId: '='
        },
        controller: ['$scope', function($scope) {
          $scope.validators = {
            propertyName: function() {
              var isInvalid = $scope.property.name.length && !(/^[\-_a-zA-Z0-9]+$/.test($scope.property.name));

              $scope.$emit('event:modelPropertyError', isInvalid);

              return isInvalid;
            }
          };

          $scope.propertyType = function(value) {
            var arr = $scope.isArray();
            if (arguments.length) {
              $scope.property.type = arr ? [value] : value;
            }
            var type = $scope.property.type;
            return (arr ? type[0] : type).toLowerCase();
          };

          $scope.isArray = function(value) {
            if (arguments.length) {
              var isArray = angular.isArray($scope.property.type);
              if (value && !isArray) {
                $scope.property.type = [$scope.property.type];
              } else if (!value && isArray) {
                $scope.property.type = $scope.property.type[0];
              }
              $scope.property.isArray = value;
            }

            return $scope.property.isArray;
          };

          function isIdType(type) {
            var allowedTypes = ['number', 'string'];
            return allowedTypes.indexOf(type) >= 0;
          };

          $scope.$watch('property.isId', function(newVal) {
            if (newVal) {
              $scope.property.required = true;
              $scope.isArray(false);
              $scope.modelId.propertyId = $scope.property.id;
            } else {
              $scope.modelId.propertyId = null;
            }
          });

          $scope.allowedTypes = function (property) {
            return $scope.propertyTypes.filter(function(type) {
              return !property.isId || isIdType(type);
            });
          }

          $scope.restoreProperty = function (prop) {
            prop.deleted = false;
          };

          $scope.deleteProperty = function (prop) {
            prop.deleted = true;
          };

          $scope.propertyCanBeId = function (property) {
            var cid = $scope.modelId.propertyId;

            return isIdType(property.type) && (
              cid === null || cid === property.id
            );
          };
        }]
      };
    }
  ]);

