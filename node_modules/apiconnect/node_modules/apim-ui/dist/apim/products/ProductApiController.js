/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.products').controller('ProductApiController', ['$scope', '$rootScope', 'rateLimitDisplayFilter', 'pathsToOperationsFilter', ProductApiController]);

function ProductApiController($scope, $rootScope, rateLimitDisplayFilter, pathsToOperationsFilter) {
  $scope.operations = [];
  $scope.$watch('apis', function() {
    if (!$scope.apis) return;
    $scope.apis.$promise.then(function() {
      var fullApi = $scope.apis.filter(function(api) {
        return (api.info['x-ibm-name'] == $scope.api.$$name && api.info.version == $scope.api.version);
      });
      if (fullApi.length == 1) {
        $scope.fullApi = fullApi[0];
        $scope.operations = pathsToOperationsFilter($scope.fullApi.paths);
      }
    });
  });
  $scope.isApiIncluded = function(api) {
    if (!$scope.plan) {
      // we aren't scoped by a plan, so let's assume yes...
        return true;
    }
    var filtered = $scope.plan.apis.filter(function(thisApi) {
      return (thisApi.hasOwnProperty(api.$$name) && thisApi[api.$$name].version == api.version);
    });
    return (filtered.length > 0);
  };
  $scope.isOperationIncluded = function(operation) {
    if (!$scope.api.operations) return true;

    var filtered = $scope.api.operations.filter(function(thisOperation) {
      if (thisOperation.operationId && operation.operationId && thisOperation.operationId == operation.operationId) return true;
      if (thisOperation.operation && operation.operation && thisOperation.operation.toLowerCase() == operation.operation.toLowerCase() &&
        thisOperation.path && operation.path && thisOperation.path.toLowerCase() == operation.path.toLowerCase()) return true;
    });
    return (filtered.length > 0);
  };
  $scope.rateLimitForOperation = function(operation) {
    // rate limit hierarchy, weakest to strongest
    // product, api, operation, plan, plan api, plan operation
    var rateLimit;
    if (operation['rate-limit']) {
      // plan operation first
      rateLimit = operation['rate-limit'];
    } else if ($scope.api['rate-limit']) {
      // plan api next
      rateLimit = $scope.api['rate-limit'];
    } else if ($scope.plan['rate-limit']) {
      // plan next
      rateLimit = $scope.plan['rate-limit'];
    } else if ($scope.product['rate-limit']) {
      // product last
      rateLimit = $scope.product['rate-limit'];
    } else {
      // finally, default to unlimited
      rateLimit = {count: 'unlimited'};
    }
    return rateLimitDisplayFilter(rateLimit);
  };
};

