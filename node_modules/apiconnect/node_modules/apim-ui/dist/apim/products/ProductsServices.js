/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

  function productFileHeader(requestConfig) {
    if (requestConfig.params && requestConfig.params.fileHeader) return requestConfig.params.fileHeader;
  }

angular.module('apim.products')
  .factory('Product', ['$resource',
    function($resource){
      return $resource('proxy/orgs/:orgId/products/:productVersion/:tags', {}, {
        query: {method: 'GET', params: {orgId: '@orgId', fields: 'DEFAULT,tags.name,tags.url'}, isArray: true},
        get: {method: 'GET', params: {orgId: '@orgId', productVersion: '@productVersion'}, isArray: false},
        create: {method: 'POST', params: {orgId: '@orgId'}, isArray: false},
        save: {method: 'PUT', params: {orgId: '@orgId', productVersion: '@productVersion', version: '@version'}, isArray: false,
          transformResponse: function(data, headersGetter) {
            var response = angular.fromJson(data);
            if (response.errors) return response;
            return null;
          }
        },
        createVersion: {method: 'POST', params: {orgId: '@orgId', productVersion: '@productVersion'}, isArray: false},
        deleteVersion: {method: 'DELETE', params: {orgId: '@orgId', productVersion: '@productVersion'}, isArray: false,
          headers: {
            'x-ibm-product-file': productFileHeader
          }
        },
      });
    }
  ])
  .factory('ProductTag', ['$resource',
    function($resource){
      return $resource('proxy/orgs/:orgId/products/:productVersion/tags', {}, {
        query: {method: 'GET', params: {orgId: '@orgId', fields: 'DEFAULT,tags.name,tags.url'}, isArray: true}
      });
    }
  ])
  .factory('Reference', ['$resource',
    function($resource){
      return $resource('proxy/orgs/:orgId/references/:ref', {}, {
        get: {method: 'GET', params: {orgId: '@orgId', ref: '@ref'}, isArray: false}
      });
    }
  ]).factory('ProductUtil', ['Product', function(Product) {
    return {
      containsApi: function(product, api) {
        if (!product || !product.apis) return false;
        var apiId = api.$$id || api.id;
        var apiNameRef = api.$$name || api.name;
        if (!apiNameRef && api.info) apiNameRef = api.info['x-ibm-name'] + ":" + api.info.version;
        var apiFile = api.$$ref || api.$ref;
        var apiRefNames = Object.keys(product.apis);
        for (var x = 0; x < apiRefNames.length; x++) {
          var apiRef = product.apis[apiRefNames[x]];
          if (apiRef.id && apiRef.id == apiId) return true;
          if (apiRef.name && apiRef.name == apiNameRef) return true;
          if (apiRef.$ref && apiRef.$ref == apiFile) return true;
        }
        return false;
      },
      getNewRefForApi: function(product, api) {
        var apiRef = api.$$name;
        if (!product || !product.apis) return apiRef;
        var suffix = 1;
        var apiRefBase = apiRef;
        while (product.apis[apiRef]) {
          apiRef = apiRefBase + "_" + suffix;
          suffix++;
        }
        return apiRef;
      },
      getUsedRefForApi: function(product, api) {
        if (!product || !product.apis) return;
        var apiId = api.$$id || api.id;
        var apiNameRef = api.$$name || api.name;
        if (!apiNameRef && api.info) apiNameRef = api.info['x-ibm-name'] + ":" + api.info.version;
        var apiFile = api.$$ref || api.$ref;
        var apiRefNames = Object.keys(product.apis);
        for (var x = 0; x < apiRefNames.length; x++) {
          var apiRef = product.apis[apiRefNames[x]];
          if (apiRef.id && apiRef.id == apiId) return apiRefNames[x];
          if (apiRef.name && apiRef.name == apiNameRef) return apiRefNames[x];
          if (apiRef.$ref && apiRef.$ref == apiFile) return apiRefNames[x];
        }
        return;
      },
      refreshProducts: function($scope) {
        $scope.$watch('currentOrg', function() {
          if (!$scope.currentOrg) return;
          $scope.xhrProcessing = true;
          $scope.products = Product.query({
            orgId: $scope.orgId
          });
          $scope.products.$promise.finally(function() {
            $scope.xhrProcessing = false;
          });
        });
      }
    }
  }]).factory('ProductCurrency', function($filter) {
    var currencies = {
      'AUD': {
        fractions: 2,
        symbol: '$',
        code: 'AUD',
        label: 'currencyAUD',
        stripeMinimum: 0.50
      },
      'CAD': {
        fractions: 2,
        symbol: '$',
        code: 'CAD',
        label: 'currencyCAD',
        stripeMinimum: 0.50
      },
      'DKK': {
        fractions: 2,
        symbol: 'kr.',
        code: 'DKK',
        label: 'currencyDKK',
        stripeMinimum: 2.50
      },
      'EUR': {
        fractions: 2,
        symbol: '€',
        code: 'EUR',
        label: 'currencyEUR',
        stripeMinimum: 0.50
      },
      'GBP': {
        fractions: 2,
        symbol: '£',
        code: 'GBP',
        label: 'currencyGBP',
        stripeMinimum: 0.30
      },
      'JPY': {
        fractions: 0,
        symbol: '¥',
        code: 'JPY',
        label: 'currencyJPY',
        stripeMinimum: 50
      },
      'NOK': {
        fractions: 2,
        symbol: 'kr',
        code: 'NOK',
        label: 'currencyNOK',
        stripeMinimum: 3
      },
      'SEK': {
        fractions: 2,
        symbol: 'kr',
        code: 'SEK',
        label: 'currencySEK',
        stripeMinimum: 3
      },
      'USD': {
        fractions: 2,
        symbol: '$',
        code: 'USD',
        label: 'currencyUSD',
        stripeMinimum: 0.50
      }
    };
    return {
      getCurrencies: function() {
        return currencies;
      },
      getSymbol: function(currency) {
        return currencies[currency].symbol;
      },
      getFractions: function(currency) {
        return currencies[currency].fractions;
      },
      getMinimum: function(currency) {
        return $filter('currency')(currencies[currency].stripeMinimum, currencies[currency].symbol);
      }
    }
  }
);
