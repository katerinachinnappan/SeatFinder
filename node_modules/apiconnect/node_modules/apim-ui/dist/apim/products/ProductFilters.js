/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.products').filter('productApis', function () {
  return function(apis) {
    if (!apis || apis.length < 2) return apis;
    var sortedApis = [];
    apis.forEach(function(api) {
      var apiName = Object.keys(api).filter(function(key) {
        return (key.indexOf('$$') != 0);
      });
      if (apiName.length != 1) return;
      apiName = apiName[0];
      api[apiName].$$name = apiName;
      sortedApis.push(api[apiName]);
    });
    return sortedApis;
  };
}).filter('countApis', function () {
  return function(planApis, productApis) {
    if (!productApis) return 0;
    if (!planApis || Object.keys(planApis).length == 0) return Object.keys(productApis).length;
    return Object.keys(planApis).length;
  };
}).filter('operationDisplayName', function () {
  return function(operation) {
    if (operation.operationId) return operation.operationId;
    if (operation.path && operation.operation) return operation.operation + ' ' + operation.path;
    if (operation.path) return operation.path;
  };
}).filter('rateLimitDisplay', ['translateFilter', function (translateFilter) {
  return function(rateLimit) {
    var rateLimitString = "";
    if (rateLimit.value) {
      rateLimitString = rateLimit.value;
    }
    if (rateLimit.count) {
      rateLimitString = rateLimit.count;
    }
    if (rateLimit['hard-limit'] == true) rateLimitString += ' ' + translateFilter('product_rate_limit_hard');
    return rateLimitString;
  };
}]).filter('approvalSwitchLabel', ['translateFilter', function (translateFilter) {
  return function(approval) {
    if (approval) return translateFilter('product_settings_default_approval_on');
    return translateFilter('product_settings_default_approval_off');
  };
}]).filter('hardLimitSwitchLabel', ['translateFilter', function (translateFilter) {
  return function(approval) {
    if (approval) return translateFilter('product_settings_hard_limit_on');
    return translateFilter('product_settings_hard_limit_off');
  };
}]).filter('apiOperationsSummary', ['translateFilter', function (translateFilter) {
  return function(api) {
    if (!api.operations) return translateFilter('product_apis_all');
    return translateFilter('product_apis_subset', {operationCount: api.operations.length});
  };
}]).filter('pathsToOperations', function () {
  return function(paths) {
    var operations = [];
    for (var path in paths) {
      for (var verb in paths[path]) {
        var operation = {
          path: path,
          operation: verb
        };
        if (paths[path][verb].operationId) operation.operationId = paths[path][verb].operationId;
        operations.push(operation);
      }
    }
    console.log(operations);
    return operations;
  };
}).filter('planSummary', ['$filter', 'translateFilter', 'translateMultipleFilter', 'rateLimitLabelFilter', 'ProductCurrency', function($filter, translateFilter, translateMultipleFilter, rateLimitLabelFilter, ProductCurrency) {
  return function(plan, monetization) {
    var summaryString = (plan.approval) ? translateFilter('product_plan_approval_required') : translateFilter('product_plan_no_approval_required');
    if (plan['rate-limits']) {
      Object.keys(plan['rate-limits']).forEach(function(rateLimitName) {
        summaryString += ", " + rateLimitLabelFilter(plan['rate-limits'][rateLimitName]).toLowerCase();
      });
    } else {
      summaryString += ', ' + rateLimitLabelFilter(plan['rate-limit']).toLowerCase();
    }
    var billingModel = plan['billing-model'];
    if (billingModel && monetization) {
      var summaryStringArray = [summaryString];
      if (Number.isInteger(billingModel.amount)) {
        var symbol = ProductCurrency.getSymbol(billingModel.currency);
        var fractions = ProductCurrency.getFractions(billingModel.currency);
        var currencyLocal = $filter('currency')(billingModel.amount / Math.pow(10, fractions), symbol);
        summaryStringArray.push(currencyLocal);
      }
      if (billingModel.model === 'stripe_monthly_fixed') {
        summaryStringArray[summaryStringArray.length-1] += ' ' + translateFilter('monetizationSubscriptionSummary').toLowerCase();
      }
      if (billingModel['trial-period-days']) {
        var trialString = billingModel['trial-period-days'] === 1 ? translateFilter('monetizationTrialSummarySingular') : translateMultipleFilter('monetizationTrialSummaryPlural', {
            count: billingModel['trial-period-days']
        });
        summaryStringArray.push(trialString.toLowerCase());
      }
      summaryString = summaryStringArray.join(', ');
    }
    return summaryString;
  };
}])
  .filter('productsQuery', function() {
    return function (products, query) {
      if(!products) return products;
      if(!query) return products;
      var term = query.toLowerCase();
      return products.filter(function(product) {
        return (product.info.title && product.info.title.toLowerCase().indexOf(term) > -1) ||
          (product.info.description && product.info.description.toLowerCase().indexOf(term) > -1);
      });
    };
  })
  .filter('resourcesQuery', function() {
    return function (resources, query) {
      if(!resources) return resources;
      if(!query) return resources;
      var term = query.toLowerCase();
      return resources.filter(function(resource) {
        return (resource.name && resource.name.toLowerCase().indexOf(term) > -1) ||
          (resource.path && resource.path.toLowerCase().indexOf(term) > -1) ||
          (resource.description && resource.description.toLowerCase().indexOf(term) > -1) ||
          (resource.verb && resource.verb.toLowerCase().indexOf(term) > -1);
      });
    };
  })
  .filter('noProducts', ['translateFilter', function(translateFilter) {
    return function (plans) {
      if (!plans || plans.length == 0) return translateFilter('noProductsDefined');
      return translateFilter('productsNoMatchingProducts');
    };
  }])
  .filter('rateLimitLabel', ['translateFilter', 'translateMultipleFilter', function(translateFilter, translateMultipleFilter) {
    return function(rateLimit) {
      if (!rateLimit || rateLimit == "unlimited" || !rateLimit.value || rateLimit.value == "unlimited") return translateFilter('rateLimitUnlimited');
      var extractInt = function(str) {
        var length = 1;
        var testStr = str.substring(0, length);
        while (!isNaN(testStr * 1) && length < str.length) {
          length++;
          testStr = str.substring(0, length);
        }
        var count = (length == 1) ? 1 : str.substring(0, length - 1) * 1;
        return [count, str.substring(length - 1)];
      };
      var message = "";
      var requests = rateLimit.value.split('/')[0] * 1;
      var countPerPeriod = rateLimit.value.split('/')[1];
      var extracted = extractInt(countPerPeriod);
      var count = extracted[0];
      var period = extracted[1];
      var key = "rateLimitString";
      key += (requests == 1) ? "Singular" : "Plural";
      key += (count == 1) ? "Singular" : "Plural";
      switch (period) {
        case "second":
          period = (count == 1) ? translateFilter("secondSingular") : translateFilter("secondPlural");
          break;
        case "minute":
          period = (count == 1) ? translateFilter("minuteSingular") : translateFilter("minutePlural");
          break;
        case "hour":
          period = (count == 1) ? translateFilter("hourSingular") : translateFilter("hourPlural");
          break;
        case "day":
          period = (count == 1) ? translateFilter("daySingular") : translateFilter("dayPlural");
          break;
        case "week":
          period = (count == 1) ? translateFilter("weekSingular") : translateFilter("weekPlural");
          break;
      }
      return translateMultipleFilter(key, {
        numCalls: requests,
        timePeriod: count,
        timeScale: period
      });
    };
  }])
  .filter('rateLimitDigest', ['translateFilter', 'translateMultipleFilter', function(translateFilter, translateMultipleFilter) {
    return function (planVersion, rateLimit, overridingRateLimit, resource) {
      if (overridingRateLimit) return translateFilter('rateLimitPlanLevel');
      if (!overridingRateLimit && !rateLimit && !resource) {
        // do we have any policies at all?
          if (planVersion.policies && planVersion.policies.length > 0) {
            // we have no rate limit for the plan, but we have others, therefore limited by resource
            return translateFilter('rateLimitResource');
          }
      }
      if (!rateLimit) return translateFilter('rateLimitUnlimited');
      var period = "";
      var key = "rateLimitString";
      key += (rateLimit.properties.requests == 1) ? "Singular" : "Plural";
      key += (rateLimit.properties.period == 1) ? "Singular" : "Plural";
      switch (rateLimit.properties.scale) {
        case "second":
          period = (rateLimit.properties.period == 1) ? translateFilter("secondSingular") : translateFilter("secondPlural");
          break;
        case "minute":
          period = (rateLimit.properties.period == 1) ? translateFilter("minuteSingular") : translateFilter("minutePlural");
          break;
        case "hour":
          period = (rateLimit.properties.period == 1) ? translateFilter("hourSingular") : translateFilter("hourPlural");
          break;
        case "day":
          period = (rateLimit.properties.period == 1) ? translateFilter("daySingular") : translateFilter("dayPlural");
          break;
        case "week":
          period = (rateLimit.properties.period == 1) ? translateFilter("weekSingular") : translateFilter("weekPlural");
          break;
      }
      return translateMultipleFilter(key, {
        numCalls: rateLimit.properties.requests,
        timePeriod: rateLimit.properties.period,
        timeScale: period
      });
    };
  }])
  .filter('planLevelTask', function() {
    return function (planVersion) {
      if (!planVersion) return null;
      if (!planVersion.tasks || planVersion.tasks.length == 0) return null;
      if (!planVersion.policies || planVersion.policies.length == 0) return null;
      var planLevelTask = planVersion.tasks.filter(function(task) {
        return task['if'] == "plan.id == '" + planVersion.planId + "'";
      });
      if (planLevelTask.length == 0) return null;
      return planLevelTask[0];
    };
  })
  .filter('planLevelRateLimit', ['planLevelTaskFilter', function(planLevelTaskFilter) {
    return function (planVersion) {
      var task = planLevelTaskFilter(planVersion);
      if (!task) return null;
      var policyName = task.policies[0];
      var planLevelPolicy = planVersion.policies.filter(function(policy) {
        return policy.name == policyName;
      });
      if (planLevelPolicy.length == 0) return null;
      return planLevelPolicy[0];
    };
  }])
  .filter('resourceLevelTask', function() {
    return function (planVersion, resource, api) {
      if (!planVersion) return null;
      if (!resource) return null;
      if (!planVersion.tasks || planVersion.tasks.length == 0) return null;
      if (!planVersion.policies || planVersion.policies.length == 0) return null;
      var resourceLevelTask = planVersion.tasks.filter(function(task) {
        var parts = task['if'].split(" && ");
        // if parts.length is 1 then we have a plan level task here, not resource level
        if (parts.length == 1) return false;
        for (var i = 0; i < parts.length; i++) {
          var nameValues = parts[i].split(" == ");
          if (nameValues[0] == "plan.id" && nameValues[1] != "'" + planVersion.planId + "'") return false;
          if (nameValues[0] == "request.soap.operation.localName" && nameValues[1] != "'" + resource.path + "'") return false;
          if (nameValues[0] == "request.soap.operation.namespace" && nameValues[1] != "'" + resource.soapNamespace + "'") return false;
          if (nameValues[0] == "request.path" && nameValues[1] != "'" + api.context + resource.path + "'") return false;
          if (nameValues[0] == "request.method" && nameValues[1] != "'" + resource.verb + "'") return false;
        }
        return true;
      });
      if (resourceLevelTask.length == 0) return null;
      return resourceLevelTask[0];
    };
  })
  .filter('resourceLevelRateLimit', ['resourceLevelTaskFilter', function(resourceLevelTaskFilter) {
    return function (planVersion, resource, api) {
      var task = resourceLevelTaskFilter(planVersion, resource, api);
      if (!task) return null;
      var policyName = task.policies[0];
      var resourceLevelPolicy = planVersion.policies.filter(function(policy) {
        return policy.name == policyName;
      });
      if (resourceLevelPolicy.length == 0) return null;
      return resourceLevelPolicy[0];
    };
  }])
  .filter('tagsForProduct', function() {
    return function (product, allTags, tags, favourites) {
      if(!product || !allTags || !tags) return [];
      var tagsForThisProduct = allTags.filter(function(tag) {
        for (var i = 0; i < tag.documents.length; i++) {
          if (tag.documents[i].documentUrl.indexOf('/products/' + product.id) >= 0) return true;
        }
        return false;
      });
      var filtered = tags.filter(function(tag) {
        var ret = false;
        var matching = tagsForThisProduct.filter(function(thisTag) {
          return (thisTag.name == tag.label);
        });
        if (matching.length == 0 && favourites && tag.value == "favourite") {
          var favouriteSection = favourites.product;
          if (favouriteSection) {
            ret = favouriteSection[product.id];
          }
        } else {
          ret = matching.length > 0;
        }
        return ret;
      });
      return filtered;
    };
  })
  .filter('productApis', function () {
    return function(apiRefs, apis) {
      if (!apiRefs) return [];
      if (!apis || apis.length == 0) return apis;
      var productApis = [];
      var sortedApis = [];
      apiRefs.forEach(function(apiRef) {
        var apiName = apiRef.$ref.split(':')[0];
        var apiVersion = apiRef.$ref.split(':')[1];
        var theApi = apis.filter(function(api) {
          return (api.info.title == apiName && api.info.version == apiVersion);
        });
        if (theApi.length > 0) productApis.push(theApi[0]);
      });
      return productApis;
    };
  }).filter('operationDisplayName', function () {
    return function(operation) {
      if (operation.operationId) return operation.operationId;
      if (operation.path && operation.verb) return operation.verb + ' ' + operation.path;
      if (operation.path && operation.operation) return operation.operation + ' ' + operation.path;
      if (operation.path) return operation.path;
    };
  }).filter('rateLimitDisplay', ['translateFilter', function (translateFilter) {
    return function(rateLimit) {
      var rateLimitString = "";
      if (rateLimit.value) {
        rateLimitString = rateLimit.value;
      }
      if (rateLimit.count) {
        rateLimitString = rateLimit.count;
      }
      if (rateLimit['hard-limit'] == true) rateLimitString += ' ' + translateFilter('product_rate_limit_hard');
      return rateLimitString;
    };
  }]).filter('approvalSwitchLabel', ['translateFilter', function (translateFilter) {
    return function(approval) {
      if (approval) return translateFilter('product_settings_default_approval_on');
      return translateFilter('product_settings_default_approval_off');
    };
  }]).filter('hardLimitSwitchLabel', ['translateFilter', function (translateFilter) {
    return function(approval) {
      if (approval) return translateFilter('product_settings_hard_limit_on');
      return translateFilter('product_settings_hard_limit_off');
    };
  }]).filter('apiOperationsSummary', ['translateFilter', function (translateFilter) {
    return function(api) {
      if (!api) return;
      if (!api.operations) return translateFilter('product_apis_all');
      return translateFilter(api.operations.length, 'product_apis_subset', 'operationCount');
    };
  }]).filter('pathsToOperations', function () {
    return function(paths) {
      var operations = [];
      for (var path in paths) {
        for (var verb in paths[path]) {
          var operation = {
            path: path,
            operation: verb
          };
          if (paths[path][verb].operationId) operation.operationId = paths[path][verb].operationId;
          operations.push(operation);
        }
      }
      console.log(operations);
      return operations;
    };
  }).filter('productName', function() {
    return function(products, name) {
      return products.filter(function(product) {
        return (product.info.name == name);
      });
    };
  }).filter('productTag', ['tagsForProductFilter', function(tagsForProductFilter) {
    return function (products, selectedTags, allTags, tags, favourites) {
      if(!products) return products;
      if (!selectedTags) return products;
      return products.filter(function(product) {
        var tagsForProduct = tagsForProductFilter(product, allTags, tags, favourites);
        if (!tagsForProduct || tagsForProduct.length == 0) return selectedTags.untagged;
        for (var i = 0; i < tagsForProduct.length; i++) {
          if (selectedTags[tagsForProduct[i].value]) return true;
        };
        return false;
      });
    };
  }]).filter('productTitleQuery', function() {
    return function (products, query) {
      if(!products) return products;
      if(!query) return products;
      var term = query.toLowerCase();
      return products.filter(function(product) {
        return (product.info && product.info.title && product.info.title.toLowerCase().indexOf(term) > -1);
      });
    };
  }).filter('pathToFilename', function() {
    return function(pathToFile) {
      var newPath = pathToFile.split(/[\\/]/);
      return newPath[newPath.length - 1];
    };
  }).filter('markdown', ['marked', function() {
    return function (raw) {
      return marked(raw) || ''
    };
  }]);
