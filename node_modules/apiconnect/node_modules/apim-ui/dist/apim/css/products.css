/********************************************************* {COPYRIGHT-TOP} ***
* Licensed Materials - Property of IBM
* 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
*
* (C) Copyright IBM Corporation 2017
*
* All Rights Reserved.
* US Government Users Restricted Rights - Use, duplication or disclosure
* restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************** {COPYRIGHT-END} **/
.apim .apiEditor,
.apim .policyEditor {
  top: 120px;
}
.apim .productEditor .contentArea,
.apim .apiEditor .contentArea {
  top: 28px;
}
.apim .detailsEditor .productSettingsExpander,
.apim .detailsEditor .productSettingsTitle,
.apim .detailsEditor .productSettingsApproval,
.apim .detailsEditor .productSettingsRateLimit,
.apim .detailsEditor .productSettingsDelete {
  display: inline-block;
  vertical-align: top;
}
.apim .detailsEditor .productSettingsRateLimit {
  width: 100%;
}
.apim .detailsEditor .productSettingsExpander {
  width: 32px;
}
.apim .detailsEditor .planApiDetails {
  padding-right: 20px;
}
.apim .detailsEditor .productPlanEditor {
  -moz-box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1);
  -webkit-box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1);
  border-radius: 3px;
  -webkit-box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1);
  box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1);
}
.apim .detailsEditor .productPlanEditor .rateLimitTitle {
  display: none;
}
.apim .detailsEditor .productPlanEditor .apiOperation .rateLimitTitle {
  display: inline-block;
}
.apim .detailsEditor .productPlanEditor .apiOperation .productAPIExpanderColumn {
  width: 44px;
}
.apim .detailsEditor .productAPIActionsColumn {
  display: inline-block;
  padding-right: 46px;
  width: 25px;
}
.apim .detailsEditor .productAPITitleColumn {
  display: inline-block;
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  line-height: 32px;
}
.apim .detailsEditor .productAPIExpanderColumn {
  display: inline-block;
  width: 22px;
}
.apim apim-burst-limit {
  min-width: 500px;
}
.apim apim-burst-limit .rateLimitInterval {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.6;
  -ms-flex: 0.6;
  flex: 0.6;
}
.apim apim-rate-limit {
  min-width: 500px;
}
.apim apim-rate-limit .rateLimitInterval {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
}
.apim apim-rate-limit .rateLimitHardLimit {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
  line-height: 44px;
  margin-left: 5px;
}
.apim .apiOperation apim-rate-limit,
.apim .apiOperation .rateLimitHardLimit {
  line-height: 24px;
}
.apim .productNameColumn {
  float: left;
}
.apim .card .productNameColumn {
  max-width: 70%;
  padding-left: 18px;
}
.apim .productView {
  padding: 0 20px;
}
.apim .productView .rateLimit {
  width: 40%;
}
.apim .productPlanEditor md-checkbox {
  margin-bottom: 0;
}
.apim .apiOperation {
  border-bottom: 0;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  padding: 5px 0;
}
.apim .apiOperation .operationName {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.6;
  -ms-flex: 0.6;
  flex: 0.6;
  white-space: nowrap;
}
.apim .apiOperation .rateLimit {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
}
.apim .productPlans .operationName:before {
  padding-left: 15px;
  padding-right: 5px;
}
.apim li:last-child apim-product-plan-api-editor .productApi {
  border-bottom: 1px solid #e5e5e5;
}
.apim .operationName {
  width: 50%;
}
.apim .showRateLimit .operationName {
  display: inline-block;
  overflow: hidden;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
  vertical-align: middle;
  white-space: nowrap;
  width: 200px;
}
.apim .showRateLimit .productAPIRateLimitColumn {
  -webkit-box-flex: 2;
  -moz-box-flex: 2;
  -o-box-flex: 2;
  box-flex: 2;
  -webkit-flex: 2;
  -ms-flex: 2;
  flex: 2;
}
.apim .productEditPane {
  background-color: #fff;
  padding: 20px;
}
.apim .productEditPane select {
  width: 100%;
}
.apim .productEditPane label {
  color: #bebebe;
  display: block;
  font-size: small;
  font-weight: 500;
  margin-bottom: 0;
  margin-top: 10px;
}
.apim .productEditPane .rateLimitHard {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
}
.apim .productEditPane .productApi .headline {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.apim h3 label {
  font-size: 24px;
  font-weight: 500;
  line-height: 1.1;
}
.apim .productTitle {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
  padding-right: 5px;
}
.apim .productTitle input {
  font-size: large;
}
.apim .apisHeader {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.apim .apisSection .apiTitleColumn {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.3;
  -ms-flex: 0.3;
  flex: 0.3;
}
.apim .apisSection .apiVersionColumn {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.15;
  -ms-flex: 0.15;
  flex: 0.15;
}
.apim .apisSection .apiOperationsColumn {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.15;
  -ms-flex: 0.15;
  flex: 0.15;
}
.apim .apisSection .apiRateLimitColumn {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.4;
  -ms-flex: 0.4;
  flex: 0.4;
}
.apim .deployedApi.running .deployedIndicator {
  background-color: #8dc935;
  border: 0;
  width: 10px;
  height: 10px;
}
.apim .deployedApi.stopped .deployedIndicator {
  background-color: #dcdcdc;
  border: 0;
  width: 10px;
  height: 10px;
}
.apim .deployedApi.suspended .deployedIndicator {
  border: 3px solid #dcdcdc;
  width: 10px;
  height: 10px;
}
.apim apim-burst-limit,
.apim apim-rate-limit {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.apim apim-burst-limit .rateLimitRequests,
.apim apim-rate-limit .rateLimitRequests,
.apim apim-burst-limit .rateLimitCount,
.apim apim-rate-limit .rateLimitCount {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.2;
  -ms-flex: 0.2;
  flex: 0.2;
}
.apim .detailsEditor .rateLimitRequests,
.apim .detailsEditor .rateLimitCount,
.apim .detailsEditor .rateLimitInterval {
  display: inline-block;
  margin: 0 5px 0 0;
}
.apim .productLastModifiedColumn,
.apim .productActionsColumn {
  float: right;
  margin-right: 18px;
}
.apim .productContactEmail,
.apim .productContactURL,
.apim .productLicenseLink {
  display: block;
}
.apim .productApi,
.apim .productPlan {
  border-top: 1px solid #e5e5e5;
}
.apim .productApi .headline,
.apim .productPlan .headline {
  padding: 5px 0;
}
.apim .productPlans .productApi.apiNotIncluded .operationName:before,
.apim .productPlans .apiOperation.operationNotIncluded .operationName:before,
.apim .productPlans .productApi.apiNotIncluded .headline:before {
  color: #bebebe;
  content: ' \2717';
}
.apim .productPlans .operationName:before,
.apim .productPlans .productApi .headline:before {
  color: #008000;
  content: ' \2713';
}
.apim .productApi.apiNotIncluded,
.apim .productApi.apiNotIncluded a {
  color: #bebebe;
}
.apim li:first-child apim-product-api-editor .productApi,
.apim li:first-child .productPlan {
  border-top: 0;
}
.apim .operationName,
.apim .rateLimit {
  display: inline-block;
}
.apim .productHeadline {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.apim .productEditPane .rateLimit,
.apim .productEditPane .productSubVis {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.apim .productHeadline,
.apim .productEditPane .productSubVis {
  -webkit-box-align: end;
  -moz-box-align: end;
  -o-box-align: end;
  -ms-flex-align: end;
  -webkit-align-items: flex-end;
  align-items: flex-end;
}
.apim .productEditPane .visibility,
.apim .productEditPane .subscribability {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.5;
  -ms-flex: 0.5;
  flex: 0.5;
}
.apim .productEditPane .rateLimitCalls,
.apim .productEditPane .rateLimitInterval {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.3;
  -ms-flex: 0.3;
  flex: 0.3;
}
.apim .productName,
.apim .productVersion {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 0.3;
  -ms-flex: 0.3;
  flex: 0.3;
  padding-left: 10px;
  padding-right: 5px;
}
.apim .deployedPlan .deployedIndicator,
.apim .deployedProduct .deployedIndicator,
.apim .environment .deployedIndicator,
.apim .environmentDropdown .deployedIndicator {
  background-color: #f0f0f0;
  border: 0;
  border-radius: 50%;
  width: 10px;
  height: 10px;
}
.apim .deployedPlan.published .deployedIndicator,
.apim .deployedPlan.running .deployedIndicator,
.apim .deployedProduct.published .deployedIndicator,
.apim .deployedProduct.running .deployedIndicator,
.apim .environment.published .deployedIndicator,
.apim .environment.running .deployedIndicator,
.apim .environmentDropdown.published .deployedIndicator {
  background-color: #8dc935;
  border: 0;
  width: 10px;
  height: 10px;
}
.apim .deployedPlan.deprecated .deployedIndicator,
.apim .deployedProduct.deprecated .deployedIndicator,
.apim .environment.deprecated .deployedIndicator,
.apim .environment.stopped .deployedIndicator,
.apim .environmentDropdown.deprecated .deployedIndicator {
  background-color: inherit;
  border: 3px solid #8dc935;
  width: 10px;
  height: 10px;
}
.apim .deployedPlan.deployed .deployedIndicator,
.apim .deployedPlan.staged .deployedIndicator,
.apim .deployedProduct.deployed .deployedIndicator,
.apim .deployedProduct.staged .deployedIndicator,
.apim .environment.deployed .deployedIndicator,
.apim .environment.staged .deployedIndicator,
.apim .environmentDropdown.deployed .deployedIndicator,
.apim .environmentDropdown.staged .deployedIndicator {
  background-color: #8dc935;
  border: 1px solid #8dc935;
  width: 10px;
  height: 10px;
}
.apim .deployedPlan.retired .deployedIndicator,
.apim .deployedProduct.retired .deployedIndicator,
.apim .environment.retired .deployedIndicator,
.apim .environmentDropdown.retired .deployedIndicator {
  background-color: inherit;
  border: 3px solid #dcdcdc;
  width: 10px;
  height: 10px;
}
.apim .deployedPlan.archived .deployedIndicator,
.apim .deployedProduct.archived .deployedIndicator,
.apim .environment.archived .deployedIndicator,
.apim .environmentDropdown.archived .deployedIndicator {
  background-color: inherit;
  border: 3px solid #f0f0f0;
  width: 10px;
  height: 10px;
}

/*# sourceMappingURL=data:application/json;base64, */
