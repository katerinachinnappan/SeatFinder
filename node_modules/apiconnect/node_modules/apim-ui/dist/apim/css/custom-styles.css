/********************************************************* {COPYRIGHT-TOP} ***
* Licensed Materials - Property of IBM
* 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
*
* (C) Copyright IBM Corporation 2017
*
* All Rights Reserved.
* US Government Users Restricted Rights - Use, duplication or disclosure
* restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************** {COPYRIGHT-END} **/
.apim table.scrollableTable {
  border: solid 1px #e0e0e0;
}
.apim table.scrollableTable thead,
.apim table.scrollableTable .thead {
  display: table;
  table-layout: fixed;
  width: 100%;
}
.apim table.scrollableTable tbody {
  display: block;
  max-height: 120px;
  overflow-x: hidden;
  overflow-y: scroll;
  position: relative;
  table-layout: fixed;
  width: 100%;
}
.apim table.scrollableTable tbody tr.selected,
.apim table.scrollableTable tbody tr:hover {
  background-color: #ecefff;
}
.apim table.scrollableTable tr,
.apim table.scrollableTable tr:hover {
  border-color: #e0e0e0;
  border-left: 0;
  border-right: 0;
  -webkit-box-shadow: 0 0 rgba(0,0,0,0);
  box-shadow: 0 0 rgba(0,0,0,0);
  display: table;
  table-layout: fixed;
  width: 100%;
}
.apim table.scrollableTable tr td,
.apim table.scrollableTable tr:hover td {
  background-color: inherit;
}
.apim table.scrollableTable tr td,
.apim table.scrollableTable tr td:hover {
  background-color: inherit;
  border-color: #e0e0e0;
  -webkit-box-shadow: 0 0 rgba(0,0,0,0);
  box-shadow: 0 0 rgba(0,0,0,0);
  overflow: hidden;
}
.apim table.scrollableTable tr th {
  padding: 5px 10px;
}
.tooltipContainer .tooltip {
  display: inline-block;
  font-size: 14px;
  width: 300px;
}
.tooltipContainer .tooltip .tooltip-arrow::after {
  content: ' ';
  display: block;
  font-size: xx-large;
  position: relative;
  width: 75px;
  height: 75px;
}
.tooltipContainer .tooltip .tooltip-inner {
  max-width: none;
  text-align: inherit;
}
.tooltipContainer .tooltip.left .tooltip-arrow::after {
  left: -30px;
  top: -37px;
}
.tooltipContainer .tooltip.right {
  margin-left: 20px;
}
.tooltipContainer .tooltip.right .tooltip-arrow::after {
  left: -45px;
  top: -38px;
}
.tooltipContainer .tooltip.bottom {
  margin-top: 40px;
}
.tooltipContainer .tooltip.bottom .tooltip-arrow {
  left: 42%;
}
.tooltipContainer .tooltip.bottom .tooltip-arrow::after {
  left: -40px;
  top: -59px;
}
.tooltipContainer .tooltip.bottom .tooltip-inner {
  margin-left: 36px;
  width: 200px;
}
.tooltipContainer .tooltip.bottomGentooltip {
  margin-left: 36px;
  margin-top: -31px !important;
}
.exploreMenu .exploreMenuItem {
  cursor: pointer;
  padding-bottom: 10px;
  padding-left: 20px;
  padding-top: 10px;
  width: 400px;
}
.exploreMenu .exploreMenuItem li {
  color: #000;
  cursor: pointer;
}
.exploreMenu .exploreMenuItem .dropdown-header {
  padding-left: 20px;
}
.exploreMenu .exploreMenuItem :hover {
  background-color: #f2f2f2;
}
.exploreMenu hr {
  margin-bottom: 7px;
  margin-top: 0;
}
.gettingStarted {
  position: absolute;
  right: 15px;
  bottom: 130px;
  -webkit-transition: all 1s ease;
  -moz-transition: all 1s ease;
  -o-transition: all 1s ease;
  -ms-transition: all 1s ease;
  transition: all 1s ease;
  width: calc(100% - 80%);
}
.gettingStarted.ng-hide {
  width: 0;
  height: 0;
}
.gettingStarted a:hover,
.gettingStarted a:focus {
  text-decoration: underline;
}
.gettingStarted .wraplist {
  width: 100%;
}
.gettingStarted md-bottom-sheet.md-list {
  border: 1px solid #d8d8d8;
  padding: 0;
  -webkit-transition: all 1s linear;
  -moz-transition: all 1s linear;
  -o-transition: all 1s linear;
  -ms-transition: all 1s linear;
  transition: all 1s linear;
}
.gettingStarted md-bottom-sheet.md-list .md-subheader {
  border-bottom: 1px solid #d8d8d8;
  line-height: 20px;
}
.gettingStarted md-bottom-sheet.md-list .md-subheader .md-subheader-inner {
  padding: 16px 15px;
}
.gettingStarted md-bottom-sheet.md-list .md-subheader .md-subheader-inner .md-subheader-content {
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -o-box-orient: horizontal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}
.gettingStarted md-bottom-sheet.md-list md-list-item {
  padding-left: 15px;
  padding-right: 15px;
}
.gettingStarted md-bottom-sheet.md-list md-list-item .material-icons {
  font-size: 14px;
  margin-right: 4px;
  margin-top: 0;
  vertical-align: middle;
}
.gettingStarted md-bottom-sheet.md-list md-list-item .md-list-item-content:hover,
.gettingStarted md-bottom-sheet.md-list md-list-item .material-icons:hover {
  text-decoration: underline;
}
.gettingStarted md-bottom-sheet.md-list md-list-item.disabled {
  cursor: not-allowed;
  pointer-events: none;
}
.gettingStarted md-bottom-sheet.md-list md-list-item.disabled .md-list-item-content,
.gettingStarted md-bottom-sheet.md-list md-list-item.disabled .material-icons {
  color: #888 !important;
  cursor: not-allowed;
}
.gettingStarted md-bottom-sheet.md-list md-list-item.disabled > div {
  cursor: not-allowed;
  pointer-events: none;
}
.gettingStarted md-bottom-sheet.md-list md-list-item.completed .md-list-item-content {
  color: #444 !important;
}
.gettingStarted md-bottom-sheet.md-list md-list-item.completed .material-icons {
  color: #008000 !important;
}
.gettingStarted md-bottom-sheet.md-list md-list-item:last-child {
  border-bottom: none;
}
.gettingStarted md-icon {
  min-height: 0;
  min-width: 0;
  width: 14px;
  height: 14px;
}
.gettingStartedMinimized {
  position: absolute;
  right: 50px;
  bottom: 75px;
  opacity: 1;
  -ms-filter: none;
  filter: none;
  width: 25px;
  height: 25px;
  -webkit-transition: all 1s linear;
  -moz-transition: all 1s linear;
  -o-transition: all 1s linear;
  -ms-transition: all 1s linear;
  transition: all 1s linear;
}
.gettingStartedMinimized.ng-hide {
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
.noOverflow {
  overflow: hidden;
}
#sgTechPreviewTT {
  vertical-align: baseline;
}
.sg-copy-icon {
  margin-top: 18px;
}
.sg-gateways-column {
  position: absolute;
  top: 100px;
  bottom: 0;
  right: 0;
  left: 0;
  background-color: #fff;
  border-color: #e5e5e5;
  border-style: solid;
  border-width: 0 1px 0 0;
  display: inline-block;
  margin-left: 60px;
  margin-top: -25px;
  min-height: calc(100vh - 170px);
  overflow: auto;
  vertical-align: top;
  width: 280px;
}
.sg-details-page {
  background-color: #fff;
  display: inline-block;
  margin-left: 280px;
  min-height: calc(100vh - 170px);
  vertical-align: top;
  width: calc(100% - 280px);
}
.sg-hint {
  cursor: pointer;
  position: relative;
  z-index: 2;
}
.sg-hint .sg-hint-text {
  position: absolute;
  top: 20px;
  right: 20px;
  background-color: #f2f2f2;
  border-radius: 3px;
  -webkit-box-shadow: 5px 5px 10px 0 #d8d8d8;
  box-shadow: 5px 5px 10px 0 #d8d8d8;
  color: #000;
  font-size: 15px;
  line-height: 1.2;
  min-height: 100px;
  padding: 25px;
  width: calc(100% - 500px);
}
.sg-hint .sg-hint-text:after {
  position: absolute;
  right: 90px;
  bottom: 100px;
  border-bottom: 15px solid #f2f2f2;
  border-left: 15px solid transparent;
  border-right: 15px solid transparent;
  content: ' ';
  width: 0;
  height: 0;
}
.sg-hint p {
  margin-top: 6px;
}
.sg-hint .sg-hint-subtext {
  font-size: 14px;
}
.sg-step-section {
  overflow: auto;
  padding: 20px 40px;
}
ol.sg-steps {
  list-style-type: decimal;
  width: 100%;
}
ol.sg-steps li {
  color: #4b68fa;
  float: left;
  font-size: x-large;
  padding: 2px 0;
  width: 33.33%;
}
ol.sg-steps li span {
  color: #000;
  display: block;
  font-size: medium;
  width: 90%;
  word-wrap: break-word;
}
.sg-docker-command-layout {
  display: block;
  padding-bottom: 20px;
}
.sg-docker-install-command {
  width: 90%;
}
.sg-docker-update-command {
  width: 40%;
}
.sg-installer-table {
  width: 80%;
}
.sg-installer-platform-column {
  width: 30%;
}
.sg-installer-download-column {
  width: 30%;
}
.sg-installer-md5-column {
  width: 20%;
}
.sg-installer-size-column {
  width: 10%;
}
.sg-publish-api-column {
  width: 30%;
}
.sg-publish-url-column {
  width: 40%;
}
.sg-publish-securegateway-column {
  width: 30%;
}
.sg-publish-securegateway-column select {
  width: 80%;
}
.gettingStarted.secureGatewayTour {
  width: calc(100% - 78%);
}
.gettingStarted.secureGatewayTour md-list-item {
  min-height: 0;
}
.gettingStarted.secureGatewayTour md-list-item:before {
  min-height: 0;
}
.gettingStarted.secureGatewayTour .helpLink {
  margin: 0;
  padding: 0;
}
.gettingStarted.secureGatewayTour .helpLink .material-icons {
  font-size: 18px;
  margin: 0;
  text-align: right;
}
.gettingStarted.secureGatewayTour .wraplist {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
}
.gettingStarted.secureGatewayTour .wraplist .number {
  text-align: center;
  width: 5%;
}
.gettingStarted.secureGatewayTour .wraplist .number.currentStep {
  border-bottom: #000 solid 2px;
}
.gettingStarted.secureGatewayTour .wraplist .step {
  width: 90%;
}
.gettingStarted.secureGatewayTour .wraplist .md-list-item-content {
  color: inherit !important;
  width: 90%;
}
.gettingStarted.secureGatewayTour .wraplist .md-list-item-content div {
  float: left;
}
.gettingStarted.secureGatewayTour .wraplist .helpLink {
  width: 10%;
}
.gettingStarted.secureGatewayTour md-bottom-sheet.md-list md-list-item {
  height: auto;
  padding: 10px;
}
.gettingStarted.secureGatewayTour .sgTourDiagram img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 95%;
}

/*# sourceMappingURL=data:application/json;base64, */
