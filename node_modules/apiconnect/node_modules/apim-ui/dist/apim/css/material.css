/********************************************************* {COPYRIGHT-TOP} ***
* Licensed Materials - Property of IBM
* 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
*
* (C) Copyright IBM Corporation 2017
*
* All Rights Reserved.
* US Government Users Restricted Rights - Use, duplication or disclosure
* restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************** {COPYRIGHT-END} **/
.webapi .mainBanner md-sidenav.md-whiteframe-z2 {
  border-right: 1px solid #e5e5e5;
  -webkit-box-shadow: none;
  box-shadow: none;
}
.webapi md-switch {
  margin: 0;
}
.webapi .md-button {
  margin: 0 2px;
  text-transform: none;
}
.webapi .md-button button.md-default-theme.iconOnlyButton:not([disabled]):hover,
.webapi .md-button button.md-default-theme.iconOnlyButton:not([disabled]):focus {
  background: none;
}
.webapi .md-button:not([disabled]).md-focused,
.webapi .md-button:not([disabled]):hover {
  background-color: rgba(17,118,201,0.8);
}
.webapi .md-button:not([disabled]).cancelButton.md-focused,
.webapi .md-button:not([disabled]).cancelButton:hover {
  background-color: #ccd5d5;
}
.webapi[disabled] {
  background-color: #1176c9;
}
.webapi md-select {
  padding: 0;
}
.webapi md-input-container md-select-label {
  width: 100%;
}
.webapi md-option {
  height: 24px;
}
.offlineMode.apim .mainBanner md-sidenav {
  overflow: hidden !important;
}
.apim .mainBanner md-sidenav header {
  background-color: #1d3649;
  border-right: 1px solid rgba(255,255,255,0.2);
  color: #fff;
  height: 60px;
  overflow: hidden;
  padding: 0 13px 0 20px;
}
.apim .mainBanner md-sidenav h5 {
  padding: 16px 18px;
}
.apim .mainBanner md-sidenav .navHeader a {
  width: 100%;
}
.apim .mainBanner md-sidenav > section {
  height: calc(100% - 61px);
  overflow-y: auto;
}
.apim md-chip button:not(:disabled):hover {
  background: transparent;
}
.apim md-chips input[type='search'] {
  background: none;
  border: 0;
  padding: 10px;
}
.apim md-autocomplete input[type='search'] {
  background: #fff;
  border: 0;
  padding: 6px 10px;
}
.apim md-autocomplete button {
  display: none;
}
.apim .md-select-value *:first-child {
  max-width: 100%;
}
.apim md-input-container {
  margin-bottom: 0;
}
.apim md-input-container.md-input-focused .md-input {
  padding-bottom: 0;
}
.apim md-input-container .md-input {
  padding-bottom: 1px;
}
.apim md-input-container .md-errors-spacer {
  min-width: 0;
}
.apim md-input-container.hiddenLabel {
  margin-top: 0;
}
.apim md-input-container select {
  width: 100%;
}
.apim md-input-container.defaultPadding {
  padding: 2px 5px 10px;
}
.apim md-input-container.inlinePlaceholder {
  padding-bottom: 3px;
}
.apim md-input-container.inlinePlaceholder.md-icon-float.md-input-focused {
  margin-top: -16px;
}
.apim md-input-container.inlinePlaceholder label {
  display: none;
  margin-left: 10px;
  margin-top: 19px;
  -webkit-transform-origin: inherit;
  -moz-transform-origin: inherit;
  -o-transform-origin: inherit;
  -ms-transform-origin: inherit;
  transform-origin: inherit;
  -webkit-transform: inherit;
  -moz-transform: inherit;
  -o-transform: inherit;
  -ms-transform: inherit;
  transform: inherit;
  -webkit-transition: inheriit;
  -moz-transition: inheriit;
  -o-transition: inheriit;
  -ms-transition: inheriit;
  transition: inheriit;
}
.apim md-input-container.inlinePlaceholder input {
  line-height: normal;
  margin-top: 19px;
  max-height: 17px;
  padding-top: 0;
}
.apim md-toolbar {
  background-color: inherit;
  border-bottom: 1px solid #e5e5e5;
  color: inherit;
  min-height: inherit;
}
.apim md-toolbar h2 {
  color: inherit;
}
.apim md-toolbar-tools {
  height: auto;
  padding: 15px;
}
.apim md-dialog md-dialog-content {
  padding: 20px;
}
.apim md-dialog .md-actions .md-button {
  margin: 0 2px;
}
.apim .md-actions {
  border-top: 1px solid #e5e5e5;
  margin-top: 15px;
  min-height: inherit;
  padding: 19px 20px 20px;
}
.apim md-radio-button {
  margin: 0;
  margin-right: 10px;
}
.apim md-tabs md-ink-bar {
  background: #90d2fc;
  color: #90d2fc;
  height: 4px;
}
.apim md-menu-content label {
  color: #fff;
  margin-left: 5px;
}
.apim md-switch {
  margin: 0;
}
.apim md-switch.md-checked .md-thumb {
  background-color: #fff;
}
.apim .md-button {
  text-transform: none;
}
.apim md-whiteframe {
  margin: 10px;
}
.apim md-radio-group.row md-radio-button {
  display: inline-block;
}
.apim md-radio-group.horizontalRadioButtons md-radio-button {
  display: inline;
}
.apim label {
  word-wrap: break-word;
}
.apim .material-left-border {
  border-color: rgba(0,0,0,0.12);
  border-left: 1px solid;
}
.apim md-checkbox.md-checked .md-icon:after {
  display: block;
}
.apim md-input-container .md-placeholder:not(.md-select-label),
.apim md-input-container:not(.md-input-focused) label:not(.md-no-float) {
  color: #767676;
}
.apim md-input-container:not(.md-input-invalid).md-input-focused label,
.apim md-input-container.md-input-focused label:not(.md-no-float),
.apim md-input-container.md-input-has-value label:not(.md-no-float) {
  font-size: 12px;
}
.apim md-input-container.md-input-focused label:not(.md-no-float),
.apim md-input-container.md-input-has-value label:not(.md-no-float) {
  -webkit-transform: translate3d(0, 8px, 0);
  -moz-transform: translate3d(0, 8px, 0);
  -o-transform: translate3d(0, 8px, 0);
  -ms-transform: translate3d(0, 8px, 0);
  transform: translate3d(0, 8px, 0);
  -webkit-transform: translate3d(0, 8px, 0);
}
.apim md-input-container.clearPadding {
  padding: 0;
}
.apim md-input-container md-select,
.apim md-input-container select {
  margin: 2px 0;
  -webkit-box-ordinal-group: 2;
  -moz-box-ordinal-group: 2;
  -o-box-ordinal-group: 2;
  -ms-flex-order: 2;
  -webkit-order: 2;
  order: 2;
}
.apim md-input-container + md-input-container,
.apim md-switch + md-input-container {
  margin-left: 10px;
  -ms-flex-negative: 1;
}
.apim .catalogEndpoint md-input-container + md-input-container,
.apim .catalogEndpoint md-switch + md-input-container {
  margin-left: 0;
  -ms-flex-negative: 1;
}
.apim .layout-column md-input-container + md-input-container,
.apim .layout-column md-switch + md-input-container {
  padding-left: 0;
}
.apim legend.radioButtonLabel,
.apim md-input-container label {
  border-bottom: none;
  color: rgba(0,0,0,0.54);
  font-size: 14px;
  margin-bottom: 5px;
  padding-left: 2px;
}

/*# sourceMappingURL=data:application/json;base64, */
