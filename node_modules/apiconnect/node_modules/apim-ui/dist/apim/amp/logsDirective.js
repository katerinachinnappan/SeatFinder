/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apic.amp').component('apicAmpLogs', {
  bindings: {
    processes: '<',
    getLogs: '<'
  },
  templateUrl: 'apim/amp/partials/amp.logs.html',
  controller: [
    '$q',
    '$scope',
    '$interval',
    'ProcessManager',
    function ($q, $scope, $interval, ProcessManager) {
      var $ctrl = this;
      // used to avoid interval calls from getting stacked
      var pollLock = false;

      var processes = {
        gw: [],
        app: []
      };

      $ctrl.logs = {
        gw: [],
        app: []
      };

      $ctrl.$onChanges = updateProcesses;
      $ctrl.$onInit = function () {
        updateProcesses();
        fetchLogs();
      };

      function resetProcesses () {
        processes = {
          gw: [],
          app: []
        };
      }

      function updateProcesses () {
        var newProcesses = $ctrl.processes;
        newProcesses = Array.isArray(newProcesses) ? newProcesses : [];

        if (newProcesses.length) {
          resetProcesses();
        }

        newProcesses.forEach(function(process) {
          processes[process.gw ? 'gw' : 'app'].push(process);
        });
      }

      function fetchLogs () {
        if (pollLock || !$ctrl.getLogs) {
          return;
        }

        pollLock = true;
        $q.all(processes.gw.map(fetchLog).concat(processes.app.map(fetchLog)))
          .finally(function() {
            pollLock = false;
          });

        function fetchLog(service) {
          var logs = $ctrl.logs[service.gw ? 'gw' : 'app'];
          return ProcessManager.logs({service: service.name}).$promise
            .then(function(resp) {
              // filter out the 'no logs' messages send from the PM, and let just
              // the view show its no logs message.
                if (resp.logs === 'No logs available.') {
                  return;
                }

              if (logs.slice(-1)[0] !== resp.logs) {
                resp.logs.split('\n').forEach(function(log) {
                  logs.push(log);
                })
              }
            })
            .catch(function(resp) {
              logs.push(resp);
            });
        }
      }

      $interval(fetchLogs, 5000);
      fetchLogs();
    }
  ]
});

