/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.login').controller('LoginController', ['$scope', '$http', '$filter', '$timeout', '$q', 'FormFactor', 'SlugService', 'APIc', loginController]);

function loginController($scope, $http, $filter, $timeout, $q, FormFactor, SlugService, APIc) {
  function getURLParameter(param) {
    var regexString = "[\\#&\\?]" + param + "=([^&#\\?]*)",
      regex = new RegExp(regexString),
      results = regex.exec(window.location.href);

    return ((results == null) ? "" : results[1]);
  }

  $scope.focusBox = function(elementId) {
    var element = document.getElementById(elementId);
    if (element) {
      $timeout(function() {
        element.focus();
      });
    }
  };

  var userMessage = localStorage.getItem('apim_user_signup_message');
  if (userMessage) {
    localStorage.removeItem('apim_user_signup_message');
    $scope.userMessage = userMessage;
  }

  // need to know if we're on SaaS
  $scope.isSaaS = typeof isSaaS != "undefined" && isSaaS;
  if (!$scope.offlineMode) {
    // must find out the type of IDP we have
    $http.get("/v1/cloud/metadata/apimanager").then(function(response) {
      var data = response.data[0];

      if (data.formFactor) {
        $scope.isSaaS = FormFactor.isBluemix(data.formFactor);
      }
      $scope.metadata = data;
      if (data.idpWritable === true) {
        $scope.forgotEnabled = true;
      }
      var idpType = data.idpType;
      if (idpType == "saml") {
        $scope.redirecting = true;
        if (!(/j_security_check/.test(document.location.href))) {
          var locationUri = "saml/signon";
          if (document.location.search) {
            locationUri = locationUri + document.location.search;
          }
          window.location.assign(locationUri);
        }
      }
      else if (idpType == "authUrl") {
        $scope.authUrlMessage = $filter('translate')('authUrlExample', {authUrlName: data.idpRealm});
      }
      // switch to correct error message based on case
      $scope.caseSensitive = data.caseSensitive;
    });
  }
  // Decide which panel to show the user
  var validate = getURLParameter("validate");
  if (validate && validate === "true") {
    var mode = getURLParameter("mode");
    if (mode && mode == "invitedByEmail" ) {
      // use authURL login panel
      $scope.validateAuthURL = true;
      $scope.userDetails = {};
      $scope.authId = decodeURIComponent(getURLParameter("authId"));
      $scope.token = decodeURIComponent(getURLParameter("token"));
      $scope.username = decodeURIComponent(getURLParameter("username"));
    } else {
      // user account validation
      $scope.validating = true;
      if (getURLParameter("ldap")) {
        $scope.ldap = true;
      }
      $scope.userDetails = {};
      $scope.authId = decodeURIComponent(getURLParameter("authId"));
      $scope.token = decodeURIComponent(getURLParameter("token"));
      $scope.username = decodeURIComponent(getURLParameter("username"));
    }
  } else {
    var passwordReset = getURLParameter("resetPW");
    if (passwordReset && passwordReset === "true") {
      // handle password reset
      $scope.resettingPassword = true;
      $scope.resetDetails = {};
      $scope.authId = decodeURIComponent(getURLParameter("authId"));
      $scope.token = decodeURIComponent(getURLParameter("token"));
      $scope.username = decodeURIComponent(getURLParameter("username"));
      $scope.focusBox("input_reset_password");
    } else {
      // normal login - stash any deep link URL hash first
      try {
        var urlhash = window.location.hash;
        if (urlhash !== "") {
          localStorage.setItem("urlhash", urlhash);
        }
      } catch(e) {
      }

      // show credential error message
      if (/j_security_check/.test(document.location.href) || /error/.test(document.location.href)) {
        $scope.credentialError = true;
      }
    }
  }
  $scope.validatePassword = function(value) {
    if (!value) return;
    if (value.length < 6) {
      return false;
    }

    // No more than two identical letters in a row.
      for (var i = 0; i < value.length - 3; i++) {
        if (value.charAt(i) == value.charAt(i + 1) && value.charAt(i + 1) == value.charAt(i + 2)) {
          return false;
        }
      }

    // 3 sets of characters required
    var charsets = 0;
    if (/[a-z]/.test(value)) {
      charsets++;
    }

    if (/[A-Z]/.test(value)) {
      charsets++;
    }

    if (/[0-9]/.test(value)) {
      charsets++;
    }

    if (/[^A-Za-z0-9]/.test(value)) {
      charsets++;
    }

    return charsets >= 3;

  };

  $scope.validateUser = function() {
    var config = {
      "headers": {
        "Authorization": "Basic " + btoa($scope.authId + ":" + $scope.token),
        "Content-Type": "application/json"
      }
    };
    $http.post("/v1/users/" + $scope.username + "/verification", $scope.userDetails, config).then(function(data) {
      localStorage.setItem('apim_user_signup_message', $filter('translate')('apim_user_signup_success'));
      window.location.search = "";
    });
  };
  $scope.sendReset = function() {
    $scope.sendingReset = true;
    // see if we've loaded the context metadata already
    var waitForMetadata = $q.defer();
    if ($scope.metadata) {
      waitForMetadata.resolve($scope.metadata);
    } else {
      $http.get("/v1/cloud/metadata/apimanager").then(function(response) {
        var data = response.data[0];
        $scope.metadata = data;
        waitForMetadata.resolve($scope.metadata);
      });
    }
    waitForMetadata.promise.then(function(metadata) {
      var config = {
        "headers": {
          "Content-Type": "application/json"
        }
      };
      var localData = {
        email: $scope.remindEmail,
        idpId: metadata.id,
        context: "apimanager"
      };
      $http.post("/v1/users/requestPasswordReset", localData, config).then(function(data) {
        $scope.remindEmail = "";
        $scope.reminderSent = true;
      }, function(err) {
        $scope.remindEmail = "";
      });
    });
  };
  $scope.resetPassword = function() {
    $scope.sendingNewPassword = true;
    // see if we've loaded the context metadata already
    var waitForMetadata = $q.defer();
    if ($scope.metadata) {
      waitForMetadata.resolve($scope.metadata);
    } else {
      $http.get("/v1/cloud/metadata/apimanager").then(function(response) {
        var data = response.data[0];
        $scope.metadata = data;
        waitForMetadata.resolve($scope.metadata);
      });
    }
    waitForMetadata.promise.then(function(metadata) {
      var config = {
        "headers": {
          "Authorization": "Basic "  + btoa($scope.authId + ":" + $scope.token),
          "Content-Type": "application/json"
        }
      };
      $scope.resetDetails['idpId'] = metadata.id;
      $scope.resetDetails['context'] = "apimanager";
      $http.post("/v1/users/" + $scope.username + "/resetPassword", $scope.resetDetails, config).then(function(data) {
        // redirect after success
        window.location = "./";
      }, function(err) {
        $scope.sendingNewPassword = false;
      });
    });
  };



  $scope.toggleDedicatedLogin = function() {
    if ($scope.changingDefaultServer) {
      $scope.toggleDefaultServer();
    }
    $scope.showDedicatedLogin = !$scope.showDedicatedLogin;
  };

  $scope.saveDedicatedEnvironment = function() {
    var newEnv = $scope.bluemixEnv;
    newEnv.dedicated = true;
    newEnv.name = SlugService.createName(newEnv.displayName);
    if (newEnv.host.indexOf('://') > -1) {		//String protocol if provided
      newEnv.host = newEnv.host.substring(newEnv.host.indexOf('://') + 3);
    }
    APIc.servers.update({}, newEnv).$promise
      .then(function() {
        APIc.defaultServer.set({}, newEnv).$promise
          .then(function() {
            $scope.bluemixEnv = {};
            setEnvironments().then(function() {
              $scope.showDedicatedLogin = false;
            });
          });
      });
  };

  $scope.saveDefaultServer = function() {
    APIc.defaultServer.set({}, $scope.defaultEnv);
    $scope.toggleDefaultServer();
  };

  $scope.toggleDefaultServer = function() {
    $scope.changingDefaultServer = !$scope.changingDefaultServer;
  };

  $scope.dedicatedCancel = function() {
    $scope.showDedicatedLogin = false;
  };

  if ($scope.offlineMode) {
    $scope.bluemixEnv = {};
    $scope.changingDefaultServer = false;
    setEnvironments();
  }

  $scope.ready = true;

  function setEnvironments() {
    var compiledServers = [{
      displayName: 'IBM Cloud public',
      name: 'us-south',
      host: 'us-south.apiconnect.cloud.ibm.com'
    }];
    return APIc.defaultServer.get().$promise
      .then(function(server) {
        var defaultServer = null;
        return APIc.servers.query().$promise
          .then(function(servers) {
            for (var i=0; i < servers.length; i++) {
              if (servers[i].dedicated) {
                compiledServers.push(servers[i]);
                if (servers[i].name === server.name) {
                  defaultServer = servers[i];
                }
              }
            }
            if (!defaultServer) {
              defaultServer = compiledServers[0];
            }
            $scope.bluemixEnvs = compiledServers;
            $scope.defaultEnv = defaultServer;
            return;
          });
      });
  }
}

