/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.errors').controller('ErrorMessageController', ['$rootScope', '$scope', '$modalInstance', 'translateFilter', errorMessageController]);

function errorMessageController($rootScope, $scope, $modalInstance, translateFilter) {
  $scope.verboseErrors = false;
  $scope.okClick = function() {
    if ($scope.errorInfo && $scope.errorInfo.okPressed) {
      $scope.errorInfo.okPressed();
    }
    $modalInstance.close();
  };
  // process the error
  if (handleStandardError()) return;

  if (handleEmptyError()) return;
  // non standard message

  var responseMessage = "";
  var responseText = "";
  var error = $scope.errorInfo.error;
  if (error && error.message) responseMessage += error.message;
  if (error && error.responseText) {
  } else if (error && error.response && error.response.text) {
    responseText += error.response.text;
  } else if (error && error.response && error.response.data) {
    responseText += error.response.statusText || '';
    responseMessage += error.response.data;
  }

  responseText += error.responseText;
  $scope.responseMessage = responseMessage;
  $scope.responseText = responseText;
  $scope.collapseMessage = error.collapseMessage;
  $scope.showDetails = false;
  $scope.toggleDetails = function(state) {
    $scope.showDetails = !!state;
  };

  function getURLParameter(param) {
    var regexString = "[\\#&\\?]" + param + "=([^&#\\?]*)",
      regex = new RegExp(regexString),
      results = regex.exec(window.location.href);

    return ((results == null) ? "" : results[1]);
  };

  function handleEmptyError() {
    if (!$scope.errorInfo || !$scope.errorInfo.error || !$scope.errorInfo.error.response) return false;
    if ($scope.errorInfo.error.response.status == -1) {
      // empty response
      var responseText;
      if ($rootScope.offlineMode) {
        responseText = translateFilter('error_no_response_offline');
      } else {
        responseText = translateFilter('error_no_response_online');
      }
      $scope.responseText = responseText;
      return true;
    }
    return false;

  }

  function handleStandardError() {
    var ret = false;
    if ($scope.errorInfo.error && $scope.errorInfo.error.response && $scope.errorInfo.error.response.data) {
      var error = $scope.errorInfo.error;
      $scope.verboseErrors = getURLParameter("verboseErrors") === "true";
      // try to grab a JSON object
      var responseMessage = "";
      var responseText = "";
      try {
        if (error.response.status && $scope.verboseErrors) responseText += "Status: " + error.response.status + "<br/>";
        if (error.response.options && error.response.options.method && $scope.verboseErrors) responseMessage += "Method: " + error.response.options.method + "<br/>";
        if (error.response.config && error.response.config.method && $scope.verboseErrors) responseMessage += "Method: " + error.response.config.method + "<br/>";
        if (error.response.url && $scope.verboseErrors) responseMessage += "URL: " + error.response.url + "<br/>";
        if (error.response.config && error.response.config.url && $scope.verboseErrors) responseMessage += "URL: " + error.response.config.url + "<br/>";
        if (error.response.options && error.response.options.data) {
          if ($scope.verboseErrors) {
            var bodyJson = JSON.parse(error.response.options.data);
            $scope.verboseInfo = "Request body: <pre>" + JSON.stringify(bodyJson, null, '\t') + "</pre><br/>";
          }
        }
        var errObj = error.response.data;
        if (angular.isString(errObj)) {
          try {
            errObj = JSON.parse(error.response.data);
          } catch (e) {
            errObj = {error: error.response.data};
          }
        }
        if (angular.isObject(errObj.error)) {
          responseText = errObj.error.message;
        } else if (angular.isString(errObj.error)) {
          responseText = errObj.error;
        }
        if (angular.isArray(errObj.errors)) {
          var len = errObj.errors.length;
          var first = true;
          for (var i = 0; i < len; i++) {
            var err = errObj.errors[i];
            if (angular.isString(err)) {
              if (first) {
                responseText = err;
                first = false;
              } else {
                responseText += "<p>" + err + "</p>";
              }
            }
            if (angular.isObject(err)) {
              for (var key in err) {
                if (err.hasOwnProperty(key)) {
                  if (first) {
                    responseText = err[key];
                    first = false;
                  } else {
                    responseText += "<p>" + err[key] + "</p>";
                  }
                }
              } // end for
            }
          } // end for
        }
        if (errObj.id) $scope.errorId = "Error ID: " + errObj.id;
        $scope.responseMessage = responseMessage;
        $scope.responseText = responseText;
        ret = true;
      } catch (e) {
        ret = false;
      }
    }
    return (ret);
  }

};

