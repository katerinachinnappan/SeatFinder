/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/*
  * Must have parent element `<bx-radio-group>`, with children elements
  * `<bx-radio-group>`.
  * Parent group element can have the `data-name="name"` attribute to provide a
  * custom name for the buttons for form submission. If left empty, it will
  * automatically generate its own so that the radio button groupings work.
  *
  * bxRadioGroup
  * @attr ng-model - Required. This is the variable that gets updated when you
  *                  click on a button.
  * @attr ng-change - Optional. Do something when ng-model variable changes.
  *
  * bxRadioButton
  * @attr data-value - Required. This is the value that will propagate up to the
  *                   parent bx-radio-group main ng-model variable.
  * @attr data-label-text: The string that will go beside the radio input button.
  *
  *
  * Usage:
  *   <bx-radio-group ng-model="foo" ng-change="someFunction()">
  *     <bx-radio-button data-value='v1' data-label-text="Label 1">
  *     </bx-radio-button>
  *     <bx-radio-button data-value='v2' data-label-text="Label 2">
  *     </bx-radio-button>
  *     <bx-radio-button data-value='v3' data-label-text="Label 3">
  *     </bx-radio-button>
  *   </bx-radio-group>
  */
  angular.module('bluemix.components')
  .directive('bxRadioGroup', function() {
    return {
      restrict: 'E',
      transclude: true,
      templateUrl: 'apim/bluemix/components/radio-button/radio-group.html',
      scope: {
        groupName: '@',
        selectedValue: '=ngModel',
        modelOptions: '=?ngModelOptions'
      },
      controller: function($scope) {
        $scope.modelOptions = $scope.modelOptions || {};
        if (!$scope.groupName) {
          $scope.groupName = this.groupName = 'bx--radio-group-' + generateUUID();
        }
        this.groupName = $scope.groupName;
        this.selectedValue = $scope.selectedValue;
        if($scope.modelOptions.getterSetter) {
          this.selectedValue = $scope.selectedValue();
        }
        this.setSelectedValue = function(val) {
          if($scope.modelOptions.getterSetter) {
            $scope.selectedValue(val);
            return;
          }
          $scope.selectedValue = val;
        }
      },
      link: function(scope, elem, attr, ctrl) {},
    };
  })
  .directive('bxRadioButton', function() {
    return {
      restrict: 'E',
      // below line is important because we don't want people using just the
      // bx-radio buttons without having a group
      require: '^bxRadioGroup',
      // bx carbon uses a very specific series of classes to make the radio btn
      // look checked, it's:
      // `.bx--radio:checked + .bx--radio__label .bx--radio__appearance:before`
      // So you can't have the label wrapping the input element
      templateUrl: 'apim/bluemix/components/radio-button/radio-button.html',
      scope: {
        value: '@',
        labelText: '@',
        isDisabled: '=ngDisabled',
        ngChecked: '=?'
      },
      link: function(scope, elem, attr, ctrl) {
        scope.groupName = ctrl.groupName;
        scope.selectedValue = ctrl.selectedValue;
        scope.ngChecked = scope.ngChecked || scope.selectedValue === scope.value;
        scope.setSelectedValue = function() {
          scope.selectedValue = this.value;
          ctrl.setSelectedValue(this.value);
        };
      },
    };
  });

function generateUUID() {
  /*jslint bitwise: true */
    return ('000000' + (Math.random() * Math.pow(36, 8) << 0).toString(36))
    .slice(-6);
}

