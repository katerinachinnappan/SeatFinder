/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/**
  * Use this directive to create carbon style inputs
  *
  * Usage:
  * <bx-input-container>
  *   <label>username</label>
  *   <input type="text" name="blahblah"/>
  * </bx-input-container>
  *
  * Attributes:
  * 1. `bx-style-child`: 'false', html attributes are passed as string,
  *    use this to disable adding classes to childs according to Carbon style guide
  * 2. `bxAutoAccessibility`: 'false', disables accessibility to trigger
  */

  angular.module('bluemix.components')
  .directive('bxInputContainer', function($filter) {
    return {
      restrict: 'E',
      templateUrl: 'apim/bluemix/components/input-container/input-container.html',
      controller: function($scope, $element) {
        this.initLabelRequired = function() {
          $element.find('label').addClass('bx--form__label-required');
        };
      },
      replace: true,
      transclude: true,
      scope: {
        bxStyleChild: '@',
        bxAutoAccessibility: '@',
      },
      link: function(scope, elem) {
        var input = elem.find('input');
        var label = elem.find('label');
        var textarea = elem.find('textarea');

        if (scope.bxStyleChild !== 'false') {
          input.addClass('bx--text__input');
          label.addClass('bx--form__label');
          textarea.addClass('bx--textarea__input');
        }

        if (scope.bxAutoAccessibility !== 'false') {
          var noAccessibility = !input.attr('aria-label') && !label.attr('for');
          if (noAccessibility && input.length === 1) {
            input.attr('aria-label', $filter('translate')(label.text()));
          }
        }
      },
    };
  })
  .directive('input', function() {
    return {
      restrict: 'E',
      require: '^?bxInputContainer',
      link: function(scope, elem, attrs, containerCtrl) {
        if (!containerCtrl) {
          return;
        }
        if (attrs.required && !attrs.ngRequired) {
          // does not add * for dynamic ngRequires, this is needed
          // because with ngRequire, @require during link phase resolves to true
          containerCtrl.initLabelRequired();
        }
      },
    };
  });

function generateUUID() {
  /*jslint bitwise: true */
    return ('000000' +
      (Math.random() * Math.pow(36, 8) << 0).toString(36))
    .slice(-6);
}

