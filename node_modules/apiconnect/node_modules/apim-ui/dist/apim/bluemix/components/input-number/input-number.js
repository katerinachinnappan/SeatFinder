/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/**
  *
  * @ngdoc module
  * @name bluemix.components
  *
  * @description
  *
  * Bluemix Carbon Components module.
  *
  **/
  angular.module('bluemix.components')
/**
  *
  * @ngdoc component
  * @name bluemix.components.component:bxInputNumber
  *
  * @description
  *
  * Input number creates an <input type="number"/> element following
  * bluemix carbon styles, provides arrows to manipulate
  *
  * @example
  *
  * <bx-input-number
  *   ng-model="hours"
  *   step="1"
  *   min="0"
  *   max="23"
  * />
  *
  * @param {Number} step the increments of each add/minus
  * @param {Number} min minimum value for the input value
  * @param {Number} max maximum value for the input value
  * @param {Model} ngModel the model it binds to
  *
  **/
  .component('bxInputNumber', {
    bindings: {
      step: '@',
      min: '@',
      max: '@',
      ngModel: '=',
      ngModelOptions: '=?',
    },
    templateUrl: 'apim/bluemix/components/input-number/input-number.html',
    controller: function($interval, $timeout) {
      var $ctrl = this;
      var getterSetter, step, min, max, timeout, interval;

      $ctrl.$onInit = function() {
        $ctrl.ngModelOptions = $ctrl.ngModelOptions || {};
        getterSetter = ($ctrl.ngModelOptions &&
          $ctrl.ngModelOptions.getterSetter &&
          typeof $ctrl.ngModel === 'function') || false;
        // 0 step should be disallowed and should default to 1
        step = Number($ctrl.step) || 1;
        min = isFinite($ctrl.min) ? Number($ctrl.min) : false;
        max = isFinite($ctrl.max) ? Number($ctrl.max) : false;
      };

      $ctrl.add = function() {
        if (getterSetter) {
          $ctrl.ngModel(inBounds($ctrl.ngModel() + step));
        } else {
          $ctrl.ngModel = inBounds($ctrl.ngModel + step);
        }
      };

      $ctrl.minus = function() {
        if (getterSetter) {
          $ctrl.ngModel(inBounds($ctrl.ngModel() - step));
        } else {
          $ctrl.ngModel = inBounds($ctrl.ngModel - step);
        }
      };

      // allows mouse down to repeat add/minus
      $ctrl.mousedown = function(mathFn) {
        timeout = $timeout(function() {
          if (interval) {
            $interval.cancel(interval);
          }
          interval = $interval(mathFn, 100);
        }, 500);
      };

      $ctrl.mouseup = function() {
        $timeout.cancel(timeout);
        timeout = null;

        $interval.cancel(interval);
        interval = null;
      };

      function inBounds(val) {
        if (min !== false && val < min) {
          return min;
        }
        if (max !== false && val > max) {
          return max;
        }
        return val;
      }
    },
  });

