/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/**
  * Use this component to create bluemix type dropdown
  * Must have "bxDropdownOption" components as children for it to work
  * effectively.
  *
  * <bx-dropdown> component:
  * Use this component to set container area of dropdown
  *
  * Attributes:
  *  - selected-value: Optional. Set this attribute to bind selected value to
  *    outer scope variable, for example: use previously selected value from
  *    saved form data.
  *    Note: When `selected-val` attribute is same as one of the
  *    options' value, that option is set as default-selected.
  *
  *  - default-text: Optional. Set this attribute to show default message, such
  *    as: "Choose City". Value for default-text is 'undefined'
  *    Note: When default-text is present and !selected-val, default-text is set
  *    as default selected.
  *
  * <bx-dropdown-option> component:
  * Use this component as child element to `<bx-dropdown>` to set dropdown
  * options.
  *
  * Attributes:
  *  - opt-value: Required. Use this attribute to set option value.
  *  - opt-text Optional. Use this attribute to set option text you want user to
  *    see. Useful when you want to alter shown text.
  *    Note: when `opt-text` is not set explicitly, it is set to same value as
  *    `opt-value`
  *  - selected: Optional. Use this attribute, when `default-text` is not set on
  *    `<bx-dropdown>`, to set the option as selected by default.
  *
  * How to use:
  * - Simple use:
  *  ```html
  *  <bx-dropdown ng-model="{{preselectedVal}}">
  *    <bx-dropdown-option opt-value="23" opt-text="23"></bx-dropdown-option>
  *    <bx-dropdown-option opt-value="24" opt-text="24"></bx-dropdown-option>
  *  </bx-dropdown>
  *  ```
  * - Using with ng-repeat:
  *  ```html
  *  <bx-dropdown>
  *    <bx-dropdown-option opt-value="{{option.name}}"
  *      ng-repeat="option in [{name:'1'},{name:'2'},{name: '3'}]"
  *      opt-text="{{option.name+'0'}}">
  *    </bx-dropdown-option>
  *  </bx-dropdown>
  *  ```
  *
  */

  angular.module('bluemix.components')
  .component('bxDropdown', {
    bindings: {
      defaultText: '@',
      selectedVal: '=selectedValue'
    },
    controller: DropdownCtrl,
    templateUrl: 'apim/bluemix/components/dropdown/dropdown.template.html',
    transclude: true
  })
  .component('bxDropdownOption', {
    bindings: {
      optValue: '@',
      optText: '@',
      selected: '@'
    },
    controller: DropdownOptCtrl,
    templateUrl: 'apim/bluemix/components/dropdown/option.template.html',
    require: {
      ddCtrl: '^bxDropdown'
    }
  });

function DropdownCtrl($scope, $element, $document) {
  var ctrl = this;

  ctrl.$onInit = function() {
    ctrl.isDefaultSet = false;

    ctrl.setDefaultSelected = function(value, textToShow) {
      ctrl.setSelected(value, textToShow);
      ctrl.isDefaultSet = true;
    };

    ctrl.setSelected = function(value, textToShow) {
      ctrl.selectedVal = value;
      ctrl.textShown = textToShow || value;
    };

    ctrl.isSelectedValUndefined = function() {
      return angular.isUndefined(ctrl.selectedVal);
    };

    ctrl.getSelectedValue = function() {
      if (!ctrl.isSelectedValUndefined()) {
        return ctrl.selectedVal.toString();
      }
      return ctrl.selectedVal;
    };

    ctrl.getDefaultText = function() {
      return ctrl.defaultText;
    };

    ctrl.toggleDropdown = function() {
      $scope.isDropdownOpen = !$scope.isDropdownOpen;
    };
  };

  ctrl.$postLink = function() {
    if (ctrl.isSelectedValUndefined() && ctrl.defaultText) {
      ctrl.setDefaultSelected(undefined, ctrl.defaultText);
    }
  }

  var docClickHandler = function(event) {
    // close menu if clicked anywhere outside open menu
    var isDropdownClicked = $element[0].contains(event.target);
    if (isDropdownClicked) {
      return;
    }
    $scope.$apply(function() {
      $scope.isDropdownOpen = false;
    });
  };

  $scope.$watch('isDropdownOpen', function(newVal, oldVal) {
    if (newVal !== oldVal) {
      if (!newVal) {
        $document.off('click', docClickHandler);
        return;
      }
      $document.on('click', docClickHandler);
    }
  });
}

function DropdownOptCtrl() {
  var bxDropdownCtrl, preselectedVal;
  var ctrl = this;
  ctrl.$onInit = function() {
    bxDropdownCtrl = ctrl.ddCtrl;
    preselectedVal = bxDropdownCtrl.getSelectedValue();
    if (angular.isUndefined(ctrl.optText)) {
      ctrl.optText = ctrl.optValue;
    }
    if (!bxDropdownCtrl.isDefaultSet) {
      if (preselectedVal) {
        if (preselectedVal === ctrl.optValue) {
          bxDropdownCtrl.setDefaultSelected(ctrl.optValue, ctrl.optText);
        }
      } else if (ctrl.selected) {
        bxDropdownCtrl.setDefaultSelected(ctrl.optValue, ctrl.optText);
      }
    }
    ctrl.toggleSelected = function() {
      bxDropdownCtrl.setSelected(ctrl.optValue, ctrl.optText);
    };

    ctrl.isSelected = function(value) {
      return bxDropdownCtrl.getSelectedValue() === value;
    };
  }
}

