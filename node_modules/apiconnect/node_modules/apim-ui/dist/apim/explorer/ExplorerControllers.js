/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var explorer = angular.module('apim.explorer', []);

explorer.directive('apimLoadAndHideOnEnter', function () {
  return function (scope, element, attrs) {
    element.bind("keydown keypress", function (event) {
      if(event.which === 13) {
        scope.$apply(function() {
          scope.$$childHead.$mdAutocompleteCtrl.hidden = true;
          scope.loadContent(true);
        });
        event.preventDefault();
      }
    });
  };
});

explorer.controller('ApimExplorerController', ['$scope', '$rootScope', '$stateParams', '$timeout', '$http', 'translateFilter', 'Api', 'ComponentRegistry', ApimExplorerController]);

function ApimExplorerController($scope, $rootScope, $stateParams, $timeout, $http, translateFilter, Api, ComponentRegistry) {

  var self = this;

  $scope.resolver = ComponentRegistry;
  $scope.languages = ["curl"];

  $scope.apis = [];
  $scope.api = {};
  $scope.credentials = {};

  $scope.goBack = function() {
    window.history.back();
  };

  function refreshOfflineApis() {
    // sanity check - is the gateway still running?
      if (self.selectedItem && self.sources) {
        var filtered = self.sources.filter(function(source) {
          return (source.url === self.selectedItem.url);
        });
        if (filtered.length === 0) {
          // this gateway is no longer running according to the pm
          return;
        }
      }
    $scope.apis = [];
    $http.get("proxy/orgs/localhost/runningApis").then(function(response) {
      $scope.xhrProcessing = false;
      $scope.apis = response.data;
      $timeout(self.processApiParam);
    }, function(response) {
      $scope.xhrProcessing = false;
      $scope.apis = [];
    });
  };

  function refreshCatalogApis() {
    $scope.xhrProcessing = true;
    var url = "proxy/orgs/" + $scope.currentOrg.id + "/environments/" + self.selectedItem.catalog.id + "/apis";
    var apisPromise = $http({
      method: "GET",
      url: url
    });
    apisPromise.then(function(response) {
      $scope.xhrProcessing = false;
      var apis = [];
      response.data.forEach(function(api) {
        // filter to only running for now
        if (api.deploymentState && api.deploymentState.toLowerCase() !== "running") return;
        api.info = {
          name: api.apiName,
          title: api.apiTitle || api.apiName,
          version: api.apiVersion
        };
        api.url = url + "/" + api.apiId;
        api.$headers = {'Accept': 'application/vnd.ibm-apim.swagger2+json'};
        apis.push(api);
        if (self.selectedItem.catalog.testAppEnabled && self.selectedItem.catalog.testAppCredentials) {
          if (!$scope.explorerApps) {
            $scope.explorerApps = [];
          }
          $scope.explorerApps = [{
            name: "default",
            credentials: [{
              id: self.selectedItem.catalog.testAppCredentials.clientId,
              secret: self.selectedItem.catalog.testAppCredentials.clientSecret,
              redirectUri: ''
            }]
          }];
          $scope.$broadcast("apiconnect-explorer-client-credentials", self.selectedItem.catalog.testAppCredentials);
        }
      });
      $scope.apis = apis;
      $timeout(self.processApiParam);
    }, function(response) {
      $scope.xhrProcessing = false;
      $scope.apis = [];
    });
  };

  function refreshDraftApis() {
    $scope.$watch('currentOrg', function() {
      if (!$scope.currentOrg) return;
      var apisXhr = Api.query({
        orgId: $scope.orgId
      });
      apisXhr.$promise.then(function(data) {
        $scope.apis = data.map(function(api) {
          if (api.id) {
            api.url = "proxy/apimanager/orgs/" + $scope.currentOrg.id + "/apis/" + api.id + "?mode=swagger2";
          } else {
            api.url = "proxy/apimanager/orgs/" + $scope.currentOrg.id + "/apis/" + api.info['x-ibm-name'] + ":" + api.info.version + "?mode=swagger2";
          }
          return api;
        });
        $timeout(self.processApiParam);
      });
    });
  };

  $scope.loadUrl = function() {
    $scope.apiSource = 'url';
    $scope.xhrProcessing = true;
    $scope.apis = $http.get(self.searchText);
    $scope.apis.then(function(response) {
      $scope.xhrProcessing = false;
      if (angular.isArray(response.data)) {
        $scope.apis = response.data;
      } else {
        $scope.apis = [response.data];
      }
      $timeout(self.processApiParam);
    }, function(response) {
      $scope.xhrProcessing = false;
      $scope.apis = [];
    });
  };

  self.processApiParam = function() {
    var apiToAutoselect = $stateParams.api;
    if (!apiToAutoselect && $scope.apis && $scope.apis.length > 0) {
      $scope.api = $scope.apis[0];
    } else {
      var filtered = $scope.apis.filter(function(api) {
        if (api.info['x-ibm-name'] + ":" + api.info.version === apiToAutoselect) {
          return true;
        }
        if (api.info.title + ":" + api.info.version === apiToAutoselect) {
          return true;
        }
        return false;
      });
      if (filtered.length > 0) {
        $scope.api = filtered[0];
      }
    }
  };

  self.sources = [{
    name: translateFilter("explorerShowDrafts"),
    value: "drafts",
    display: translateFilter("explorerShowDrafts")
  }];

  var startingSource = self.sources[0];

  self.querySearch = function(query) {
    query = query.toLowerCase();
    return self.sources.filter(function(source) {
      return (source.name.toLowerCase().indexOf(query) >= 0 || (source.url && source.url.toLowerCase().indexOf(query) >= 0));
    });
  };

  $scope.loadContent = function(entered) {
    delete $scope.explorerApps;
    if (self.selectedItem) {
      if (self.selectedItem.value === "drafts") refreshDraftApis();
      if (self.selectedItem.value === "running") refreshOfflineApis();
      if (self.selectedItem.value === "catalog") refreshCatalogApis();
    } else if (entered && self.searchText && self.searchText.indexOf('http') === 0) {
      $scope.loadUrl();
    }
  };

  if ($scope.offlineMode) {
    // grab the local gateway
    $scope.$watch('processes', function() {
      if (!$scope.processes) return;
      var startingSource = self.sources[0];
      if (angular.isArray($scope.processes)) {
        // filter out any existing occurrences of this process
        self.sources = self.sources.filter(function(source) {
          return (source.value !== "running");
        });
        $scope.processes.forEach(function(process) {
          if (process.gw === true) {
            var gwaddr = localStorage.getItem('apim_local_gateway');
            var url = gwaddr ? 'https://' + gwaddr + '/' : process.url;
            var thisSource = {
              name: translateFilter("explorerShowRunning"),
              value: "running",
              url: url,
              display: translateFilter("explorerShowRunning") + " " + url
            };
            self.sources.push(thisSource);
            if (!$stateParams.source || $stateParams.source === 'running') startingSource = thisSource;
          }
        });
      }
      if (!self.selectedItem) {
        self.selectedItem = startingSource;
        $scope.loadContent();
      }
    });
  } else {
    // grab catalogs
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      // filter out any existing occurrences of these catalogs
      self.sources = self.sources.filter(function(source) {
        return (source.value !== "catalog");
      });
      $scope.environments.forEach(function(environment) {
        var url = location.protocol + "//" + location.host + "/orgs/" + $scope.currentOrg.name + "/catalogs/" + environment.shortName;
        var item = {
          name: environment.name + " " + translateFilter("explorerShowCatalog"),
          value: "catalog",
          url: url,
          display: environment.name + " " + translateFilter("explorerShowCatalog") + " " + url,
          catalog: environment
        };
        self.sources.push(item);
        if ($stateParams.source === environment.shortName) startingSource = item;
      });
      if (!self.selectedItem) {
        self.selectedItem = startingSource;
        $scope.loadContent();
      }
    });
  }
}

