/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Controllers */

var community = angular.module('apim.community', ['ngResource']);

community.controller('CommunityController', ['$scope', '$filter', '$q', '$stateParams', '$modal', 'DeveloperOrganization', 'App', 'ProviderApp', 'Subscriptions', 'DeployedProduct', 'UserRegistry', 'constructTagsFilter', CommunityController]);

function CommunityController($scope, $filter, $q, $stateParams, $modal, DeveloperOrganization, App, ProviderApp, Subscriptions, DeployedProduct, UserRegistry, constructTagsFilter) {

  $scope.query = "";
  if ($stateParams.filter) {
    $scope.query = $stateParams.filter;
  }

  $scope.hideToc = false;
  $scope.toggleToc = function() {
    $scope.hideToc = !$scope.hideToc;
  }

  $scope.openView = function(tab, query) {
    $scope.tab = tab;
    $scope.query = query;
  }

  $scope.envLoaded = false;
  $scope.envChecked = false;
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      var hashArray = window.location.hash.split("/");
      var envId = hashArray[2];
      if (!$scope.environment || $scope.environment.id != envId) {
        var filtered = $scope.environments.filter(function(env) {
          return env.id == envId;
        });
        if (filtered.length > 0) {
          $scope.setEnvironment(filtered[0]);
          $scope.envLoaded = true;
        }
      } else {
        $scope.envLoaded = true;
      }
      $scope.envChecked = true;
      // make sure we setup the correct space if we land directly on this page
      if (hashArray[3] == "spaces") {
        var spaceId = hashArray[4];
        if (spaceId != $scope.spaceId) {
          $scope.setSpace(spaceId, true);
        }
      } else if ($scope.spaceId) {
        $scope.setSpace("", true);
      }
    });
  });

  // TODO(jtary) this should at some point be adapted to use the general purpose
  //             select list component used on the draft pages.

  $scope.selectedOrgs = [];

  $scope.selectAllOrgs = function (val) {
    if (val !== undefined) {
      $scope.selectedOrgs = $scope.currentPageDeveloperOrgs.filter(function (org) {
        return org.selected(val, true);
      });

      return true;
    }

    return ($scope.currentPageDeveloperOrgs && $scope.currentPageDeveloperOrgs.length > 0 &&
      $scope.selectedOrgs.length === $scope.currentPageDeveloperOrgs.length);
  };

  $scope.processSelected = function (orgs) {
    var isSelected = function (org) {
      return org.selected();
    };

    orgs.forEach(function (org) {
      var __val = false;

      org.selected = function (val, skipUpdate) {
        if (val !== undefined) {
          __val = Boolean(val);
          if (!skipUpdate) {
            $scope.selectedOrgs = orgs.filter(isSelected);
          }
        }

        return __val;
      }
    });

    return orgs;
  };

  $scope.processTags = function() {
    var tags = [];
    var tagLookup = {};
    $scope.developerOrgs.forEach(function(developerOrg) {
      // convert the tags from all orgs into list of all tags with list of referenced orgs
      if (developerOrg.tags) {
        developerOrg.tags.forEach(function(tag) {
          if (!tagLookup[tag.name]) {
            tagLookup[tag.name] = {
              name: tag.name,
              documents: [{id: developerOrg.id, url: tag.url}]
            };
          }
        });
      }
    });
    // now convert lookup into usable array
    for (var tagName in tagLookup) {
      var tagInfo = tagLookup[tagName];
      tags.push(tagInfo);
    } // end for
    $scope.allTags = tags;
    $scope.tags = constructTagsFilter(tags, false, "tinyTag fixedWidthTag", true);
  };

  // Pagination
  $scope.pageSize = 100
  $scope.currentPage = 1

  $scope.resetCurrentPage = function() {
    $scope.currentPage = 1
  }

  // Developer orgs Pagination
  $scope.developerOrgsPageChanged = function (currentPage) {
    $scope.currentPage = currentPage
    $scope.selectedOrgs.filter(function (org) {
      return org.selected(false);
    });
    $scope.selectedOrgs = [];
    $scope.upperBound = currentPage * $scope.pageSize
    $scope.lowerBound = $scope.upperBound - $scope.pageSize
  };

  $scope.filterDeveloperOrgs = function(query) {
    var filteredDeveloperOrgs = $filter('communityDeveloperOrgsQuery')($scope.developerOrgs, query)
    $scope.totalItems = filteredDeveloperOrgs.length
    $scope.currentPageDeveloperOrgs = filteredDeveloperOrgs.slice($scope.lowerBound, $scope.upperBound)
    return $scope.currentPageDeveloperOrgs
  }

  $scope.refreshDeveloperOrgs = function() {
    $scope.loadingDeveloperOrgs = true
    var ret = null;
    if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_developers/view' : $scope.environment.id + '/catalog_developers/view']) {
      var queryArgs = {
        orgId: $scope.orgId,
        envId: $scope.environment.id
      };
      if ($scope.spaceId) {
        queryArgs.spaces = "spaces";
        queryArgs.spaceId = $scope.spaceId;
      }
      $scope.developerOrgs = DeveloperOrganization.query(queryArgs);
      ret = $scope.developerOrgs.$promise
        .then(function(developerOrgs) {
          $scope.totalItems = developerOrgs.length
          $scope.developerOrgsPageChanged($scope.currentPage)
          return developerOrgs
        })
        .then($scope.processSelected)
        .then($scope.processTags)
        .then(function() {
          $scope.developerOrgs.sort(function(a, b) {
            var displayNameA = a.displayName.toUpperCase(); // ignore upper and lowercase
            var displayNameB = b.displayName.toUpperCase(); // ignore upper and lowercase
            if (displayNameA < displayNameB) {
              return -1;
            }
            if (displayNameA > displayNameB) {
              return 1;
            }
            return 0;
          })
          delete $scope.loadingDeveloperOrgs
        });
    } else {
      var deferred = $q.defer();
      ret = deferred.promise;
      deferred.resolve();
    }
    return ret;
  };

  $scope.deleteDeveloperOrg = function(developerOrg) {
    $scope.loadingDeveloperOrgs = true;
      var timestamp = (new Date()).getTime();
      var messageId = "DELETE_DEV_ORG_" + timestamp;
      $scope.notifyUser('deletingDeveloperOrg', [], "BUSY", false, messageId);
      developerOrg.$delete({orgId: developerOrg.id}).then(function() {
        $scope.developerOrgs.splice($scope.developerOrgs.indexOf(developerOrg), 1);
        $scope.totalItems = $scope.developerOrgs.length
        $scope.processTags();
        $scope.developerOrgsPageChanged($scope.currentPage)
        $scope.notifyUser('deletedDeveloperOrg', [], "SUCCESS", true, messageId);
        delete $scope.loadingDeveloperOrgs
      }, function() {
        $scope.notifyUser('errorDeletingDeveloperOrg', [], "BUSY", false, messageId);
        delete $scope.loadingDeveloperOrgs
      });
  }

  // Apps Pagination
  $scope.appsPageChanged = function (currentPage) {
    $scope.currentPage = currentPage
    $scope.upperBound = currentPage * $scope.pageSize
    $scope.lowerBound = $scope.upperBound - $scope.pageSize
  };
  
  $scope.filterApps = function(query) {
    var filteredPageApps = $filter('communityApplicationsQuery')($scope.consumerApps, query, 'appName')
    $scope.totalItems = filteredPageApps.length
    $scope.currentPageApps = filteredPageApps.slice($scope.lowerBound, $scope.upperBound)
    return $scope.currentPageApps
  }

  $scope.refreshApps = function() {
    $scope.loadingApps = true;
    if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_applications/view' : $scope.environment.id + '/catalog_applications/view']) {
      var queryArgs = {
        orgId: $scope.orgId,
        envId: $scope.environment.id
      };
      if ($scope.spaceId) {
        queryArgs.spaces = "spaces";
        queryArgs.spaceId = $scope.spaceId;
      }
      $scope.consumerApps = App.query(queryArgs);
      $scope.consumerApps.$promise.then(function(applications) {
        $scope.totalItems = applications.length

        applications.forEach(function(application) {
          application.$$developerOrg = $scope.orgForId(application.orgId || application.orgID);
          application.$$developerOrgName = application.$$developerOrg && application.$$developerOrg.displayName;
        });

        $scope.consumerApps.sort(function(a, b) {
          var appNameA = a.appName.toUpperCase(); // ignore upper and lowercase
          var appNameB = b.appName.toUpperCase(); // ignore upper and lowercase
          if (appNameA < appNameB) {
            return -1;
          }
          if (appNameA > appNameB) {
            return 1;
          }
          return 0;
        })
        $scope.appsPageChanged($scope.currentPage)
        delete $scope.loadingApps
      });
    } else {
      var deferred = $q.defer();
      ret = deferred.promise;
      deferred.resolve();
      delete $scope.loadingApps
    }
  };

  $scope.refreshProviderApps = function() {
    var ret = null;
    if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_applications/view' : $scope.environment.id + '/catalog_applications/view']) {
      var queryArgs = {
        orgId: $scope.orgId,
        envId: $scope.environment.id
      };
      if ($scope.spaceId) {
        queryArgs.spaces = "spaces";
        queryArgs.spaceId = $scope.spaceId;
      }
      $scope.providerApps = ProviderApp.query(queryArgs);
      $scope.providerApps.$promise.then(function(applications) {
        applications.forEach(function(application) {
          application.$$developerOrg = $scope.orgForId(application.orgId || application.orgID);
          application.$$developerOrgName = application.$$developerOrg.displayName;
        });
      });
      ret = $scope.providerApps.$promise;
    } else {
      var deferred = $q.defer();
      ret = deferred.promise;
      deferred.resolve();
    }
    return ret;
  };

  // Subscriptions Pagination
  $scope.subscriptionsPageChanged = function (currentPage) {
    $scope.currentPage = currentPage
    $scope.upperBound = currentPage * $scope.pageSize
    $scope.lowerBound = $scope.upperBound - $scope.pageSize
  };

  $scope.filterSubscriptions = function(query) {
    var filteredPageSubscriptions = $filter('communitySubscriptionsQuery')($scope.subscriptions, query, '$$productName')
    $scope.totalItems = filteredPageSubscriptions.length
    $scope.currentPageSubscriptions = filteredPageSubscriptions.slice($scope.lowerBound, $scope.upperBound)
    return $scope.currentPageSubscriptions
  }
  //Hack to reach the scope of loadingSubscriptions from migrateVersion
  //$scope.$root is unreachable from the promise callback
  $scope.toggleLoadingSubscriptions = function() {
    $scope.loadingSubscriptions = !$scope.loadingSubscriptions
  }
  
  $scope.refreshSubscriptions = function() {
    $scope.loadingSubscriptions = true;
    var ret = null;
    if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_planSubscriptions/view' : $scope.environment.id + '/catalog_planSubscriptions/view']) {
      var queryArgs = {
        orgId: $scope.orgId,
        envId: $scope.environment.id
      };
      if ($scope.spaceId) {
        queryArgs.spaces = "spaces";
        queryArgs.spaceId = $scope.spaceId;
      }
      $scope.subscriptions = Subscriptions.query(queryArgs);
      $scope.subscriptions.$promise.then(function(subscriptions) {
        $scope.totalItems = subscriptions.length

        subscriptions.forEach(function(subscription) {
          subscription.$$developerOrg = $scope.orgForId(subscription.application.orgId || subscription.application.orgID);
          subscription.$$developerOrgName = subscription.$$developerOrg && subscription.$$developerOrg.displayName;
        });

        $scope.subscriptions.sort(function(a, b) {
          var subscriptionNameA = a.product.title.toUpperCase() + ' ' + a.product.version.toUpperCase() + ', ' + a.plan.title.toUpperCase(); // ignore upper and lowercase
          var subscriptionNameB = b.product.title.toUpperCase() + ' ' + b.product.version.toUpperCase() + ', ' + b.plan.title.toUpperCase(); // ignore upper and lowercase
          if (subscriptionNameA < subscriptionNameB) {
            return -1;
          }
          if (subscriptionNameA > subscriptionNameB) {
            return 1;
          }
          return 0;
        })
        $scope.subscriptionsPageChanged($scope.currentPage)
        delete $scope.loadingSubscriptions
      });
      ret = $scope.subscriptions.$promise;
    } else {
      var deferred = $q.defer();
      ret = deferred.promise;
      deferred.resolve();
      delete $scope.loadingSubscriptions
    }
    return ret;
  };

  $scope.refreshProducts = function() {
    var ret = null;
    var queryArgs = {
      orgId: $scope.orgId,
      envId: $scope.environment.id,
    };
    if ($scope.spaceId) {
      queryArgs.spaces = "spaces";
      queryArgs.spaceId = $scope.spaceId;
    }
    $scope.products = DeployedProduct.query(queryArgs);
    ret = $scope.products.$promise;
    return ret;
  };

  $scope.refreshRegistry = function() {
    $scope.registry = UserRegistry.get({
      orgId: $scope.orgId,
      idpId: $scope.environment.idp
    });
    $scope.registry.$promise.then(function(registry){
      $scope.idp = registry
    })
    return $scope.registry
  };

  var unwatch = $scope.$watch('environment', function() {
    if (!$scope.environment) return;
    unwatch();
    var unregister = $scope.$watch('permissions', function() {
      if (!$scope.permissions) return;
      unregister();
      // set default tab based on perms
      if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_developers/view' : $scope.environment.id + '/catalog_developers/view']) {
        $scope.tab = 1;
      } else if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_applications/view' : $scope.environment.id + '/catalog_applications/view']) {
        $scope.tab = 3;
      } else if ($scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_planSubscriptions/view' : $scope.environment.id + '/catalog_planSubscriptions/view']) {
        $scope.tab = 4;
      }
      // override tab based on passed param and permission check
      if ($stateParams.section) {
        if ($stateParams.section === 'apps' && $scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_applications/view' : $scope.environment.id + '/catalog_applications/view']) {
          $scope.tab = 3;
        } else if ($stateParams.section === 'subs' && $scope.permissions[$scope.spaceId ? $scope.spaceId + '/space_planSubscriptions/view' : $scope.environment.id + '/catalog_planSubscriptions/view']) {
          $scope.tab = 4;
        }
      }
    });
  });

  $scope.orgForId = function(orgId) {
    if ($scope.currentOrg.id === orgId) {
      // a provider org app
      return $scope.currentOrg;
    } else {
      // a consumer org app
      var filtered = $scope.developerOrgs.filter(function(devOrg) {
        return (devOrg.id === orgId);
      });
      if (filtered.length > 0) return filtered[0];
    }
  };

  $scope.sendMessage = function(devOrgs) {
    if (!Array.isArray(devOrgs)) {
      devOrgs = [devOrgs];
    }

    var rcpts = devOrgs.map(function (org) {
      return org.owner;
    });

    $scope.showMessenger(rcpts);
  };

  $scope.showMessenger = function(recipients) {
    $modal.open({
      controller: 'SendMessageController',
      templateUrl: 'apim/developers/partials/sendMessageDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        userList: function () { return recipients },
        orgId: function () { return $scope.orgId }
      }
    });
  };
};

community.controller('CommunityDeveloperOrganizationsController', ['$scope', '$modal', '$mdDialog', '$window', CommunityDeveloperOrganizationsController]);

function CommunityDeveloperOrganizationsController($scope, $modal, $mdDialog, $window) {
  $scope.sectionTitle = "subsection-developer-organizations";
  $scope.orderProp = 'displayName';
  $scope.resetCurrentPage()
  $scope.refreshRegistry()
  $scope.refreshDeveloperOrgs()
  $scope.addItem = function($event) {
    $modal.open({
      controller: 'AddOrgController',
      templateUrl: 'apim/developers/partials/addOrgDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        environment: function(){ return $scope.environment },
        orgId: function(){ return $scope.orgId },
        idp: function(){ return $scope.idp }
      }}).result.then(function() {
        // Dialog will stay on screen for errors and will always follow the good path
        // when the create works. We can then refresh the list of developers here
        $scope.refreshDeveloperOrgs()
      }, function() {
        // called when dialog is cancelled - nothing to do
      });
  };

  $scope.addBluemixItem = function($event) {
    $mdDialog.show({
      controller: 'AddBluemixOrgController',
      templateUrl: 'apim/developers/partials/addBluemixOrgDialog.html',
      parent: angular.element(document.body),
      targetEvent: $event,
      focusOnOpen: false,
      locals: {
        environment: $scope.environment,
        orgId: $scope.orgId
      }
    }).then(function() {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list of developers here
      $scope.refreshDeveloperOrgs()
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };
};

community.controller('CommunityDeveloperOrganizationController', ['$scope', '$filter', '$http', '$modal', '$mdDialog', 'communityUserDisplayNameFilter', 'convertTagsFilter', CommunityDeveloperOrganizationController]);

function CommunityDeveloperOrganizationController($scope, $filter, $http, $modal, $mdDialog, communityUserDisplayNameFilter, convertTagsFilter) {

  $scope.$watchCollection('developerOrg.tags', function() {
    $scope.orgTags = convertTagsFilter($scope.developerOrg.tags, false);
    $scope.developerOrg.$$tags = $scope.orgTags;
  });

  $scope.developerOrg.$$status = $filter('translate')($scope.developerOrg.status.toLowerCase());

  $scope.developerOrg.$$ownerName = communityUserDisplayNameFilter($scope.developerOrg.owner);

  $scope.editDeveloperOrg = function($event) {
    $modal.open({
      controller: 'CommunityDeveloperOrganizationEditorController',
      templateUrl: 'apim/community/partials/edit-developer-organization.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        name: function(){ return $scope.developerOrg.name },
        displayName: function(){ return $scope.developerOrg.displayName }
      }
    }).result.then(function(org) {
      $scope.developerOrg.name = org.name;
      $scope.developerOrg.displayName = org.displayName;
      $scope.saveDeveloperOrg();
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  $scope.saveDeveloperOrg = function() {
    $scope.$root.loadingDeveloperOrgs = true
    var timestamp = (new Date()).getTime();
    var messageId = "SAVE_DEV_ORG_" + timestamp;
    $scope.$root.notifyUser('updatingDeveloperOrg', [], "BUSY", false, messageId);

    // XXX(Phong): This is a hacky way of fixing the issue. It seems that after
    // the `$save()` invokes, the DOM automatically updates the modal and
    // triggers a digest. The payload passed back from the server does not
    // include owner information, so the `Owner` column goes blank.
      // The status goes blank as well and *is* passed back, and it is difficult
    // to track down the code that does that. This fix works but will stop
    // working once the application allows you to edit more than just the
    // DevOrg's `displayName`
    var originOrg = Object.assign({}, $scope.developerOrg);
    $scope.developerOrg.$save({orgId: $scope.developerOrg.id})
      .then(function(result) {
        $scope.developerOrg = Object.assign({}, originOrg, result);
        delete $scope.$root.loadingDeveloperOrgs
        $scope.refreshDeveloperOrgs()
        $scope.$root.notifyUser('savedDeveloperOrg', [], "SUCCESS", true, messageId);
      })
      .catch(function(e) {
        $scope.$root.notifyUser('errorSavingDeveloperOrg', [], "BUSY", false, messageId);
        delete $scope.$root.loadingDeveloperOrgs
      });
  };

  $scope.assignTag = function(tag) {
    if (tag.value == "favourite") {
      var dev = {
        displayName: $scope.developerOrg.displayName,
        id: $scope.developerOrg.id,
        name: $scope.developerOrg.name,
        orgType: $scope.developerOrg.orgType,
        envId: $scope.environment.id
      };
      $scope.setFavourite('developer', dev);
      $scope.processTags();
    } else {
      $http.post('proxy/orgs/' + $scope.developerOrg.id + '/tags', {name: tag.label}).then(function(tagObject) {
        $scope.developerOrg.tags.push(tagObject.data);
        $scope.processTags();
      });
    }
  };

  $scope.createTag = function($event) {
    if ($event.which == 13) {
      var existing = $scope.tags.filter(function(tag) {
        return (tag.label == $scope.newTag);
      });
      if (existing.length > 0) {
        $scope.tagDropdownOpen = false;
        return;
      }
      $http.post('proxy/orgs/' + $scope.developerOrg.id + '/tags', {name: $scope.newTag}).then(function(tagObject) {
        $scope.developerOrg.tags.push(tagObject.data);
        $scope.processTags();
      });
      $scope.newTag = "";
      $scope.tagDropdownOpen = false;
    }
  };

  $scope.deleteTag = function(tag) {
    if (tag.value == "favourite") {
      $scope.setFavourite('developer', $scope.developerOrg, true);
      $scope.processTags();
    } else {
      $http['delete']('proxy/orgs/' + $scope.developerOrg.id + '/tags/' + tag.label).then(function() {
        $scope.developerOrg.tags = $scope.developerOrg.tags.filter(function(thisTag) {
          return (thisTag.name != tag.value);
        });
        $scope.processTags();
      });
    }
  };

  $scope.resendInvite = function() {
    var timestamp = (new Date()).getTime();
    var messageId = "DevOrg_Invite_" + timestamp;
    $scope.notifyUser('sendingInvitations', [], "BUSY", false, messageId);
    $http.post("proxy/users/" + $scope.developerOrg.owner.id + "/resendInvite?idpOrganization=" + $scope.orgId + "&idpEnvironment=" + $scope.environment.id).success(function() {
      $scope.notifyUser('resendingInvitations', [], "SUCCESS", true, messageId);
    }).error(function() {
      $scope.notifyUser('errorResendingInvitations', [], "ERROR", false, messageId);
    });
  };

  $scope.changeOwner = function($event) {
    $modal.open({
      controller: 'AddUserDialogController',
      windowTemplateUrl: 'apim/partials/main-template.html',
      templateUrl: 'apim/users/partials/addUserDialog.html',
      scope: $scope,
      resolve: {
        addOwner: function() { return true; },
        changeOwner: function() { return true; },
        idpConfig: function () {
          return {
            id: $scope.idp.id,
            type: $scope.idp.type,
            context: $scope.environment.id
          }
        },
        orgId: function() { return $scope.orgId },
        envId: function() { return $scope.environment.id },
        roleList: function() { return [] },
        isCatalogUsers: function() { return true },
        spaceId: function() { return $scope.spaceId },
      },
    }).result.then(function(owner) {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list of developers here
      if (owner) {
        $scope.$root.loadingDeveloperOrgs = true
        $scope.developerOrg.$changeOwner({
          orgId: $scope.developerOrg.id,
          newOwnerId: owner.id
        }).then(function() {
          delete $scope.$root.loadingDeveloperOrgs
          $scope.refreshDeveloperOrgs()
        });
      }
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  $scope.deleteDeveloper = function() {
    $scope.confirmation = {
      titleKey: 'confirmDelete',
      messageKey: 'confirmDeleteOrg',
      confirmed: function() {
        $scope.deleteDeveloperOrg($scope.developerOrg)
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
};

community.controller('CommunityDeveloperOrganizationEditorController', ['$scope', '$modalInstance', 'name', 'displayName', CommunityDeveloperOrganizationEditorController]);

function CommunityDeveloperOrganizationEditorController($scope, $modalInstance, name, displayName) {
  $scope.org = {
    name: name,
    displayName: displayName,
  };

  $scope.update = function() {
    return $modalInstance.close({
      name: $scope.org.name,
      displayName: $scope.org.displayName,
    });
  };

  $scope.cancel = function() {
    $modalInstance.dismiss();
  };
};

community.controller('CommunityDevelopersController', ['$scope', CommunityDevelopersController]);

function CommunityDevelopersController($scope) {
  $scope.sectionTitle = "subsection-developers";
};

community.controller('CommunityApplicationsController', ['$scope', '$modal', CommunityApplicationsController]);

function CommunityApplicationsController($scope, $modal) {
  $scope.sectionTitle = "subsection-applications";
  $scope.orderProp = 'appName';
  $scope.resetCurrentPage()
  $scope.refreshApps()

  $scope.addItem = function($event) {
    $modal.open({
      templateUrl: 'apim/apps/partials/add-application.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AppCreateController',
      size: 'md',
      scope: $scope
    }).result.then(function() {
      $scope.refreshApps()
    });
  };
};

community.controller('CommunityApplicationController', ['$scope', '$modal', '$http', 'DeployedProduct', CommunityApplicationController]);

function CommunityApplicationController($scope, $modal, $http, DeployedProduct) {

  $scope.suspendApp = function() {
    $scope.confirmation = {
      title: 'subscriptionsSuspendApp',
      messageKey: 'appSuspensionHelp',
      confirmed: function() {
        $scope.$root.loadingApps = true;
        var spaceUrl = "";
        if ($scope.spaceId) {
          spaceUrl = "/spaces/" + $scope.spaceId;
        }
        $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + spaceUrl + "/consumerOrgs/" + $scope.application.$$developerOrg.id + "/apps/" + $scope.application.appId + "/suspend").success(function(app) {
          $scope.application.state = app.state;
          delete $scope.$root.loadingApps
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.resumeApp = function() {
    $scope.confirmation = {
      title: 'subscriptionsResumeApp',
      messageKey: 'appUnsuspensionHelp',
      confirmed: function() {
        $scope.$root.loadingApps = true;
        var spaceUrl = "";
        if ($scope.spaceId) {
          spaceUrl = "/spaces/" + $scope.spaceId;
        }
        $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + spaceUrl + "/consumerOrgs/" + $scope.application.$$developerOrg.id + "/apps/" + $scope.application.appId + "/resume").success(function(app) {
          $scope.application.state = app.state;
          delete $scope.$root.loadingApps
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.subscribeApp = function() {
    var modalInstance = $modal.open({
      templateUrl: 'apim/subscriptions/partials/subscribe.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'SubscribeController',
      size: 'md',
      scope: $scope,
      resolve: {
        currentOrg: function(){ return $scope.orgId },
        products: function(){
          $scope.loadingProducts = true
          $scope.refreshProducts().then(function(){
            delete $scope.loadingProducts
          })
          return $scope.products
        },
        applications: function(){ return $scope.consumerApps },
        subscriptions: function(){ return $scope.subscriptions },
      }
    });
    modalInstance.result.then(function() {
      $scope.$root.loadingApps = true;
      $scope.refreshSubscriptions().then(function(){
        delete $scope.$root.loadingApps;
      })
    });

  };

  $scope.deleteApp = function() {
    $scope.confirmation = {
      title: 'subscriptionsDeleteApplication',
      messageKey: 'subscriptionsDeleteApplicationDescription',
      confirmed: function() {
        $scope.$root.loadingApps = true;
        var spaceUrl = "";
        if ($scope.spaceId) {
          spaceUrl = "/spaces/" + $scope.spaceId;
        }
        $http.delete('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + spaceUrl + '/providerApps/' + $scope.application.appId).success(function () {
          delete $scope.$root.loadingApps
          $scope.refreshApps()
          $scope.refreshSubscriptions()
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
};

community.controller('CommunitySubscriptionsController', ['$scope', '$modal', '$http', 'DeployedProduct', CommunitySubscriptionsController]);

function CommunitySubscriptionsController($scope, $modal, $http, DeployedProduct) {
  $scope.sectionTitle = "subsection-subscriptions";
  $scope.orderProp = '$$productName';
  $scope.resetCurrentPage()
  $scope.refreshSubscriptions()

  $scope.addItem = function($event) {
    $modal.open({
      controller: 'CommunitySubscriptionCreateController',
      templateUrl: 'apim/community/partials/create-subscription.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        currentOrg: function(){ return $scope.orgId },
        products: function(){
          $scope.loadingProducts = true
          $scope.refreshProducts().then(function(){
            delete $scope.loadingProducts
          })
          return $scope.products
        },
        applications: function(){
          $scope.refreshApps()
          return $scope.consumerApps
        },
        subscriptions: function(){ return $scope.subscriptions },
      }
    }).result.then(function(result) {
      $scope.subscribeToPlan(result.application, result.plan, result.product);
    });
  };

  $scope.subscribeToPlan = function(app, planName, productVersion) {
    $scope.$root.loadingSubscriptions = true;
    var planURL = productVersion.url + "/plans/" + planName;
    var spaceUrl = "";
    if ($scope.spaceId) {
      spaceUrl = "/spaces/" + $scope.spaceId;
    }
    $http.post('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + spaceUrl + '/providerApps/' + app.appId + '/subscriptions', {planURL: planURL}).success(
      function() {
        delete $scope.$root.loadingSubscriptions;
        $scope.refreshSubscriptions()
      }).error(function() {
        delete $scope.$root.loadingSubscriptions;
        $scope.refreshSubscriptions()
      });
  };
};

community.controller('CommunitySubscriptionCreateController', ['$scope', '$modalInstance', 'currentOrg', 'products', 'applications', 'subscriptions', CommunitySubscriptionCreateController]);

function CommunitySubscriptionCreateController($scope, $modalInstance, currentOrg, products, applications, subscriptions) {
  $scope.products = products;
  $scope.applications = applications;
  $scope.subscriptions = subscriptions;
  $scope.currentOrg = currentOrg;
  $scope.currentPage = 1;
  $scope.pageCount = 2;
  $scope.selectedApplication = null;
  $scope.selectedPlanName = null;
  $scope.selectedProductVersion = null;

  $scope.selectApplication = function(application) {
    $scope.selectedApplication = application;
  };

  $scope.planVersionSelected = function(planName, productVersion) {
    $scope.selectedPlanName = planName;
    $scope.selectedProductVersion = productVersion;
  };

  $scope.cancel = function() {
    $modalInstance.dismiss();
  };

  $scope.done = function() {
    return $modalInstance.close({
      application: $scope.selectedApplication,
      product: $scope.selectedProductVersion,
      plan: $scope.selectedPlanName
    });
  };
};

community.controller('CommunitySubscriptionController', ['$scope', '$modal', '$http', CommunitySubscriptionController]);

function CommunitySubscriptionController($scope, $modal, $http) {

  $scope.subscription.$$productName = $scope.subscription.product.title + ' ' + $scope.subscription.product.version + ', ' + $scope.subscription.plan.title;

  $scope.deleteSubscription = function() {
    $scope.confirmation = {
      title: 'subscriptionsDeleteSubscriptionTitle',
      messageKey: 'subscriptionsDeleteSubscriptionDescription',
      confirmed: function() {
        $scope.$root.loadingSubscriptions = true;
        var spaceUrl = "";

        if ($scope.spaceId) {
          spaceUrl = "/spaces/" + $scope.spaceId;
        }
        var subscriptionAppType = $scope.subscription.consumerOrg ?
          '/consumerApps/' : // is a consumerApps
          '/providerApps/'; // defaults to providerApps

        $http.delete('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + spaceUrl + subscriptionAppType + $scope.subscription.application.appId + '/subscriptions/' + $scope.subscription.id).success(function () {
          delete $scope.$root.loadingSubscriptions;
          $scope.refreshSubscriptions()
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };

  $scope.migrateSubscription = function() {
    $scope.loadingProducts = true
    $scope.refreshProducts().then(function() {
      $scope.loadingProducts = false
      var filtered = $scope.products.filter(function(product) {
        return (product.id === $scope.subscription.product.id);
      });
      if (filtered.length > 0) $scope.productVersion = filtered[0];
    })
    
    $modal.open({
      templateUrl: 'apim/community/partials/migrate-subscription.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'CommunitySubscriptionMigrationController',
      size: 'lg',
      scope: $scope
    });
  };
};

community.controller('CommunitySubscriptionMigrationController', ['$scope', '$http', '$modalInstance', CommunitySubscriptionMigrationController]);

function CommunitySubscriptionMigrationController($scope, $http, $modalInstance) {
  if (!$scope.productVersions && $scope.products) $scope.productVersions = $scope.products;
  $scope.cancel = function() {
    $modalInstance.dismiss('cancel');
  };
  $scope.planVersionSelected = function(selectedPlanName, selectedProductVersion) {
    $scope.selectedPlanName = selectedPlanName;
    $scope.selectedProductVersion = selectedProductVersion;
  };
  $scope.migrateVersion = function(planNameToMigrateTo, productVersionToMigrateTo) {
    $scope.toggleLoadingSubscriptions()
    var spaceUrl = "";
    if ($scope.spaceId) {
      spaceUrl = "/spaces/" + $scope.spaceId;
    }
    $http.post('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + spaceUrl +
      '/products/' + productVersionToMigrateTo.productName + ':' + productVersionToMigrateTo.productVersion +
      '/' + planNameToMigrateTo + '/migrate-subscription', {
        subscriptions: [$scope.subscription.id]
      })
      .then(function(){
        $scope.toggleLoadingSubscriptions()
        $scope.refreshSubscriptions()
      })
    $modalInstance.close();
  };
};

