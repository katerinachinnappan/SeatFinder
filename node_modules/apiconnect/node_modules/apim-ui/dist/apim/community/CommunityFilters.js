/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Filters */

var community = angular.module('apim.community');

community.filter('communityUserDisplayName', function() {
  return function(user) {
    if (!user) return "";
    if (user.firstName && user.lastName && user.email) return user.firstName + " " + user.lastName + ", " + user.email;
    if (user.name && user.email && user.name !== user.email) return user.name + ", " + user.email;
    if (user.firstName && user.lastName) return user.firstName + " " + user.lastName;
    if (user.name) return user.name;
    return user.email;
  };
});

community.filter('communityDeveloperOrgsQuery', function() {
  return function (developerOrgs, query) {
    if(!developerOrgs) return developerOrgs;
    if(!query) return developerOrgs;
    var term = query.toLowerCase();
    return developerOrgs.filter(function(developerOrg) {
      if (developerOrg.displayName && developerOrg.displayName.toLowerCase().indexOf(term) > -1) return true;
      if (developerOrg.name && developerOrg.name.toLowerCase().indexOf(term) > -1) return true;
      if (developerOrg.$$tags) {
        var matchingTags = developerOrg.$$tags.filter(function(tag) {
          return (tag.label && tag.label.toLowerCase().indexOf(term) > -1);
        });
        if (matchingTags.length > 0) return true;
      }
      if (developerOrg.$$ownerName && developerOrg.$$ownerName.toLowerCase().indexOf(term) > -1) return true;
      if (developerOrg.$$status && developerOrg.$$status.toLowerCase().indexOf(term) > -1) return true;
      return false;
    });
  };
});

community.filter('communityApplicationsQuery', function() {
  return function (applications, query) {
    if(!applications) return applications;
    if(!query) return applications;
    var term = query.toLowerCase();
    return applications.filter(function(application) {
      if (application.appName && application.appName.toLowerCase().indexOf(term) > -1) return true;
      if (application.clientId && application.clientId.toLowerCase().indexOf(term) > -1) return true;
      if (application.state && application.state.toLowerCase().indexOf(term) > -1) return true;
      if (application.$$developerOrgName && application.$$developerOrgName.toLowerCase().indexOf(term) > -1) return true;
      return false;
    });
  };
});

community.filter('communitySubscriptionsQuery', function() {
  return function (subscriptions, query) {
    if(!subscriptions) return subscriptions;
    if(!query) return subscriptions;
    var term = query.toLowerCase();
    return subscriptions.filter(function(subscription) {
      if (subscription.$$productName && subscription.$$productName.toLowerCase().indexOf(term) > -1) return true;
      if (subscription.application && subscription.application.appName && subscription.application.appName.toLowerCase().indexOf(term) > -1) return true;
      if (subscription.application && subscription.application.clientId && subscription.application.clientId.toLowerCase().indexOf(term) > -1) return true;
      if (subscription.$$developerOrgName && subscription.$$developerOrgName.toLowerCase().indexOf(term) > -1) return true;
      return false;
    });
  };
});

community.filter('communityActiveInCurrentOrg', function() {
  return function (applications, currentOrg) {
    if(!applications) return applications;
    if(!currentOrg) return applications;
    return applications.filter(function(application) {
      return (application.orgId === currentOrg && application.state.toLowerCase() !== 'suspended');
    });
  };
});

community.filter('communityNotAlreadySubscribed', function() {
  return function (products, subscriptions, application) {
    if(!products) return products;
    if(!subscriptions) return products;
    if(!application) return products;
    var currentSubs = subscriptions.filter(function(subscription) {
      return (subscription.application.appId === application.appId);
    });
    return products.filter(function(product) {
      var filteredSubs = currentSubs.filter(function(subscription) {
        return (subscription.product.id === product.id);
      });
      return filteredSubs.length === 0;
    });
  };
});

