/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiPathParameter', {
  bindings: {
    path: '<',
    parametersContainer: '<',
    parameter: '<',
    parameterTypes: '<',
    apiParameters: '<',
    onDelete: '&'
  },
  require: {
    paramListCtrl: '^apiPathParametersList'
  },
  templateUrl: 'apim/apis/partials/api-path-parameter-component.html',
  controller: function($modal, $scope, $mdDialog, ComponentRegistry) {
    var $ctrl = this;

    this.$onInit = function() {
      $ctrl.features = this.paramListCtrl.features;
      $ctrl.allTypes = this.paramListCtrl.allTypes;
      $ctrl.parameters = this.paramListCtrl.parameters;

      if ($ctrl.parameter.$$ref) {
        $ctrl.isRef = true;
      }
    };

    this.referenceToLink = function(ref) {
      if ($ctrl.features) {
        return ComponentRegistry.referenceToLink(ref);
      } else {
        return "";
      }
    };

    this.deleteParameter = function() {
      var scope = $scope.$new();

      scope.confirmation = {
        titleKey: 'api_parameter_delete_title',
        messageKey: 'path_parameter_delete_message',
        confirmed: function() {
          $ctrl.onDelete({
            parameter: $ctrl.parameter
          });
        },
        rejected: function() {}
      }

      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        size: 'sm',
        scope: scope
      });

    };

    this.addExternalDefinition = function($event) {
      return $mdDialog.show({
        controller: 'ComponentReferenceDialogController',
        templateUrl: "apim/components/partials/choose-component-reference.html",
        parent: angular.element(document.body),
        targetEvent: $event,
        locals: {
          currentReference: null,
          references: $scope.componentReferences.definitions,
          components: $scope.components
        },
        focusOnOpen: false
      }).then(function(reference) {
        $ctrl.parameter.schema = { '$ref': reference };
      }, function() {
      });
    };

    this.getTypeValue = function(type) {
      if (!type || !type.type) return type;
      if (type.type == "string") {
        return type.type + (type.format && isKnownFormat(type.format) ? "-" + type.format : '');
      }
      return type.type + (type.format ? "-" + type.format : '');
    };

    this.$propertyType = function(type) {
      if (arguments.length) {
        // Setter
        if (type === "__ref__") {
          $ctrl.addExternalDefinition();
          return;
        }

        var propertyType = $ctrl.parameterTypes[type];

        if (propertyType && $ctrl.parameter.in !== "body") {
          delete $ctrl.parameter.schema;
          $ctrl.parameter.type = propertyType.type;
          if (propertyType.format) {
            $ctrl.parameter.format = propertyType.format;
          } else {
            delete $ctrl.parameter.format;
          }
          if (propertyType.items) {
            $ctrl.parameter.items = propertyType.items;
          } else {
            delete $ctrl.parameter.items;
          }
        } else {
          delete $ctrl.parameter.type;
          delete $ctrl.parameter.format;
          delete $ctrl.parameter.items;
          propertyType = $ctrl.allTypes[type];
          var schemaObj = {};
          if (!propertyType) {
            // we'll assume this is an external ref...
            schemaObj.$ref = type;
          } else if (propertyType.$ref) {
            schemaObj.$ref = propertyType.$ref;
          } else {
            if (propertyType.type) schemaObj.type = propertyType.type;
            if (propertyType.format) schemaObj.format = propertyType.format;
            if (propertyType.items) schemaObj.items = propertyType.items;
          }
          $ctrl.parameter.schema = schemaObj;
        }
      } else {
        // Getter
        if ($ctrl.parameter && $ctrl.parameter.schema && $ctrl.parameter.schema.$ref) {
          // tweak so the getter is comparing the name not the $ref value
          // for the selected attribute on the dropdown
          if ($ctrl.parameter.schema.$ref.indexOf('#/definitions/') === 0) {
            return $ctrl.parameter.schema.$ref.slice(14);
          }
          return $ctrl.parameter.schema.$ref;
        }

        if (!$ctrl.parameter || (!$ctrl.parameter.type && !($ctrl.parameter.schema && $ctrl.parameter.schema.type))) {
          return 'object';
        }

        var typeObj = $ctrl.parameter.schema || $ctrl.parameter;
        var returnType = $ctrl.getTypeValue(typeObj);
        if (returnType == "integer" && typeObj.format == null) {
          returnType = "integer-int32";
        } else if (returnType == "number" && typeObj.format == null) {
          returnType = "number-float";
        }
        return returnType;
      }
    };

    function isKnownFormat(format) {
      if (!format) return false;
      switch (format) {
        case "byte":
        case "binary":
        case "date":
        case "date-time":
        case "password":
          return true;
      }
      return false;
    };

    this.onParameterInChange = function() {
      if ($ctrl.parameter.in === "path") {
        $ctrl.parameter.required = true;
      }
      if ($ctrl.parameter.in == "body") {
        // make sure we have no type or format
        delete $ctrl.parameter.type;
        delete $ctrl.parameter.format;
        // make sure we have a schema
        if (!$ctrl.parameter.schema) $ctrl.parameter.schema = { "type": "object" };
      } else {
        // make sure we have no schema
        delete $ctrl.parameter.schema;
        // make sure we have a type
        if (!$ctrl.parameter.type && !$ctrl.parameter.$ref) $ctrl.parameter.type = "string";
      }
    }
  }
});
