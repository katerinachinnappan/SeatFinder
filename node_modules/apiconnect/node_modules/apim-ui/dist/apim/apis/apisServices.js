/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

var apis = angular.module('apim.apis');

function swaggerFileHeader(requestConfig) {
  if (requestConfig.params && requestConfig.params.fileHeader) return requestConfig.params.fileHeader;
}

apis.factory('Api', ['$resource',
  function($resource) {
    return $resource('proxy/:apimanager/orgs/:orgId/apis/:apiId/', {}, {
      query: {method: 'GET', params: {orgId: '@orgId', apiId: '@apiId', mode: 'swagger2', fields: 'DEFAULT,tags.name,tags.url', apimanager: 'apimanager'}, isArray: true},
      delete: {method: 'DELETE', params: {orgId: '@orgId', apiId: '@apiId', mode: 'swagger2', apimanager: 'apimanager'}, isArray: false,
        headers: {
          'x-ibm-swagger-file': swaggerFileHeader
        }
      },
      get: {method: 'GET', params: {orgId: '@orgId', apimanager: 'apimanager', apiId: '@apiId', mode: 'swagger2', fields: 'DEFAULT,tags.name,tags.url'}, isArray: false},
      update: {method: 'PUT', params: {orgId: '@orgId', apimanager: 'apimanager', apiId: '@apiId', mode: 'swagger2', fields: 'DEFAULT,tags.name,tags.url'}, isArray: false},
      version: {method: 'POST', params: {orgId: '@orgId', apimanager: 'apimanager', apiId: '@apiId', mode: 'swagger2', fields: 'DEFAULT,tags.name,tags.url'}, isArray: false},
      save: {method: 'POST', params: {orgId: '@orgId', apiId: '@apiId', mode: 'swagger2', fields: 'DEFAULT,tags.name,tags.url', apimanager: 'apimanager'}, isArray: false}
    });
  }
])

apis.factory('ApiSearch', ['$resource',
  function($resource) {
    return $resource('proxy/apimanager/orgs/:orgId/apis/search', {}, {
      query: {method: 'GET', params: {orgId: '@orgId', productId: '@productId'}, isArray: true}
    });
  }
])
  .factory('Resource', ['$resource',
    function($resource){
      return $resource('proxy/orgs/:orgId/apis/:apiId/resources/:resourceId', {}, {
        query: {method: 'GET', params: {orgId: '@orgId', apiId: '@apiId', resourceId: '@resourceId', fields: 'DEFAULT,tags.name,tags.url'}, isArray: true}
      });
    }
  ])
  .factory('APITag', ['$resource',
    function($resource){
      return $resource('proxy/apimanager/orgs/:orgId/apis/:apiVersion/tags', {}, {
        query: {method: 'GET', params: {orgId: '@orgId', fields: 'DEFAULT,tags.name,tags.url'}, isArray: true}
      });
    }
  ]).factory('ApiValidators', ['translateFilter', function(translateFilter) {
    function checkEnforced(api) {
      var response = {
        errors: [],
        warnings: []
      };
      if (api.schemes && api['x-ibm-configuration'] && api['x-ibm-configuration'].enforced) {
        // if we're enforced, then our schemes may only be "https"
        if ((api.schemes.length != 1 || api.schemes[0] != 'https') && api['x-ibm-configuration'].gateway === "datapower-gateway") {
          response.errors.push({
            message: translateFilter('api_schemes_invalid_for_enforced'),
            path: ['schemes']
          });
        }
        if (angular.isArray(api.security)) {
          api.security.forEach(function(security) {
            var names = Object.keys(security);
            names.forEach(function(securityDefName) {
              var def = api.securityDefinitions[securityDefName];
              if (def && def.type == 'apiKey' &&
                ((def.in == 'header' && def.name != 'X-IBM-Client-Id' && def.name != 'X-IBM-Client-Secret') ||
                  (def.in == 'query' && def.name != 'client_id' && def.name != 'client_secret'))) {
                    response.errors.push({
                      message: translateFilter('api_security_scheme_invalid_for_enforced'),
                      path: ['securityDefinitions']
                    });
              }
            });
          });
        }
      }
      return response;
    }
    var invalidNameRegex = new RegExp(/[^A-Za-z0-9_\\-]/gi);
    function checkApiName(api) {
      var response = {
        errors: [],
        warnings: []
      };
      if (!api.info || !api.info['x-ibm-name']) {
        response.errors.push({
          message: translateFilter('api_no_x_ibm_name'),
          path: ['info']
        });
      } else {
        if (invalidNameRegex.test(api.info['x-ibm-name'])) {
          response.errors.push({
            message: translateFilter('api_x_ibm_name_invalid'),
            path: ['info']
          });
        }
      }
      return response;
    }
    return [checkApiName, checkEnforced];
  }]);

