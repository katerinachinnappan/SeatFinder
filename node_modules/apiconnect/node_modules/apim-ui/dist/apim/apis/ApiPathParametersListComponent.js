/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiPathParametersList', {
  bindings: {
    parametersContainer: '<',
  },
  templateUrl: 'apim/apis/partials/api-path-parameters-list.html',
  require: {
    pathCtrl: '^apiPath'
  },
  controller: function($filter, $mdDialog, ComponentRegistry) {
    var $ctrl = this;

    this.$onInit = function() {
      $ctrl.addParameterDropdownOpen = false;
      $ctrl.features = this.pathCtrl.features;
      $ctrl.xhrProcessing = this.pathCtrl.xhrProcessing;
      $ctrl.apiParameters = this.pathCtrl.apiParameters;
      $ctrl.allTypes = this.pathCtrl.allTypes;
      $ctrl.parameterTypes = this.pathCtrl.parameterTypes;
      $ctrl.populateParamsArray = this.getPopulateParamsArrayFn($ctrl.features);
      $ctrl.populateParamsArray();
    }

    this.hasParameter = function(parameter) {
      var filtered = $ctrl.parameters.filter(function(thisParameter) {
        if (thisParameter.$$ref && thisParameter.$$ref.startsWith("#/parameters/")) {
          var ref = thisParameter.$$ref.replace("#/parameters/", "");
          return parameter.name == ref;
        }
      });
      return filtered.length > 0;
    };

    this.addParameter = function() {
      if (!$ctrl.parametersContainer.parameters) $ctrl.parametersContainer.parameters = [];
      // Generate name
      var testNameBase = $filter('translate')("api_parameter").toLowerCase().replace(/\W/g, '-');
      var foundUnusedName = false;
      var nameSuffix = 1;
      while (!foundUnusedName) {
        foundUnusedName = true;
        var testName = testNameBase + "-" + nameSuffix;
        // check for uniqueness in api parameters
        if ($ctrl.apiParameters && $ctrl.apiParameters[testName]) {
          nameSuffix++;
          foundUnusedName = false;
          continue;
        }

        for (var i = 0; i < $ctrl.parameters.length; i++) {
          if ($ctrl.parameters[i].name == testName) {
            nameSuffix++;
            foundUnusedName = false;
            break;
          }
        }
      }

      var newParameterName = testNameBase + "-" + nameSuffix;
      var newParameter = {
        name: newParameterName,
        type: 'string',
        required: false,
        "in": 'query'
      };

      $ctrl.parametersContainer.parameters.push(newParameter);
      $ctrl.populateParamsArray();
    };

    this.addExternalParameter = function($event) {
      if ($ctrl.features && $ctrl.features.components) {
        this.components = ComponentRegistry.getComponents();
        this.componentReferences = ComponentRegistry.getComponentReferences();
      }

      return $mdDialog.show({
        controller: 'ComponentReferenceDialogController',
        templateUrl: "apim/components/partials/choose-component-reference.html",
        parent: angular.element(document.body),
        targetEvent: $event,
        locals: {
          currentReference: null,
          references: $ctrl.componentReferences.parameters,
          components: $ctrl.components
        },
        focusOnOpen: false
      }).then(function(reference) {
        $ctrl.parametersContainer.parameters.push({ $ref: reference });
        $ctrl.populateParamsArray();
      }, function() {});
    };

    this.getPopulateParamsArrayFn = function(features) {
      if (features.components) {
        return function() {
          var parameters = [];
          var originalParameters = [];
          // make sure all parameters are de-reffed
          if ($ctrl.parametersContainer.parameters) {
            $ctrl.parametersContainer.parameters.forEach(function(param) {
              originalParameters.push(param);
              var thisParam;
              if (!param.$ref) {
                parameters.push(param);
              } else {
                // we have a reference
                var resolved = ComponentRegistry.getReference(param.$ref, 'parameters');
                if (resolved) {
                  resolved = angular.copy(resolved);
                  resolved.$ref = param.$ref;
                  parameters.push(resolved);
                } else {
                  resolved = angular.copy($scope.documentReferences[param.$ref]);
                  if (!resolved) {
                    // last chance - try refreshing the document references
                    $scope.getDocumentReferences().then(function() {
                      resolved = angular.copy($scope.documentReferences[param.$ref]);
                      if (!resolved) {
                        console.warn("Missing reference: " + param.$ref);
                      } else {
                        resolved.$ref = param.$ref;
                        parameters.push(resolved);
                      }
                    });
                  } else {
                    resolved.$ref = param.$ref;
                    parameters.push(resolved);
                  }
                }
              }
            });
          }
          $ctrl.originalParameters = originalParameters;
          $ctrl.parameters = parameters;
        };
      } else {
        return function() {
          var parameters = [];
          // make sure all parameters are de-reffed
          if ($ctrl.parametersContainer.parameters) {
            $ctrl.parametersContainer.parameters.forEach(function(param) {
              if (!param.$ref) parameters.push(param);
              if (param.$ref && param.$ref.startsWith("#/parameters/")) {
                var ref = param.$ref.replace("#/parameters/", "");
                if ($ctrl.apiParameters && $ctrl.apiParameters[ref]) {
                  var thisParam = angular.copy($ctrl.apiParameters[ref]);
                  thisParam.$$ref = param.$ref;
                  parameters.push(thisParam);
                }
              }
            });
          }
          $ctrl.parameters = parameters;
        };
      }
    }

    this.referenceParameter = function(parameterName, parameterRef, parameter) {
      if (!$ctrl.parametersContainer.parameters) $ctrl.parametersContainer.parameters = [];
      if (!$ctrl.hasParameter(parameter)) {
        $ctrl.parametersContainer.parameters.push({
          $ref: parameterRef
        });
        $ctrl.populateParamsArray();
      }
    };

    this.deleteParameter = function(parameter) {
      $ctrl.parametersContainer.parameters =
        $ctrl.parametersContainer.parameters.filter(function(thisParameter) {
        if (thisParameter.$ref && thisParameter.$ref == parameter.$ref) return false;
        if (thisParameter.$ref && thisParameter.$ref == parameter.$$ref) return false;
        if (thisParameter.name && thisParameter.name == parameter.name) return false;
        return true;
        });

      if ($ctrl.parametersContainer.parameters.length == 0) {
        delete $ctrl.parametersContainer.parameters;
      }

      $ctrl.populateParamsArray();
    };
  }
});
