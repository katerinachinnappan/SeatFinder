/** ******************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiPathOperationResponsesList', {
  bindings: {
    responses: '<',
  },
  templateUrl: 'apim/apis/partials/api-path-operation-responses-list.html',
  controller: function($scope, $modal) {
    var $ctrl = this;

    this.$onInit = function() {
      $ctrl.responsesArr = transformToArr($ctrl.responses);
    };

    this.addResponse = function() {
      // Generate name
      var newResponseCode = '2XX';
      if ($ctrl.responses[newResponseCode]) {
        var i = 1;
        while ($ctrl.responses[newResponseCode + '-' + i] != null) {
          i++;
        }
        newResponseCode = newResponseCode + '-' + i;
      }

      $ctrl.responses[newResponseCode] = {description: ''};
      $ctrl.responsesArr.unshift({'$$key': newResponseCode, description: ''});
    };

    this.removeResponse = function(response) {
      var key = response.$$key;
      var scope = $scope.$new();
      scope.confirmation = {
        titleKey: 'api_response_delete_title',
        messageKey: 'api_response_delete_message',
        confirmed: function() {
          if ($ctrl.responses[key]) {
            delete $ctrl.responses[key];
            $ctrl._updateResponsesArr();
          }
        },
        rejected: function() {},
      };

      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        size: 'sm',
        scope: scope,
      });
    };

    this._updateResponsesArr = function() {
      $ctrl.responsesArr = transformToArr($ctrl.responses);
    };

    function transformToArr(responseObj) {
      var responseArr = [];
      for (var response in responseObj) {
        var transformedDefn =  responseObj[response];
        transformedDefn['$$key'] = response;
        responseArr.push(transformedDefn);
      }
      return responseArr;
    }
  },
})

.component('apiPathOperationResponse', {
  bindings: {
    response: '<',
    onDelete: '&',
  },
  templateUrl: 'apim/apis/partials/api-path-operation-response.html',
  require: {
    resCtrl: '^apiPathOperationResponsesList',
    pathCtrl: '^apiPath',
  },
  controller: function($scope, $mdDialog, $document) {
    var $ctrl = this;

    this.$onInit = function() {
      $ctrl.resCtrl = this.resCtrl;

      // bind with ancestor's parameters
      $ctrl.propertyTypes = $ctrl.pathCtrl.parameterTypes;
      $ctrl.definitions = $ctrl.pathCtrl.definitions;
      $ctrl.componentFeatureToggle = $ctrl.pathCtrl.features.components || false;
      // TODO: Make sure components from apiPaths exist, our appliance stack does not have
      // this feature for us to enable
      if ($ctrl.componentFeatureToggle) {
        $ctrl.components = $ctrl.pathCtrl.components;
      }
    };

    this.delete = function() {
      $ctrl.onDelete($ctrl.response);
    };

    var releaseResponseWatch = $scope.$watch('$ctrl.response.$$key', function(newDefn, oldDefn) {
      if (newDefn === oldDefn) return;
      delete $ctrl.resCtrl.responses[oldDefn];
      $ctrl.resCtrl.responses[newDefn] = $ctrl.response;
    });

    this.$onDestroy = function() {
      releaseResponseWatch();
    };

    this.$responseType = function(type) {
      if (arguments.length) {
        // Setter
        if (type === '__ref__') {
          $ctrl.addExternalDefinition();
          return;
        }
        var propertyType = $ctrl.propertyTypes[type];
        if (propertyType) {
          $ctrl.response.schema = {};
          $ctrl.response.schema.type = propertyType.type;
          if (propertyType.format) {
            $ctrl.response.schema.format = propertyType.format;
          }
        } else {
          $ctrl.response.schema = {'$ref': type};
        }
      } else {
        // Getter
        if ($ctrl.response && $ctrl.response.schema && $ctrl.response.schema.$ref) {
          return $ctrl.response.schema.$ref;
        }
        if (!$ctrl.response || !$ctrl.response.schema || !$ctrl.response.schema.type || $ctrl.response.schema.type == 'object') {
          return 'object';
        }

        var returnType = $ctrl.getTypeValue($ctrl.response.schema);
        if (returnType == 'integer' && $ctrl.response.schema.format == null) {
          returnType = 'integer-int32';
        } else if (returnType == 'number' && $ctrl.response.schema.format == null) {
          returnType = 'number-float';
        }
        return returnType;
      }
    };

    this.addExternalDefinition = function($event) {
      return $mdDialog.show({
        controller: 'ComponentReferenceDialogController',
        templateUrl: 'apim/components/partials/choose-component-reference.html',
        parent: angular.element($document.body),
        targetEvent: $event,
        locals: {
          currentReference: null,
          references: $ctrl.definitions,
          components: $ctrl.components,
        },
        focusOnOpen: false,
      }).then(function(reference) {
        $ctrl.response.schema = {'$ref': reference};
      }, function() {});
    };

    this.getTypeValue = function(type) {
      if (!type || !type.type) return type;
      if (type.type == 'string') {
        return type.type + (type.format && isKnownFormat(type.format) ? '-' + type.format : '');
      }
      return type.type + (type.format ? '-' + type.format : '');
    };

    function isKnownFormat(format) {
      if (!format) return false;
      switch (format) {
        case 'byte':
        case 'binary':
        case 'date':
        case 'date-time':
        case 'password':
          return true;
      }
      return false;
    };
  },
});
