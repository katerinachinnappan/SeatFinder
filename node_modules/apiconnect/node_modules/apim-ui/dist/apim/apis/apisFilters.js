/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Filters */

var apis = angular.module('apim.apis');

apis.filter('apiCount', ['translateMultipleFilter', 'translatePluralityFilter', function(translateMultipleFilter, translatePluralityFilter) {
  return function (showing, total) {
    if (showing == total) return translatePluralityFilter(showing, 'apiCount', 'count');
    return translateMultipleFilter('apiCountShowing', {showing: showing, total: total});
  };
}]);

apis.filter('apisQuery', function() {
  return function (apis, query) {
    if(!apis) return apis;
    if(!query) return apis;
    var term = query.toLowerCase();
    return apis.filter(function(api) {
      return (api.info && api.info.title && api.info.title.toLowerCase().indexOf(term) > -1) ||
        (api.basePath && api.basePath.toLowerCase().indexOf(term) > -1);
    });
  };
});

apis.filter('apiLink', function() {
  return function(api) {
    if (api.id) return "#/design/apis/editor/" + api.id;
    if (api.info['x-ibm-name']) return "#/design/apis/editor/" + api.info['x-ibm-name'] + ":" + api.info.version;
    return "#/design/apis/editor/" + api.info.title + ":" + api.info.version;
  };
});

apis.filter('theseApiVersions', function() {
  return function(apiVersions, api) {
    if (!apiVersions) return;
    if (!api) return apiVersions;
    if (api.info['x-ibm-name']) return apiVersions.filter(function(apiVersion) {
      return apiVersion.info['x-ibm-name'] == api.info['x-ibm-name'];
    });
    return apiVersions.filter(function(apiVersion) {
      return apiVersion.info.title == api.info.title;
    });
  };
});

apis.filter('apiTitleQuery', function() {
  return function (apis, query) {
    if(!apis) return apis;
    if(!query) return apis;
    var term = query.toLowerCase();
    return apis.filter(function(api) {
      return (api.info && api.info.title && api.info.title.toLowerCase().indexOf(term) > -1);
    });
  };
});

apis.filter('resourcesQuery', function() {
  return function (resources, query) {
    if(!resources) return resources;
    if(!query) return resources;
    var term = query.toLowerCase();
    return resources.filter(function(resource) {
      return (resource.name && resource.name.toLowerCase().indexOf(term) > -1) ||
        (resource.verb && resource.verb.toLowerCase().indexOf(term) > -1) ||
        (resource.path && resource.path.toLowerCase().indexOf(term) > -1);
    });
  };
});

apis.filter('otherVersionsSelected', function() {
  return function(selectedResources, selectedApiVersion) {
    if (!selectedApiVersion) return false;
    var existing = selectedResources[selectedApiVersion.apiId];
    if (!existing) return false;
    return (existing.api.url != selectedApiVersion.url);
  };
});

apis.filter('apiVersionQuery', function() {
  return function (apiVersions, apiVersion) {
    if(!apiVersions) return apiVersions;
    if(!apiVersion) return apiVersions;
    return apiVersions.filter(function(api) {
      return (api.apiId == apiVersion.apiId);
    });
  };
});

apis.filter('noApis', ['translateFilter', function(translateFilter) {
  return function (apis) {
    if (!apis || apis.length == 0) return translateFilter('apisNoApisFound');
    return translateFilter('apisNoMatchingApis');
  };
}]);

apis.filter('apiTag', ['tagsForApiFilter', function(tagsForApiFilter) {
  return function (apis, selectedTags, allTags, tags, favourites) {
    if(!apis) return apis;
    if (!selectedTags) return apis;
    return apis.filter(function(api) {
      var tagsForApi = tagsForApiFilter(api, allTags, tags, favourites);
      if (!tagsForApi || tagsForApi.length == 0) return selectedTags.untagged;
      for (var i = 0; i < tagsForApi.length; i++) {
        if (selectedTags[tagsForApi[i].value]) return true;
      };
      return false;
    });
  };
}]);

apis.filter('tagsForApi', function() {
  return function (api, allTags, tags, favourites) {
    if(!api || !allTags || !tags) return [];
    var tagsForThisApi = allTags.filter(function(tag) {
      for (var i = 0; i < tag.documents.length; i++) {
        if (tag.documents[i].documentUrl.indexOf('/apis/' + api.id) >= 0) return true;
      }
      return false;
    });
    var filtered = tags.filter(function(tag) {
      var ret = false;
      var matching = tagsForThisApi.filter(function(thisTag) {
        return (thisTag.name == tag.label);
      });
      if (matching.length == 0 && favourites && tag.value == "favourite") {
        var favouriteSection = favourites.api;
        if (favouriteSection) {
          ret = favouriteSection[api.id];
        }
      } else {
        ret = matching.length > 0;
      }
      return ret;
    });
    return filtered;
  };
});

apis.filter('apiRevision', ['translateMultipleFilter', function(translateMultipleFilter) {
  return function (api) {
    return translateMultipleFilter('apiRevisionSubtext', {revision: api.version});
  };
}]);

apis.filter('apiType', function() {
  return function (apis, filteredTypes) {
    if(!apis) return apis;
    if(!filteredTypes) return filteredTypes;
    return apis.filter(function(api) {
      if (!api.protocol) return true;
      if (filteredTypes[api.protocol.toUpperCase()]) return true;
      if (api.protocol.toLowerCase() == "wsdl" && filteredTypes.SOAP == true) return true;
      return false;
    });
  };
});

apis.filter('discoverSelected', function() {
  return function (items) {
    if(!items) return items;
    return items.filter(function(item) {
      return item.entry ? item.entry.selected : item.selected;
    });
  };
});

apis.filter('discoverNotSelected', function() {
  return function (items) {
    if(!items) return items;
    return items.filter(function(item) {
      return !(item.entry ? item.entry.selected : item.selected);
    });
  };
});

