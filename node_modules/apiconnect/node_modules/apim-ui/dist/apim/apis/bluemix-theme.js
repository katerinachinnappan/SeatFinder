/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

(function(JE) {
  /**
   * Taken from jQuery 2.1.3
   *
   * @param obj
   * @returns {boolean}
   */
  var $isplainobject = function( obj ) {
    // Not plain objects:
    // - Any object or value whose internal [[Class]] property is not "[object Object]"
    // - DOM nodes
    // - window
    if (typeof obj !== "object" || obj.nodeType || (obj !== null && obj === obj.window)) {
      return false;
    }

    if (obj.constructor && !Object.prototype.hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) {
      return false;
    }

    // If the function hasn't returned already, we're confident that
    // |obj| is a plain object, created by {} or constructed with new Object
    return true;
  };

  var $extend = function(destination) {
    var source, i,property;
    for(i=1; i<arguments.length; i++) {
      source = arguments[i];
      for (property in source) {
        if(!source.hasOwnProperty(property)) continue;
        if(source[property] && $isplainobject(source[property])) {
          if(!destination.hasOwnProperty(property)) destination[property] = {};
          $extend(destination[property], source[property]);
        }
        else {
          destination[property] = source[property];
        }
      }
    }
    return destination;
  };

  var $each = function(obj,callback) {
    if(!obj || typeof obj !== "object") return;
    var i;
    if(Array.isArray(obj) || (typeof obj.length === 'number' && obj.length > 0 && (obj.length - 1) in obj)) {
      for(i=0; i<obj.length; i++) {
        if(callback(i,obj[i])===false) return;
      }
    }
    else {
      if (Object.keys) {
        var keys = Object.keys(obj);
        for(i=0; i<keys.length; i++) {
          if(callback(keys[i],obj[keys[i]])===false) return;
        }
      }
      else {
        for(i in obj) {
          if(!obj.hasOwnProperty(i)) continue;
          if(callback(i,obj[i])===false) return;
        }
      }
    }
  };

  JE.defaults.editors.multiple.prototype.build = function () {
    var self = this;
    var container = this.container;

    this.header = this.label = this.theme.getFormInputLabel(this.getTitle());

    this.switcher = this.theme.getSelectInput(this.display_text);

    if(this.schema.description) this.description = this.theme.getFormInputDescription(this.schema.description);

    this.container.appendChild(
      this.theme.getFormControl(this.label, this.switcher, this.description)
    );

    this.switcher.addEventListener('change',function(e) {
      e.preventDefault();
      e.stopPropagation();

      self.switchEditor(self.display_text.indexOf(this.value));
      self.onChange(true);
    });

    this.editor_holder = document.createElement('div');
    container.appendChild(this.editor_holder);


    var validator_options = {};
    if(self.jsoneditor.options.custom_validators) {
      validator_options.custom_validators = self.jsoneditor.options.custom_validators;
    }

    this.switcher_options = this.theme.getSwitcherOptions(this.switcher);
    $each(this.types,function(i,type) {
      self.editors[i] = false;

      var schema;

      if(typeof type === "string") {
        schema = $extend({},self.schema);
        schema.type = type;
      }
      else {
        schema = $extend({},self.schema,type);

        // If we need to merge `required` arrays
        if(type.required && Array.isArray(type.required) && self.schema.required && Array.isArray(self.schema.required)) {
          schema.required = self.schema.required.concat(type.required);
        }
      }

      self.validators[i] = new JE.Validator(self.jsoneditor,schema,validator_options);
    });

    this.switchEditor(0);
  };

  JE.defaults.themes.bluemix = JE.defaults.themes.bootstrap3.extend({
    getSelectInput: function(options) {
      var el = this._super(options);
      el.className = 'bx--select__input';
      return el;
    },
    getGridRow: function() {
      var el = this._super();
      el.className = '';
      return el;
    },
    setGridColumnSize: function() {},
    getCheckboxLabel: function (text) {
      var el = document.createElement('label');
      el.className = 'bx--checkbox__label';
      el.appendChild(this.getCheckboxDescription(text));
      return el;
    },
    getCheckboxDescription: function (text) {
      var el = document.createElement('span');
      el.appendChild(document.createTextNode(text));
      el.className = 'bx--checkbox__label-text';
      return el;
    },
    getCheckbox: function() {
      var el = this.getFormInputField('checkbox');
      el.className = 'bx--checkbox bx--checkbox--svg';
      return el;
    },
    getFormInputLabel: function(text) {
      var el = this._super();
      el.className = 'bx--form__label';
      return el;
    },
    createSvg: function(svgClass, icon) {
      var svgNs = 'http://www.w3.org/2000/svg';
      var href = '/vendor/bluemix-icons/bluemix-icons.svg#';
      href += icon;

      var use = document.createElementNS(svgNs, 'use');
      use.setAttributeNS( 'http://www.w3.org/1999/xlink', 'xlink:href', href);

      var svg = document.createElementNS(svgNs, 'svg');
      svg.setAttributeNS(null, 'class', svgClass);
      svg.appendChild(use);
      return svg;
    },
    getFormControl: function(label, input, description) {
      var group = document.createElement('div');
      group.className = 'bx--form__row-item';

      if ([
        'text',
        'password',
        'search',
        'number',
        'email',
        'tel',
        'url'
      ].indexOf(input.type) > -1) {
        input.className += ' bx--text__input';
      }

      if (input.type === 'checkbox') {
        if (label) {
          var fakeBox = document.createElement('span');
          fakeBox.className = 'bx--checkbox__appearance';
          fakeBox.appendChild(this.createSvg(
            'bx--checkbox__checkmark', 'checkmark'
          ));

          label.insertBefore(fakeBox, label.firstChild);
          label.insertBefore(input, label.firstChild);
          group.appendChild(label);
        }
      }
      else if (input.type === 'select-one') {
        var selectGroup = document.createElement('div');
        selectGroup.className = 'bx--select labeledSelect';
        if(label) {
          selectGroup.appendChild(label);
        }
        selectGroup.appendChild(input);

        selectGroup.appendChild(this.createSvg(
          'bx--select__arrow', 'caret--down'
        ));

        group.appendChild(selectGroup);

      }
      else {
        if(label) {
          group.appendChild(label);
        }
        group.appendChild(input);
      }

      if(description) group.appendChild(description);

      return group;
    }
  });


}(window.JSONEditor));

