/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis')
  .component('apiPathOperationSecurity', {
    bindings: {
      operation: '<',
      apiSecurityDefns: '<'
    },
    templateUrl: 'apim/apis/partials/api-path-operation-security.html',
    controller: function($filter, $scope, $modal) {
      var $ctrl = this;

      this.isEmpty = function(obj) {
        return _.isEmpty(obj);
      }

      this.$inheritScheme = function(enabled) {
        if (arguments.length) {
          // Setter
          if (enabled) {
            delete $ctrl.operation.security;
          } else {
            $ctrl.operation.security = [{}];
          }
        } else {
          // Getter
          return $ctrl.operation.security == null;
        }
      };

      this.addSecurityOption = function() {
        if (!$ctrl.operation.security) {
          $ctrl.operation.security = [];
        }
        $ctrl.operation.security.push({});
      };

      this.deleteSecurityOption = function($index) {
        if ($index < $ctrl.operation.security.length) {
          $ctrl.operation.security.splice($index, 1);
        }
      };

      this.moveUpSecurityOption = function(index) {
        if (index <= 0) return;
        var newOptions = [];
        $ctrl.operation.security.forEach(function(thisOption, currentIndex) {
          if (currentIndex == index) return;
          if (currentIndex == index - 1) {
            newOptions.push($ctrl.operation.security[index]);
            newOptions.push(thisOption);
          } else {
            newOptions.push(thisOption);
          }
        });
        $ctrl.operation.security = newOptions;
      };

      this.moveDownSecurityOption = function(index) {
        if (index >= $ctrl.operation.security.length - 1) return;
        var newOptions = [];
        $ctrl.operation.security.forEach(function(thisOption, currentIndex) {
          if (currentIndex == index) return;
          if (currentIndex == index + 1) {
            newOptions.push(thisOption);
            newOptions.push($ctrl.operation.security[index]);
          } else {
            newOptions.push(thisOption);
          }
        });
        $ctrl.operation.security = newOptions;
      };
    }
  })

  .controller('schemeController', ['$scope', function($scope) {
    this.$schemeEnabled = function(enabled) {
      var securitySchemeName = '';
      if (arguments.length) {
        // Setter
        if (enabled) {
          var scopes = Object.keys($scope.$ctrl.apiSecurityDefns[$scope.securityDefinitionName].scopes || {});
          $scope.securityOption[$scope.securityDefinitionName] = scopes;
        } else {
          delete $scope.securityOption[$scope.securityDefinitionName];
        }
      } else {
        // Getter
        return $scope.securityOption[$scope.securityDefinitionName] !== undefined;
      }
    };
  }]);
