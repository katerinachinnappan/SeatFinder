/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiDefinitionPropertyList', {
  bindings: {
    definition: '<',
    properties: '<',
    propertyTypes: '<',
    allTypes: '<',
    onChange: '&'
  },
  templateUrl: 'apim/apis/partials/api-definition-property-list-component.html',
  controller: function($filter) {
    var $ctrl = this;

    // TODO: we do this type of check in a few places, should probably generalize it and move
    //       it somewhere common.
    function getUniquePropName(names) {
      var testNameBase = $filter('translate')('api_property_new').toLowerCase().replace(/\W/g, '-');
      var i = 0;
      var testName = '';

      while (i < 1 || names.indexOf(testName) >= 0) {
        i++;
        testName = testNameBase + '-' + i;
      }

      return testName;
    };

    this.addProperty = function() {
      var properties = Object.assign({}, this.properties);
      var name = getUniquePropName(Object.keys(properties));

      properties[name] = {
        type: 'string'
      };

      this.properties = properties;
      this.onChange({
        properties: properties
      });
    };

    this.propertyRequired = function(propertyName, value) {
      if (value != null) {
        if (!$ctrl.definition.required) {
          $ctrl.definition.required = [];
        }

        $ctrl.definition.required = $ctrl.definition.required.concat([propertyName])
          .filter(function(x) {
            return (x !== propertyName || value);
          });
      }

      // This is to removed the empty array for required
      // when no properties are required (it causes validation error)
      if (Array.isArray($ctrl.definition.required) &&
        $ctrl.definition.required.length === 0) {
          $ctrl.definition.required = undefined;
          return false;
      }

      return ($ctrl.definition.required &&
        $ctrl.definition.required.indexOf(propertyName) !== -1);
    };

    this.renameProperty = function(newName, oldName) {
      var tempObj = {};
      Object.keys($ctrl.properties).forEach(function(key) {
        if (key === oldName) {
          tempObj[newName] = $ctrl.properties[key];
        } else {
          tempObj[key] = $ctrl.properties[key];
        }
      });

      $ctrl.onChange({
        properties: tempObj
      });

      // update the ID in the required list
      if ($ctrl.propertyRequired(oldName)) {
        $ctrl.propertyRequired(oldName, false);
        $ctrl.propertyRequired(newName, true);
      }
    };

    this.deleteProperty = function(propertyName) {
      // TODO:(jisoo) This will prevent creating new require []
      // when we click delete property. But we still need to care
      // about the other case when we have require [] at the end 
      if (typeof $ctrl.definition.required !== 'undefined') {
        $ctrl.propertyRequired(propertyName, false);
      }
      delete $ctrl.properties[propertyName];
    };
  }
});
