/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').filter('findSecurityDefinitionsByType', function () {
  return function(definitions, type){
    if (!definitions) return definitions;
    if (!type) return definitions;
    var filteredDefs = [];
    angular.forEach(definitions, function(definition, name) {
      if (definition.type == type) {
        filteredDefs.push(definition);
      }
    });
    return filteredDefs;
  }
}).filter('addTempId', function () {
  return function(objects){
    if (!objects) return objects;
    var idObjects = [];
    angular.forEach(objects, function(theObject, name) {
      if (typeof theObject == "object") {
        idObjects[name] = theObject;
        if (!idObjects[name]["$$apimTempId"]) idObjects[name]["$$apimTempId"] = name;
      }
    });
    return idObjects;
  }
}).filter('catalogsForProperty', function () {
  return function(catalogs, propertyName){
    if (!catalogs) return catalogs;
    if (!propertyName) return propertyName;
    var filteredCatalogs = [];
    angular.forEach(catalogs, function(catalog, index) {
      if (catalog.properties && typeof catalog.properties[propertyName] != "undefined") {
        filteredCatalogs.push(catalog);
      }
    });
    return filteredCatalogs.length ? filteredCatalogs : undefined;
  };
}).filter('formatPath', function () {
  return function(path) {
    if (!path) return "";
    if (!angular.isArray(path)) return path;
    if (path.length == 0) return "";
    if (path[0] == "paths") path = path.slice(1, path.length);
    if (path.length < 2) return "";
    var asString = path[0] + ": ";
    path = path.slice(1, path.length);
    return asString + path.join(".");
  }
}).filter('markdown', ['marked', function() {
  return function (raw) {
    return marked(raw) || ''
  };
}]);

