/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiDefinition', {
  bindings: {
    name: '<',
    definition: '<',
    definitionSet: '<',
    propertyTypes: '<',
    allTypes: '<',
    onRename: '&',
    onDelete: '&',
    onChange: '&'
  },
  templateUrl: 'apim/apis/partials/api-definition-component.html',
  controllerAs: 'defCtrl',
  controller: function($filter, $rootScope, $modal) {
    var $ctrl = this;

    this.$onInit = function() {
      $ctrl.features = $rootScope.features || {};
    };

    this.$onChanges = function(changeSet) {
      if (changeSet.allTypes) {
        $ctrl.allTypes = changeSet.allTypes.currentValue;
      }
    };

    this.delete = function($event) {
      if ($event) {
        $event.stopPropagation();
      }

      $ctrl.onDelete({
        name: $ctrl.name
      });
    };

    this.update = function($event) {
      if ($event) {
        $event.stopPropagation();
      }

      $ctrl.onChange({
        name: $ctrl.name,
        value: $ctrl.definition
      });
    }

    this.definitionName = function(name) {
      if (arguments.length === 0) {
        return $ctrl.name;
      }

      $ctrl.onRename({
        oldName: $ctrl.name,
        newName: name
      });

      $ctrl.name = name;
    }

    this.isExpanded = function() {
      return Boolean($ctrl._expanded);
    };

    this.setExpanded = function() {
      $ctrl._expanded = !($ctrl.isExpanded());
    };

    this.getTypeValue = function(type) {
      if (!type || !type.type) {
        return type;
      }

      return type.type + (type.format ? "-" + type.format : '');
    };

    this.$propertyType = function(type) {
      if (arguments.length) {
        // Setter
        var propertyType = $ctrl.propertyTypes[type];
        $ctrl.definition.type = propertyType.type;

        if (propertyType.format) {
          $ctrl.definition.format = propertyType.format;
        } else {
          delete $ctrl.definition.format;
        }

        if (propertyType.items) {
          $ctrl.definition.items = propertyType.items;
        } else {
          delete $ctrl.definition.items;
        }

        // Tidy up
        if (propertyType.type !== "object") {
          delete $ctrl.definition.properties;
          delete $ctrl.definition.minProperties;
          delete $ctrl.definition.maxProperties;
          delete $ctrl.definition.additionalProperties;
          delete $ctrl.definition.required;
        }

        if (propertyType.type !== "array") {
          delete $ctrl.definition.items;
          delete $ctrl.definition.minItems;
          delete $ctrl.definition.maxItems;
          delete $ctrl.definition.uniqueItems;
        }

        if (propertyType.type !== "string") {
          delete $ctrl.definition.maxLength;
          delete $ctrl.definition.minLength;
          delete $ctrl.definition.pattern;
        }

        if (propertyType.type !== "number" && propertyType.type !== "integer") {
          delete $ctrl.definition.multipleOf;
          delete $ctrl.definition.maximum;
          delete $ctrl.definition.minimum;
          delete $ctrl.definition.exclusiveMaximum;
          delete $ctrl.definition.exclusiveMinimum;
        }
      } else {
        // Getter
        if (!$ctrl.definition.type) {
          return 'object';
        }
        return $ctrl.getTypeValue($ctrl.definition);
      }

      $ctrl.update();
    };

    this.$arrayType = function (type) {
      if (arguments.length) {
        // Setter
        if (!$ctrl.definition.items) {
          $ctrl.definition.items = {};
        }

        var arrayType = $ctrl.propertyTypes[type];

        if (arrayType) {
          if ($ctrl.definition.items.$ref) {
            delete $ctrl.definition.items.$ref;
          }

          $ctrl.definition.items.type = arrayType.type;

          if (arrayType.format) {
            $ctrl.definition.items.format = arrayType.format;
          } else {
            delete $ctrl.definition.items.format;
          }
        } else {
          arrayType = $ctrl.allTypes[type];
          $ctrl.definition.items = {
            $ref: arrayType.$ref
          };
        }
      } else {
        // Getter
        if ($ctrl.definition.items && $ctrl.definition.items.$ref) {
          var index = $ctrl.definition.items.$ref.lastIndexOf('/');
          var name = $ctrl.definition.items.$ref.substring(index + 1);
          return name;
        }
        if (!$ctrl.definition.items || !$ctrl.definition.items.type) {
          return 'object';
        }
        return $ctrl.getTypeValue($ctrl.definition.items);
      }

      $ctrl.update();
    };

    this.isComplicatedDefinition = function () {
      var unsupportedProperties = [
        '$ref',
        'default',
        'mulitpleOf',
        'maximum',
        'exclusiveMaximum',
        'minimum',
        'exclusiveMinimum',
        'maxLength',
        'minLength',
        'pattern',
        'maxItems',
        'minItems',
        'uniqueItems',
        'maxProperties',
        'minProperties',
        'enum',
        'allOf'
      ];
      if ($ctrl.definition.items && ($ctrl.definition.items.$ref || $ctrl.definition.items.type == 'array' || $ctrl.definition.items.type == 'object')) {
        return true;
      }
      for (var i = 0; i < unsupportedProperties.length; i++) {
        if ($ctrl.definition[unsupportedProperties[i]]) {
          return true;
        }
      }
      return false;
    };

    this.launchInlineEditor = function($event) {
      $event.stopPropagation();

      var $scope = $rootScope.$new();
      $scope.object = {
        schema: $ctrl.definition
      };

      $modal.open({
        templateUrl: 'src/html/inline-schema.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'InlineSchemaController',
        size: 'lg',
        scope: $scope
      }).result.then(
        function(value) {
          $ctrl.definition = $scope.object.schema;
          $ctrl.update();
        }
      );
    };

    this.updateProperties = function(properties) {
      $ctrl.definition.properties = properties;
      $ctrl.onChange({
        name: $ctrl.name,
        value: $ctrl.definition
      });
    };
  }
});
