/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.apis').component('apiDefinitionProperty', {
  replace: true,
  bindings: {
    name: '<',
    property: '<',
    propertyTypes: '<',
    isRequired: '&',
    onRename: '&',
    onDelete: '&'
  },
  templateUrl: 'apim/apis/partials/api-definition-property-component.html',
  controller: function($modal, $scope) {
    var $ctrl = this;

    this.$propertyName = function (newName) {
      if (arguments.length) {
        $ctrl.onRename({
          newName: newName,
          oldName: $ctrl.name
        });
        $ctrl.name = newName;
      }

      return $ctrl.name;
    };

    this.getTypeValue = function(type) {
      if (!type || !type.type) {
        return type;
      }

      return type.type + (type.format ? "-" + type.format : '');
    };

    this.$propertyType = function (type) {
      if (arguments.length) {
        // Setter
        var propertyType = $ctrl.propertyTypes[type];
        if (propertyType) {
          if (propertyType.$ref) {
            $ctrl.property.$ref = propertyType.$ref;
            delete $ctrl.property.type;
            delete $ctrl.property.format;
          } else {
            $ctrl.property.type = propertyType.type;
            if (propertyType.format) {
              $ctrl.property.format = propertyType.format;
            } else {
              delete $ctrl.property.format;
            }
            if (propertyType.items) {
              $ctrl.property.items = propertyType.items;
            } else {
              delete $ctrl.property.items;
            }
          }
        }
      } else {
        // Getter
        if ($ctrl.property && $ctrl.property.$ref) {
          var index = $ctrl.property.$ref.lastIndexOf('/');
          var name = $ctrl.property.$ref.substring(index + 1);
          return name;
        }
        if (!$ctrl.property || !$ctrl.property.type) {
          return 'object';
        }

        var returnType = $ctrl.getTypeValue($ctrl.property);
        if (returnType == "integer" && $ctrl.property.format == null) {
          returnType = "integer-int32";
        } else if (returnType == "number" && $ctrl.property.format == null) {
          returnType = "number-float";
        }
        return returnType;
      }
    };

    this.deleteProperty = function () {
      var scope = $scope.$new();

      scope.confirmation = {
        titleKey: 'api_property_delete_title',
        messageKey: 'api_property_delete_message',
        confirmed: function () {
          $ctrl.onDelete({
            name: $ctrl.name
          });
        }
      };

      $modal.open({
        templateUrl: 'apim/partials/confirmation.html',
        windowTemplateUrl: 'apim/partials/main-template.html',
        controller: 'ConfirmationController',
        size: 'sm',
        scope: scope
      });
    };

    this.$propertyRequired = function (required) {
      return $ctrl.isRequired({
        property: $ctrl.name,
        value: required
      });
    };
  }
});
