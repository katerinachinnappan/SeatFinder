/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Filters */

var developers = angular.module('apim.developers');

developers.filter('developersQuery', function() {
  return function (developers, query) {
    if(!developers) return developers;
    if(!query) return developers;
    var term = query.toLowerCase();
    return developers.filter(function(developer) {
      return (developer.displayName && developer.displayName.toLowerCase().indexOf(term) > -1);
    });
  };
});

developers.filter('noDevelopers', ['translateFilter', function(translateFilter) {
  return function (developers) {
    if (!developers || developers.length == 0) return translateFilter('developersNoDevelopersFound');
    return translateFilter('developersNoMatchingDevelopers');
  };
}]);

developers.filter('buttonLabel', ['translateFilter', function(translateFilter) {
  return function (showing) {
    if (!showing) return translateFilter('clientIdShow');
    return translateFilter('clientIdHide');
  };
}]);

developers.filter('averageCalls', ['translateFilter', 'translateMultipleFilter', function(translateFilter, translateMultipleFilter) {
  return function (resource) {
    if (resource.rateLimitTimeScale == "UNLIMITED") {
      return resource.averageCalls + " (" + translateFilter('rateLimitUnlimited') + ")";
    } else {
      var timeUnit = resource.rateLimitTimeScale;
      if (resource.rateLimitTimePeriod == 1) {
        timeUnit += "Singular";
      } else {
        timeUnit += "Plural";
      }
      timeUnit = translateFilter(timeUnit);
      return translateMultipleFilter('avgCallsEntry', {
        avgCalls: resource.averageCalls,
        callQuota: resource.rateLimitNumCalls,
        quotaPeriod: resource.rateLimitTimePeriod,
        quotaPeriodUnit: timeUnit
      });
    }
  };
}]);

developers.filter('communityTag', ['tagsForDeveloperFilter', function(tagsForDeveloperFilter) {
  return function (communities, selectedTags, allTags, tags, favourites) {
    if(!communities) return communities;
    if(!selectedTags) return communities;
    return communities.filter(function(community) {
      var tagsForDeveloper = tagsForDeveloperFilter(community, allTags, tags, favourites);
      if (!tagsForDeveloper || tagsForDeveloper.length == 0) return selectedTags.untagged;
      for (var i = 0; i < tagsForDeveloper.length; i++) {
        if (selectedTags[tagsForDeveloper[i].value]) return true;
      };
      return false;
    });
  };
}]);

developers.filter('tagsForDeveloper', function() {
  return function (developer, allTags, tags, favourites) {
    if(!developer || !allTags || !tags) return [];
    var tagsForThisDeveloper = allTags.filter(function(tag) {
      for (var i = 0; i < tag.documents.length; i++) {
        if (tag.documents[i].id == developer.id) return true;
      }
      return false;
    });
    var filtered = tags.filter(function(tag) {
      var ret = false;
      var matching = tagsForThisDeveloper.filter(function(thisTag) {
        return (thisTag.name == tag.label);
      });
      if (matching.length == 0 && favourites && tag.value == "favourite") {
        var favouriteSection = favourites.developer;
        if (favouriteSection) {
          ret = favouriteSection[developer.id];
        }
      } else {
        ret = matching.length > 0;
      }
      return ret;
    });
    return filtered;
  };
});

developers.filter('userDisplayName', function() {
  return function(user) {
    if (!user) return "";
    if (user.firstName && user.lastName) return user.firstName + " " + user.lastName;
    if (user.username) return user.username;
    return user.name;
  };
});

//
  // apis.filter('convertPlansToTags', function() {
    // 	return function (plans) {
      // 		var tags = [];
      // 		plans.forEach(function(plan) {
        // 			tags.push({
          // 				value: plan.planId,
          // 				className: "smallTag " + getClassForTag(plan.name),
          // 				label: plan.name,
          // 				deletable: true,
          // 				plan: plan
          // 			});
        // 		});
      // 		return tags;
      // 	};
    // });

