/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Controllers */

var developers = angular.module('apim.developers', ['ngResource']);

developers.controller('DevelopersCtrl', ['$scope', '$window', '$mdDialog', '$modal', 'DeveloperOrganization', 'CurrentUser', 'Organization', 'BluemixOrganization', 'Environment', 'UserRegistry', 'orgToTagFilter', 'communityToTagFilter', 'uniqueFilter', 'constructTagsFilter', developersController]);

function developersController($scope, $window, $mdDialog, $modal, DeveloperOrganization, CurrentUser, Organization, BluemixOrganization, Environment, UserRegistry, orgToTagFilter, communityToTagFilter, uniqueFilter, constructTagsFilter) {
  // expand full width by default
  $scope.panelExpanded = true;
  $scope.envLoaded = false;
  $scope.envChecked = false;
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      var hashArray = window.location.hash.split("/");
      var envId = hashArray[2];
      if (!$scope.environment || $scope.environment.id != envId) {
        var filtered = $scope.environments.filter(function(env) {
          return env.id == envId;
        });
        if (filtered.length > 0) {
          $scope.setEnvironment(filtered[0]);
          $scope.envLoaded = true;
        }
      } else {
        $scope.envLoaded = true;
      }
      $scope.envChecked = true;
    });
  });

  $scope.allDevelopersSelected = false;
  $scope.selectionChanged = function() {
    $scope.developerOrgs.forEach(function(developerOrg) {
      developerOrg.checked = $scope.allDevelopersSelected;
    });
  };
  $scope.$on('developerDeselected', function() {
    $scope.allDevelopersSelected = false;
  });

  $scope.processTags = function() {
    var tags = [];
    var tagLookup = {};
    $scope.developerOrgs.forEach(function(developerOrg) {
      // convert the tags from all orgs into list of all tags with list of referenced orgs
      if (developerOrg.tags) {
        var len = developerOrg.tags.length;
        for (var i=0;i<len;i++) {
          var tag = developerOrg.tags[i];
          if (!tagLookup[tag.name]) {
            tagLookup[tag.name] = {
              name: tag.name,
              documents: [{id: developerOrg.id, url: tag.url}]
            };
          } else {
            var lookup = tagLookup[tag.name];
            lookup.documents.push({id: developerOrg.id, url: tag.url});
          }
        } // end for
      }
    });
    // now convert lookup into usable array
    for (var tagName in tagLookup) {
      var tagInfo = tagLookup[tagName];
      tags.push(tagInfo);
    } // end for
    $scope.allTags = tags;
    $scope.tags = constructTagsFilter(tags, false, "tinyTag fixedWidthTag");
    var selectedTags = {};
    $scope.tags.forEach(function(tag) {
      selectedTags[tag.value] = true;
    });
    $scope.selectedTags = selectedTags;
  };
  $scope.selectAllTags = function(selected) {
    for (var tag in $scope.selectedTags) {
      if ($scope.selectedTags.hasOwnProperty(tag)) {
        $scope.selectedTags[tag] = selected;
      }
    }
  };
  $scope.refreshDeveloperOrgs = function() {
    $scope.devOrgsLoaded = false;
    $scope.developerOrgs = DeveloperOrganization.query({
      orgId: $scope.orgId,
      envId: $scope.environment.id
    });
    $scope.developerOrgs.$promise.then(function() {
      $scope.devOrgsLoaded = true;
      $scope.processTags();
    }, function() {
      $scope.devOrgsLoaded = true;
    });
  };
  $scope.$watch('environment', function() {
    if (!$scope.environment) return;
    $scope.idp = UserRegistry.get({orgId: $scope.orgId, idpId: $scope.environment.idp});
    $scope.refreshDeveloperOrgs();
  });

  $scope.addOrganisation = function(evt) {
    $modal.open({
      controller: 'AddOrgController',
      templateUrl: 'apim/developers/partials/addOrgDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        environment: function() { return $scope.environment; },
        orgId: function() { return $scope.orgId; },
        idp: function() { return $scope.idp; },
      },
    }).result.then(function() {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list of developers here
      $scope.refreshDeveloperOrgs();
    });
  };

  $scope.addBluemixOrganization = function(evt) {
    $mdDialog.show({
      controller: 'AddBluemixOrgController',
      templateUrl: 'apim/developers/partials/addBluemixOrgDialog.html',
      parent: angular.element(document.body),
      targetEvent: evt,
      focusOnOpen: false,
      locals: {
        environment: $scope.environment,
        orgId: $scope.orgId
      }
    }).then(function() {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list of developers here
      $scope.refreshDeveloperOrgs();
    }, function() {
      // called when dialog is cancelled - nothing to do
    });
  };

  $scope.exportData = function() {
    $window.open('proxy/orgs/' + $scope.orgId + '/analytics/billing');
  };
  $scope.showMessenger = function(recipients) {
    $modal.open({
      controller: 'SendMessageController',
      templateUrl: 'apim/developers/partials/sendMessageDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        userList: function () { return recipients },
        orgId: function () { return $scope.orgId }
      }
    });
  };

  $scope.messageDevelopers = function() {
    var selectedDevelopers = [];
    if ($scope.allDevelopersSelected) {
      selectedDevelopers = $scope.developerOrgs;
    } else {
      selectedDevelopers = $scope.developerOrgs.filter(function(developerOrg) {
        return (developerOrg.checked == true);
      });
    }
    if (selectedDevelopers.length == 0) return;
    var recipients = [];
    for (var i = 0; i < selectedDevelopers.length; i++) {
      recipients.push(selectedDevelopers[i].owner);
    }
    $scope.showMessenger(recipients);
  };
};

developers.controller('DeveloperCtrl', ['$scope', '$http', '$modal', '$filter', '$mdDialog', 'Member', 'translateFilter', developerController]);

function developerController($scope, $http, $modal, $filter, $mdDialog, Member, translateFilter) {
  $scope.deletableTags = true;
  $scope.roleNames = {
    "owner": $filter('translate')('developerRoleOwner'),
    "developer": $filter('translate')('developerRoleDeveloper'),
    "viewer": $filter('translate')('developerRoleViewer')
  };
  $scope.members = Member.query({
    orgId: $scope.developer.id
  });
  $scope.members.$promise.then(function() {
    // find the owner from all returned
    var len = $scope.members.length;
    var found = false;
    for (var i=0;i<len && !found;i++) {
      var member = $scope.members[i];
      var roleLen = member.roles.length;
      for (var j=0;j<roleLen;j++) {
        var role = member.roles[j];
        if (role.name == "owner") {
          $scope.owner = member.user;
          $scope.developer.owner = $scope.owner;
          found = true;
          break;
        }
      } // end for
    } // end for
  });
  $scope.resendInvite = function() {
    var timestamp = (new Date()).getTime();
    var messageId = "DevOrg_Invite_" + timestamp;
    $scope.notifyUser('sendingInvitations', [], "BUSY", false, messageId);
    $http.post("proxy/users/" + $scope.owner.id + "/resendInvite?idpOrganization=" + $scope.orgId + "&idpEnvironment=" + $scope.environment.id).success(function() {
      $scope.notifyUser('resendingInvitations', [], "SUCCESS", true, messageId);
    }).error(function() {
      $scope.notifyUser('errorResendingInvitations', [], "ERROR", false, messageId);
    });
  };
  $scope.editDeveloper = function() {
    $scope.editingDeveloper = true;
  };
  $scope.deleteDeveloper = function() {
    $scope.confirmation = {
      titleKey: 'confirmDelete',
      messageKey: 'confirmDeleteOrg',
      confirmed: function() {
        $scope.beingDeleted = true;
        $scope.developer.$delete({orgId: $scope.developer.id}).then(function() {
          $scope.developerOrgs.splice($scope.developerOrgs.indexOf($scope.developer), 1);
          $scope.processTags();
          $scope.beingDeleted = false;
        }, function() {
          $scope.beingDeleted = false;
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
  $scope.closeDeveloper = function() {
    $scope.editingDeveloper = false;
  };
  $scope.messageDeveloper = function() {
    $scope.showMessenger([$scope.owner]);
  };
  $scope.assignTag = function(tag) {
    if (tag.value == "favourite") {
      var dev = {
        displayName: $scope.developer.displayName,
        id: $scope.developer.id,
        name: $scope.developer.name,
        orgType: $scope.developer.orgType,
        envId: $scope.environment.id
      };
      $scope.setFavourite('developer', dev);
      $scope.processTags();
    } else {
      $http.post('proxy/orgs/' + $scope.developer.id + '/tags', {name: tag.label}).then(function(tagObject) {
        $scope.developer.tags.push(tagObject.data);
        $scope.processTags();
      });
    }
  };
  $scope.createTag = function($event) {
    if ($event.which == 13) {
      var existing = $scope.tags.filter(function(tag) {
        return (tag.label == $scope.newTag);
      });
      if (existing.length > 0) {
        $scope.tagDropdownOpen = false;
        return;
      }
      $http.post('proxy/orgs/' + $scope.developer.id + '/tags', {name: $scope.newTag}).then(function(tagObject) {
        $scope.developer.tags.push(tagObject.data);
        $scope.processTags();
      });
      $scope.newTag = "";
      $scope.tagDropdownOpen = false;
    }
  };
  $scope.deleteTag = function(tag) {
    if (tag.value == "favourite") {
      $scope.setFavourite('developer', $scope.developer, true);
      $scope.processTags();
    } else {
      $http['delete']('proxy/orgs/' + $scope.developer.id + '/tags/' + tag.label).then(function() {
        $scope.developer.tags = $scope.developer.tags.filter(function(thisTag) {
          return (thisTag.name != tag.value);
        });
        $scope.processTags();
      });
    }
  };
  $scope.saveDeveloper = function() {
    $scope.developer.$save({orgId: $scope.developer.id}).then(function(developer) {
      if ($scope.ownerChanged) {
        $scope.developer.$changeOwner({
          orgId: $scope.developer.id,
          newOwnerId: $scope.owner.id,
        }).then(function() {
          $scope.editingDeveloper = false;
          $scope.ownerChanged = false;
        });
      }
      $scope.developerOrgForm.$setPristine();
      $scope.saveDisabled = true;
    }, function(err) {
      // Save didnt work
    });
  };
  $scope.changeOwner = function(evt) {
    $modal.open({
      controller: 'AddUserDialogController',
      templateUrl: 'apim/users/partials/addUserDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        addOwner: function() { return true; },
        changeOwner: function() { return true; },
        envId: function() { return null; },
        idpConfig: function() {
          return {
            id: $scope.idp.id,
            type: $scope.idp.type,
            context: $scope.environment.id,
          };
        },
        isCatalogUsers: function() { return; },
        orgId: function() { return $scope.orgId; },
        roleList: function() { return []; },
        spaceId: function() { return $scope.spaceId; },
      },
    }).result.then(function(owner) {
      // Dialog will stay on screen for errors and will always follow the good path
      // when the create works. We can then refresh the list of developers here
      if (owner) {
        $scope.developer.$changeOwner({
          orgId: $scope.developer.id,
          newOwnerId: owner.id
        }).then(function() {
          $scope.refreshDeveloperOrgs();
        });
      }
    });
  };
  $scope.checkboxChanged = function() {
    if (!$scope.developer.checked) $scope.$emit('developerDeselected');
  };
  $scope.renderUserName = function(user) {
    var ret = "";
    if (user.status == 'pending') {
      ret = $filter('translate')('pending');
    }
    else if (user.firstName && user.firstName.toLowerCase() == 'admin') {
      ret = 'admin';
    } else {
      if (user.firstName) {
        ret = user.firstName;
      }
      if (user.lastName) {
        ret = ret + " " + user.lastName;
      }
    }
    return (ret);
  };
};

developers.controller('AddOrgController', ['$scope', '$modalInstance', '$q', 'Role', 'Organization', 'ApimUser', 'UserContext', 'UserRegistry', 'environment', 'orgId', 'idp', 'DeveloperOrganization', 'translateFilter', addOrgController]);

function addOrgController($scope, $modalInstance, $q, Role, Organization, User, UserContext, UserRegistry, environment, orgId, idp, DeveloperOrganization, translateFilter) {
  $scope.dataLoaded = false;
  $scope.saveDisabled = true;
  $scope.performingAdd = false;
  $scope.environment = environment;
  $scope.idpId = environment.idp;
  $scope.orgId = orgId;
  $scope.addOwner = true;
  $scope.selectedUser = null;
  $scope.tab = 1;
  $scope.roleList = [];
  $scope.userData = {
    email: ""
  };
  $scope.developerOrgs = DeveloperOrganization.query({
    orgId: $scope.orgId,
    envId: $scope.environment.id
  });

  UserRegistry.get({orgId: $scope.orgId, idpId: $scope.environment.idp}).$promise.then(
    function(idp) {
      $scope.idp = idp;
      $scope.provider = idp.type;
      $scope.dataLoaded = true;
    }
  );

  $scope.cancel = function() {
    $modalInstance.dismiss();
  };

  $scope.addOrganisation = function() {
    var duplicateName = false;
    var timestamp = (new Date()).getTime();
    var messageId = "DevOrg_Create_" + timestamp;
    $scope.developerOrgs.forEach(function(developerOrg) {
      if (developerOrg.displayName == $scope.newOrganizationName) {
        duplicateName = true;
        $scope.$root.notifyUser(translateFilter("duplicateDevOrg", {devOrgName: $scope.newOrganizationName}), [], "ERROR", false, messageId);
        }
    });

    if(!duplicateName) {
      $scope.performingAdd = true;
      $scope.$root.notifyUser('creatingDevOrg', [], "BUSY", false, messageId);
    // make the request using the local data
    var promise = null;
    var localData = null;
    if ($scope.tab == 1 && $scope.selectedUser != null) {
      localData = angular.copy($scope.selectedUser);
    } else {
      localData = {
        email: $scope.userData.email
      };
    }
    localData.context = environment.id;
    localData.idpId = $scope.idpId;
    localData.environment = environment.id;
    localData.providerOrg = $scope.orgId;
    // cannot get existing user on authurl
    if ($scope.provider == "authUrl") {
      promise = $scope.createUser(localData);
    } else {
      promise = $scope.getCreateUser(localData, environment.id);
    }
    if (promise) {
      promise.then(function(response) {
        var newOrg = new Organization({
          displayName: $scope.newOrganizationName,
          environment: $scope.environment.id,
          name: "",
          providerOrg: $scope.orgId,
          type: "appProvider"
        });
        newOrg.$save({userId: response.id}).then(function(theOrg) {
          $scope.$root.notifyUser('createdDevOrg', [], "SUCCESS", true, messageId);
          // Note: callback in $mdDialog.show() will perform the display refresh
          return $modalInstance.close(response);
        }, function(err) {
          $scope.performingAdd = false;
          $scope.$root.notifyUser('errorCreatingDevOrg', [], "ERROR", false, messageId);
        });
      }, function(err) {
        $scope.performingAdd = false;
        $scope.$root.notifyUser('errorCreatingDevOrg', [], "ERROR", false, messageId);
      });
    }
    }
  };

  $scope.createUser = function(user) {
    var newUser = new User(user);
    var ret = newUser.$create();
    return (ret);
  };

  $scope.getUserInContext = function(userId, context) {
    var ret = UserContext.query({
      context: context,
      userId: userId
    });
    return (ret.$promise);
  };

  $scope.getCreateUser = function(user, context) {
    var ret = $q.defer();
    // Try to get the user
    $scope.getUserInContext(user.username ? user.username : user.email, context).then(function(data) {
      ret.resolve(data);
    }, function(err) {
      if (err && err.status == 404) {
        $scope.createUser(user).then(function(data) {
          ret.resolve(data);
        }, function(err) {
          ret.reject(err);
        });
      } else {
        ret.reject(err);
      }
    });
    return (ret.promise ? ret.promise : ret);
  };

  // Called when the form is either invalid or has been changed
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.addOrgForm || $scope.addOrgForm.$invalid || $scope.addOrgForm.$pristine) {
      canSave = false;
    }
    if (($scope.provider == 'apim' || $scope.provider == 'scim') && $scope.tab == 1 && !$scope.selectedUser) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };

  $scope.$watch('addOrgForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('addOrgForm.$pristine', $scope.handleFormUpdate);
  $scope.$watch('selectedUser', $scope.handleFormUpdate);
};

developers.controller('AddBluemixOrgController', ['$scope', '$mdDialog', 'BluemixOrganization', 'environment', 'orgId', addBluemixOrgController]);

function addBluemixOrgController($scope, $mdDialog, BluemixOrganization, environment, orgId) {
  $scope.saveDisabled = true;
  $scope.performingAdd = false;
  $scope.environment = environment;
  $scope.orgId = orgId;

  $scope.cancel = function() {
    $mdDialog.cancel();
  };

  $scope.addBluemixOrganisation = function() {
    $scope.performingAdd = true;
    var timestamp = (new Date()).getTime();
    var messageId = "DevOrg_Create_" + timestamp;
    $scope.$root.notifyUser('creatingDevOrg', [], "BUSY", false, messageId);
    // make the request using the local data
    var newBluemixOrg = new BluemixOrganization({
      environment: $scope.environment.id,
      providerOrg: $scope.orgId,
      type: "appProvider"
    });
    newBluemixOrg.$save({email: $scope.bluemixEmailField}).then(function(response) {
      $scope.$root.notifyUser('createdDevOrg', [], "SUCCESS", true, messageId);
      $mdDialog.hide(response);
    }, function(err) {
      $scope.$root.notifyUser('errorCreatingDevOrg', [], "ERROR", false, messageId);
      $scope.performingAdd = false;
    });
  };
  // Called when the form is either invalid or has been changed
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.addOrgForm || $scope.addOrgForm.$invalid || $scope.addOrgForm.$pristine) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };

  $scope.$watch('addOrgForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('addOrgForm.$pristine', $scope.handleFormUpdate);
};

developers.controller('SendMessageController', ['$scope', '$modalInstance', 'DeveloperMessage', 'userList', 'orgId', sendMessageController]);

function sendMessageController($scope, $modalInstance, DeveloperMessage, userList, orgId) {
  $scope.saveDisabled = true;
  $scope.performingSend = false;
  $scope.userList = userList;
  $scope.orgId = orgId;

  $scope.cancel = function() {
    $modalInstance.dismiss();
  };

  $scope.send = function() {
    $scope.performingSend = true;
    var timestamp = (new Date()).getTime();
    var messageId = "DevOrg_Message_" + timestamp;
    if ($scope.userList.length == 1) {
      $scope.$root.notifyUser('sendingMessageSingular', [], "BUSY", false, messageId);
    } else {
      $scope.$root.notifyUser('sendingMessagePlural', {count: $scope.userList.length}, "BUSY", false, messageId);
    }
    // make the request using the local data
    var localData = {
      subject: $scope.subject,
      body: $scope.messageContent,
      recipientIds: [],
      sender: $scope.sender || undefined
    };
    var len = $scope.userList.length;
    for (var i = 0; i < len; i++) {
      if (localData.recipientIds.indexOf($scope.userList[i].id) < 0) {
        localData.recipientIds.push($scope.userList[i].id);
      }
    } // end for
    DeveloperMessage.send({orgId: $scope.orgId}, localData).$promise.then(function() {
      $scope.$root.notifyUser('messageSent', [], "SUCCESS", true, messageId);
      return $modalInstance.close();
    }, function() {
      $scope.performingSend = false;
      $scope.$root.notifyUser('messageSendFailed', [], "ERROR", false, messageId);
    });
  };

  // Called when the form is either invalid or has been changed
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.sendMessageForm || $scope.sendMessageForm.$invalid || $scope.sendMessageForm.$pristine) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };

  $scope.$watch('sendMessageForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('sendMessageForm.$pristine', $scope.handleFormUpdate);
};

developers.controller('DeveloperDetailController', ['$scope', '$window', '$modal', '$stateParams', '$http', '$q', '$mdDialog', 'Environment', 'Member', 'App', 'DeployedProduct', 'DeveloperOrganization', 'Subscription', 'CurrentUser', 'Organization', 'BluemixOrganization', 'orgToTagFilter', 'communityToTagFilter', 'uniqueFilter', 'constructTagsFilter', developerDetailsController]);

function developerDetailsController($scope, $window, $modal, $stateParams, $http, $q, $mdDialog, Environment, Member, App, DeployedProduct, DeveloperOrganization, Subscription, CurrentUser, Organization, BluemixOrganization, orgToTagFilter, communityToTagFilter, uniqueFilter, constructTagsFilter) {
  $scope.saveDisabled = true;
  $scope.$watch('selectedApp', function() {
    if (!$scope.selectedApp) return;
    $scope.appImageUrlStyle = "";
    var imageUrl = "proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerApps/" + $scope.selectedApp.appId + "/image";
    $http.get(imageUrl).success(function() {
      $scope.appImageUrlStyle = "background-image: url("+ imageUrl + ");";
    });
    $scope.subscriptions = null;
    $scope.retrieveSubscriptions();
  });
  $scope.retrieveSubscriptions = function() {
    var unregister = $scope.$watch('permissions', function() {
      if (!$scope.permissions) return;
      unregister();
      if ($scope.permissions[$scope.environment.id+'/catalog_productDeployment/view']) {
        $scope.subscriptions = Subscription.query({
          orgId: $scope.orgId,
          envId: $scope.environment.id,
          appId: $scope.selectedApp.appId
        });
      }
    });
  };
  $scope.dataLoaded = false;
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      if (!$scope.environment || $scope.environment.id != $stateParams.id) {
        var filtered = $scope.environments.filter(function(env) {
          return env.id == $stateParams.id;
        });
        if (filtered.length > 0) {
          $scope.setEnvironment(filtered[0]);
          var unregister = $scope.$watch('permissions', function() {
            if (!$scope.permissions) return;
            unregister();
            if ($scope.permissions[$scope.environment.id+'/catalog_productDeployment/view']) {
              $scope.productVersions = DeployedProduct.query({
                orgId: $scope.orgId,
                envId: $scope.environment.id
              });
              $scope.productVersions.$promise.then(function() {
                if ($scope.selectedApp) $scope.retrieveSubscriptions();
              });
            }
          });
          $scope.developerOrgs = DeveloperOrganization.query({
            orgId: $scope.orgId,
            envId: $scope.environment.id
          });
          $scope.developerOrgs.$promise.then(function() {
            var matching = $scope.developerOrgs.filter(function(org) {
              return (org.id == $stateParams.developer);
            });
            if (matching.length > 0) {
              $scope.developer = matching[0];
              $scope.apps = App.query({
                orgId: $scope.orgId,
                envId: $scope.environment.id,
                consumerOrg: $scope.developer.id
              });
              var members = Member.query({
                orgId: $scope.developer.id,
                role: "owner"
              });
              members.$promise.then(function() {
                if (members.length > 0) {
                  $scope.owner = members[0].user;
                }
              });
              $q.all([$scope.apps.$promise, members.$promise]).then(function() {
                $scope.dataLoaded = true;
              });
            } else {
              $scope.dataLoaded = true;
            }
          });
        }
      }
    });
  });
  $scope.revokeApp = function() {
    $scope.suspendingAction = true;
    $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerOrgs/" + $scope.developer.id + "/apps/" + $scope.selectedApp.appId + "/suspend").success(function(app) {
      $scope.suspendingAction = false;
      $scope.selectedApp.state = app.state;
    });
  };
  $scope.resumeApp = function() {
    $scope.suspendingAction = true;
    $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerOrgs/" + $scope.developer.id + "/apps/" + $scope.selectedApp.appId + "/resume").success(function(app) {
      $scope.suspendingAction = false;
      $scope.selectedApp.state = app.state;
    });
  };
  $scope.deleteDeveloper = function() {
    $scope.confirmation = {
      titleKey: 'confirmDelete',
      messageKey: 'confirmDeleteOrg',
      confirmed: function() {
        $scope.beingDeleted = true;
        $scope.developer.$delete({orgId: $scope.developer.id}).then(function() {
          window.location.hash = "#/manage/organizations";
        }, function() {
          $scope.beingDeleted = false;
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
  $scope.messageDeveloper = function() {
    $scope.showMessenger([$scope.owner]);
  };
  $scope.showMessenger = function(recipients) {
    $modal.open({
      controller: 'SendMessageController',
      templateUrl: 'apim/developers/partials/sendMessageDialog.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      scope: $scope,
      resolve: {
        userList: function () { return recipients },
        orgId: function () { return $scope.orgId }
      }
    });
  };

  $scope.saveDeveloper = function() {
    $scope.developer.$save({orgId: $scope.developer.id}).then(function(developer) {
      if ($scope.ownerChanged) {
        $scope.developer.$changeOwner({
          orgId: $scope.developer.id,
          newOwnerId: $scope.owner.id
        }).then(function() {
          $scope.editingDeveloper = false;
          $scope.ownerChanged = false;
        });
      }
      $scope.developerOrgForm.$setPristine();
      $scope.saveDisabled = true;
    }, function(err) {
      // Save didnt work
    });
  };

  // Called when the form is either invalid or has been changed
  $scope.handleFormUpdate = function() {
    var canSave = true;
    if (!$scope.developerOrgForm || $scope.developerOrgForm.$invalid || $scope.developerOrgForm.$pristine) {
      canSave = false;
    }
    $scope.saveDisabled = !canSave;
  };
  $scope.$watch('developerOrgForm.$invalid', $scope.handleFormUpdate);
  $scope.$watch('developerOrgForm.$pristine', $scope.handleFormUpdate);
};

developers.controller('DevSubscriptionController', ['$scope', '$modal', devSubscriptionController]);

function devSubscriptionController($scope, $modal) {
  $scope.productVersions.$promise.then(function() {
    var sections = $scope.subscription.planURL.split("/");
    var productName = $scope.subscription.product.name;
    var productVersionString = $scope.subscription.product.version;
    var planName = sections[sections.length - 1];
    var productVersions = $scope.productVersions.filter(function(thisProductVersion) {
      return (productName == thisProductVersion.productName && productVersionString == thisProductVersion.productVersion);
    });
    if (productVersions.length > 0) {
      $scope.productVersion = productVersions[0];
      $scope.plan = $scope.productVersion.document.plans[planName];
    }
  });
  $scope.remove = function() {
    $scope.confirmation = {
      titleKey: 'confirmRemoveSubscriptionTitle',
      messageKey: 'confirmRemoveSubscription',
      confirmed: function() {
        $scope.subscription.$remove({
          orgId: $scope.orgId,
          envId: $scope.environment.id,
          appId: $scope.selectedApp.appId,
          subscriptionId: $scope.subscription.id
        }, function() {
          $scope.retrieveSubscriptions();
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
  $scope.migrate = function() {
    $modal.open({
      templateUrl: 'apim/developers/partials/migrate.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'SubscriptionMigrationController',
      size: 'lg',
      scope: $scope
    });
  };
};

developers.controller('SubscriptionMigrationController', ['$scope', '$http', '$modalInstance', subscriptionMigrationController]);

function subscriptionMigrationController($scope, $http, $modalInstance) {
  if (!$scope.productVersions && $scope.products) $scope.productVersions = $scope.products;
  $scope.cancel = function() {
    $modalInstance.dismiss('cancel');
  };
  $scope.planVersionSelected = function(selectedPlanName, selectedProductVersion) {
    $scope.selectedPlanName = selectedPlanName;
    $scope.selectedProductVersion = selectedProductVersion;
  };
  $scope.migrateVersion = function(planNameToMigrateTo, productVersionToMigrateTo) {
    $scope.$parent.xhrProcessing = true;
    var promise = $http.post('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id +
      '/products/' + productVersionToMigrateTo.productName + ':' + productVersionToMigrateTo.productVersion +
      '/' + planNameToMigrateTo + '/migrate-subscription', {
        subscriptions: [$scope.subscription.id]
      });
    promise.then(
      function(data) {
        $scope.retrieveSubscriptions();
        if ($scope.$parent) $scope.$parent.xhrProcessing = false;
      },
      function() {
        if ($scope.$parent) $scope.$parent.xhrProcessing = false;
      }
    );
    $modalInstance.close();
  };
};

