/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Controllers */

var subscriptions = angular.module('apim.subscriptions', ['ngResource']);

subscriptions.controller('SubscriptionsController', ['$scope', '$mdDialog', '$modal', '$q', '$http', 'Subscriptions', 'App', 'ProviderApp', 'DeployedProduct', 'DeveloperOrganization', 'Environment', subscriptionsController]);

function subscriptionsController($scope, $mdDialog, $modal, $q, $http, Subscriptions, App, ProviderApp, DeployedProduct, DeveloperOrganization, Environment) {
  $scope.envLoaded = false;
  $scope.envChecked = false;
  $scope.imageUrlCache = {};
  $scope.$watch('currentOrg', function() {
    if (!$scope.currentOrg) return;
    $scope.$watch('environments', function() {
      if (!$scope.environments) return;
      var hashArray = window.location.hash.split("/");
      var envId = hashArray[2];
      if (!$scope.environment || $scope.environment.id != envId) {
        var filtered = $scope.environments.filter(function(env) {
          return env.id == envId;
        });
        if (filtered.length > 0) {
          $scope.setEnvironment(filtered[0]);
          $scope.envLoaded = true;
        }
      } else {
        $scope.envLoaded = true;
      }
      $scope.envChecked = true;
      if ($scope.environment) {
        $scope.loadingPlanVersions = true;
        $scope.productVersions = DeployedProduct.query({
          orgId: $scope.orgId,
          envId: $scope.environment.id
        });
        $scope.productVersions.$promise.then(function() {
          $scope.loadingPlanVersions = false;
        });
        $scope.developerOrgs = DeveloperOrganization.query({
          orgId: $scope.orgId,
          envId: $scope.environment.id
        });
      }
    });
  });
  $scope.createApp = function() {
    var modalInstance = $modal.open({
      templateUrl: 'apim/apps/partials/add-application.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AppCreateController',
      size: 'md',
      scope: $scope
    });
    modalInstance.result.then(function() {
      $scope.refreshSubscriptions();
    });
  };
  $scope.refreshSubscriptions = function() {
    $scope.subscriptionsLoaded = false;
    // $scope.providerApps = ProviderApp.query({
      // 	orgId: $scope.orgId,
      // 	envId: $scope.environment.id
      // });
    $scope.consumerApps = App.query({
      orgId: $scope.orgId,
      envId: $scope.environment.id
    });
    $scope.rawSubscriptions = Subscriptions.query({
      orgId: $scope.orgId,
      envId: $scope.environment.id
    });
    $q.all([$scope.rawSubscriptions.$promise, $scope.consumerApps.$promise, $scope.developerOrgs.$promise/*$scope.providerApps.$promise*/]).then(function() {
      $scope.processSubscriptions();
      $scope.subscriptionsLoaded = true;
    }, function() {
      $scope.subscriptionsLoaded = true;
    });
  };
  // reformat the raw data to give aggregated view data
  $scope.processSubscriptions = function() {
    $scope.subscriptionsApp = [];
    $scope.subscriptionsProd = [];
    var appLookup = {};
    // seed the appLookup hash with known apps
    $scope.consumerApps.forEach(function(app) {
      var consumerOrg;
      var developerOrg = $scope.developerOrgs.filter(function(devOrg) {
        return (devOrg.id == app.orgId);
      });
      if (developerOrg.length == 1) {
        consumerOrg = developerOrg[0];
      } else if (app.orgId == $scope.orgId) {
        consumerOrg = $scope.currentOrg;
      } else {
        consumerOrg = app.orgId;
      }
      appLookup[app.appId] = {
        application: app,
        consumerOrg: consumerOrg,
        subs: []
      };
      $scope.subscriptionsApp.push(appLookup[app.appId]);
    });
    // $scope.providerApps.forEach(function(app) {
      // 	appLookup[app.appId] = {
        // 		application: app,
        // 		consumerOrg: app.orgID,
        // 		subs: []
        // 	};
      // 	$scope.subscriptionsApp.push(appLookup[app.appId]);
      // });
    var prodLookup = {};
    var len = $scope.rawSubscriptions.length;
    for (var i=0;i<len;i++) {
      var sub = $scope.rawSubscriptions[i];
      var subscription = null;
      var prod = null;
      // group products by product and plan
      var prodPlan = sub.product.id + ":" + sub.plan.name;
      // check applications
      if (appLookup[sub.application.appId]) {
        // already seen this app, add the product and plans to the subs list
        subscription = appLookup[sub.application.appId];
        prod = {
          product: sub.product,
          plan: sub.plan,
          id: sub.id,
          active: true
        };
        subscription.subs.push(prod);
      } else {
        // first time app
        subscription = {
          application: sub.application,
          consumerOrg: sub.consumerOrg,
          subs: []
        };
        prod = {
          product: sub.product,
          plan: sub.plan,
          id: sub.id,
          active: true
        };
        subscription.subs.push(prod);
        // update x-ref
        appLookup[sub.application.appId] = subscription;
        $scope.subscriptionsApp.push(subscription);
      }
      // check products
      if (prodLookup[prodPlan]) {
        // already seen this product and plan, add the app to the subs list
        (function() {
          var subscription = prodLookup[prodPlan];
          var app = {
            application: sub.application,
            consumerOrg: sub.consumerOrg,
            appImageUrlStyle: "",
            active: true
          };
          $scope.getAppImageUrl(sub.application.appId).then(function(imageUrl) {
            if (imageUrl) {
              app.appImageUrlStyle = "background-image: url("+ imageUrl + ");";
            }
          });
          subscription.subs.push(app);
        })();
      } else {
        (function() {
          var subscription = {
            product: sub.product,
            plan: sub.plan,
            subs: []
          };
          var app = {
            application: sub.application,
            consumerOrg: sub.consumerOrg,
            appImageUrlStyle: "",
            active: true
          };
          $scope.getAppImageUrl(sub.application.appId).then(function(imageUrl) {
            if (imageUrl) {
              app.appImageUrlStyle = "background-image: url("+ imageUrl + ");";
            }
          });
          subscription.subs.push(app);
          // update x-ref
          prodLookup[prodPlan] = subscription;
          $scope.subscriptionsProd.push(subscription);
        })();
      }
    } // end for
  };
  $scope.$watch('environment', function() {
    if (!$scope.environment) return;
    $scope.refreshSubscriptions();
  });
  if (typeof(localStorage) !== "undefined") {
    $scope.view = localStorage.getItem("apim-subscriptions-view");
  }
  $scope.setView = function(view) {
    $scope.view = view;
    if (typeof(localStorage) !== "undefined") {
      localStorage.setItem("apim-subscriptions-view", view);
    }
  };
  $scope.getAppImageUrl = function(appId) {
    var ret = null;
    // we cache the deferred so that we only ever make one request for each URL and then
    // everyone can wait on it
    if ($scope.imageUrlCache[appId]) {
      ret = $scope.imageUrlCache[appId];
    } else {
      var imageUrl = "proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerApps/" + appId + "/image";
      ret = $q.defer();
      $scope.imageUrlCache[appId] = ret;
      var promise = $http.get(imageUrl);
      // returned deferred always succeeds - we just send empty value if the real image is missing
      promise.then(function() {
        ret.resolve(imageUrl);
      }, function(err) {
        ret.resolve("");
      });
    }
    return ret.promise;
  };
};

subscriptions.controller('SubscriptionController', ['$scope', '$http', '$modal', subscriptionController]);

function subscriptionController($scope, $http, $modal) {
  $scope.appImageUrlStyle = "";
  $scope.getAppImageUrl($scope.subscription.application.appId).then(function(imageUrl) {
    if (imageUrl) {
      $scope.appImageUrlStyle = "background-image: url("+ imageUrl + ");";
    }
  });
  $scope.subscribeApp = function() {
    var modalInstance = $modal.open({
      templateUrl: 'apim/subscriptions/partials/subscribe.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'SubscribeController',
      size: 'md',
      scope: $scope
    });
    modalInstance.result.then(function() {
      $scope.refreshSubscriptions();
    });

  };
  $scope.deleteApp = function() {
    $scope.confirmation = {
      title: 'subscriptionsDeleteApplication',
      messageKey: 'subscriptionsDeleteApplicationDescription',
      confirmed: function() {
        $http.delete('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + '/providerApps/' + $scope.subscription.application.appId).success(function () {
          $scope.refreshSubscriptions();
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
  $scope.deleteSubscription = function(subscription) {
    $scope.confirmation = {
      title: 'subscriptionsDeleteSubscriptionTitle',
      messageKey: 'subscriptionsDeleteSubscriptionDescription',
      confirmed: function() {
        $http.delete('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + '/providerApps/' + $scope.subscription.application.appId + '/subscriptions/' + subscription.id).success(function () {
          $scope.refreshSubscriptions();
        });
      },
      rejected: function() {
      }
    };
    $modal.open({
      templateUrl: 'apim/partials/confirmation.html',
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'ConfirmationController',
      size: 'sm',
      scope: $scope
    });
  };
  $scope.suspendApp = function() {
    $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerOrgs/" + $scope.subscription.consumerOrg.id + "/apps/" + $scope.subscription.application.appId + "/suspend").success(function(app) {
      $scope.refreshSubscriptions();
    });
  };
  $scope.resumeApp = function() {
    $http.put("proxy/orgs/" + $scope.orgId + "/environments/" + $scope.environment.id + "/consumerOrgs/" + $scope.subscription.consumerOrg.id + "/apps/" + $scope.subscription.application.appId + "/resume").success(function(app) {
      $scope.refreshSubscriptions();
    });
  };
};

subscriptions.controller('SubscriptionProdController', ['$scope', '$http', subscriptionProdController]);

function subscriptionProdController($scope, $http) {
};

subscriptions.controller('SubscribeController', ['$scope', '$http', '$modalInstance', SubscribeController]);

function SubscribeController($scope, $http, $modalInstance) {
  if (!$scope.products) {
    // coming from Community page, $scope won't have products
    $scope.loadingPlanVersions = true;
    $scope.refreshProducts().then(function(products) {
      // refreshProducts sets up $scope.products
      // no need to handle returned products here
      $scope.loadingPlanVersions = false;
      setProdVersionAndApp();
    });
  }

  setProdVersionAndApp();

  function setProdVersionAndApp() {
    if (!$scope.productVersions && $scope.products) {
      $scope.productVersions = $scope.products;
    }
    if (!$scope.application && $scope.subscription) {
      $scope.application = $scope.subscription.application;
    }
  }

  $scope.planVersionSelected = function(planName, productVersion) {
    $scope.selectedPlanName = planName;
    $scope.selectedProductVersion = productVersion;
  };
  $scope.subscribeToPlan = function(planName, productVersion) {
    var planURL = productVersion.url + "/plans/" + planName;
    var spaceUrl = "";

    if ($scope.spaceId) {
      spaceUrl = "/spaces/" + $scope.spaceId;
    }

    $scope.subscribingToPlan = true;
    $http.post('proxy/orgs/' + $scope.orgId + '/environments/' + $scope.environment.id + spaceUrl + '/providerApps/' + $scope.application.appId + '/subscriptions', {planURL: planURL}).success(
      function() {
        $scope.subscribingToPlan = false;
        $modalInstance.close();
      }).error(function() {
        $scope.subscribingToPlan = false;
      });
  };
  $scope.cancel = function() {
    $modalInstance.close();
  }
};

