/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var apim = angular.module('apim');

apim.controller('InformationController', ['$scope', '$modalInstance', informationController]);

function informationController($scope, $modalInstance) {
  $scope.accept = function() {
    $scope.information.accepted();
    $modalInstance.close();
  };
}

apim.controller('redirectInformationController', ['$scope', '$modalInstance', redirectInformationController]);

function redirectInformationController($scope, $modalInstance) {
}

apim.controller('FeedbackController', ['$scope', '$http', feedbackController]);

function feedbackController($scope, $http) {
  $scope.choice = "Positive";
  $scope.close = function() {
    $scope.$parent.feedbackVisible = false;
  };
  $scope.checkEscape = function($event) {
    if ($event.keyCode == 27) {
      $scope.$parent.feedbackVisible = false;
    }
  };
  $scope.submit = function() {
    var sendData = {
      rating: $scope.choice,
      comments: $scope.feedbackText
    };
    var timestamp = (new Date()).getTime();
    var messageId = "sendingFeedback-" + timestamp;
    $scope.notifyUser('sendingFeedback', [], "BUSY", false, messageId);
    var uri = "proxy/feedback";
    $http.post(uri, sendData).then(function() {
      $scope.notifyUser('sentFeedback', [], "SUCCESS", true, messageId);
      $scope.$parent.feedbackVisible = false;
    }, function(err) {
      $scope.notifyUser('errorSendingFeedback', [], "ERROR", false, messageId);
      $scope.$parent.feedbackVisible = false;
    });
  };
}

apim.controller('InitialController', ['$scope', '$rootScope', '$location', initialController]);

function initialController($scope, $rootScope, $location) {
  var unregister = $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;
    unregister();
    // need to use permissions to see if we can actually use the views
    var tryCatalogs = function() {
      // catalogs will always succeed now since we don't check org_catalogs/view any more
      $scope.setVisibleSection('catalogs');
      $scope.navigate('catalogs', 'catalogs', 'catalogs');
      return true;
    };
    var tryDesign = function() {
      var ret = false;
      // try to fall back on products if APIs are unavailable
      if ($scope.permissions['org_draftApis/view']) {
        $scope.setVisibleSection('design');
        setTimeout(function() {
          $scope.navigate('design', 'apis', 'design/apis');
        }, 0);
        ret = true;
      } else if ($scope.permissions['org_draftProducts/view']) {
        $scope.setVisibleSection('design');
        setTimeout(function() {
          $scope.navigate('design', 'products', 'design/products');
        }, 0);
        ret = true;
      }
      return ret;
    };
    if ($rootScope.experiencedUser) {
      if (!tryCatalogs()) {
        tryDesign();
      }
    } else {
      if (!tryDesign()) {
        tryCatalogs();
      }
    }
  });
}

apim.controller('InitialCatalogController', ['$scope', initialCatalogController]);

function initialCatalogController($scope) {
  var unregister = $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;
    unregister();
    var hashArray = window.location.hash.split("/");
    var envId = hashArray[2];
    var targetLocation = "";
    // need to use permissions to see if we can actually use the views
    if ($scope.permissions[envId + '/catalog_productDeployment/view']) {
      targetLocation = "#/catalogs/" + envId + "/products";
    } else if ($scope.permissions[envId + '/<<_approvalAnyAction_>>']) {
      targetLocation = "#/catalogs/" + envId + "/approvals";
    } else if ($scope.permissions[envId + '/catalog_developers/view'] || $scope.permissions[envId + '/catalog_applications/view'] || $scope.permissions[envId + '/catalog_planSubscriptions/view']) {
      targetLocation = "#/catalogs/" + envId + "/community";
    } else if ($scope.permissions[envId + '/catalog_members/view']) {
      targetLocation = "#/catalogs/" + envId + "/users";
    } else if ($scope.permissions[envId + '/catalog_environmentAnalytics/view']) {
      targetLocation = "#/catalogs/" + envId + "/analytics";
    } else if ($scope.permissions[envId + '/catalog_catalogSettings/view']) {
      targetLocation = "#/catalogs/" + envId + "/settings";
    } else {
      // no permission, land on products - user will see a message about no permissions
      targetLocation = "#/catalogs/" + envId + "/products";
    }
    if (targetLocation) {
      setTimeout(function() {
        window.location.hash = targetLocation;
      }, 0);
    }
  });
}

apim.controller('InitialSpaceController', ['$scope', initialSpaceController]);

function initialSpaceController($scope) {
  var unregister = $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;
    unregister();
    var hashArray = window.location.hash.split("/");
    var envId = hashArray[2];
    var spaceId = hashArray[4];
    var targetLocation = "";
    // need to use permissions to see if we can actually use the views
    if ($scope.permissions[spaceId + '/space_productDeployment/view']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/products";
    } else if ($scope.permissions[spaceId + '/<<_approvalAnyAction_>>']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/approvals";
    } else if ($scope.permissions[spaceId + '/space_developers/view'] || $scope.permissions[spaceId + '/space_applications/view'] || $scope.permissions[spaceId + '/space_planSubscriptions/view']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/community";
    } else if ($scope.permissions[spaceId + '/space_members/view']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/users";
    } else if ($scope.permissions[spaceId + '/space_spaceAnalytics/view']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/analytics";
    } else if ($scope.permissions[spaceId + '/space_spaceSettings/view']) {
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/settings";
    } else {
      // no permission, land on products - user will see a message about no permissions
      targetLocation = "#/catalogs/" + envId + "/spaces/" + spaceId + "/products";
    }
    if (targetLocation) {
      setTimeout(function() {
        window.location.hash = targetLocation;
      }, 0);
    }
  });
}

apim.controller('InitialAdminController', ['$scope', initialAdminController]);

function initialAdminController($scope) {
  var unregister = $scope.$watch('permissions', function() {
    if (!$scope.permissions) return;
    unregister();
    var tryRoles = function() {
      var ret = false;
      // try to fall back on products if APIs are unavailable
      if ($scope.permissions['org_organizationManagement/view']) {
        $scope.setVisibleSection('admin');
        setTimeout(function() {
          $scope.navigate('roles', 'admin', 'admin/roles');
        }, 0);
        ret = true;
      }
      return ret;
    };
    var tryMembers = function() {
      var ret = false;
      // try to fall back on products if APIs are unavailable
      if ($scope.permissions['org_members/view']) {
        $scope.setVisibleSection('admin');
        setTimeout(function() {
          $scope.navigate('roles', 'admin', 'admin/users');
        }, 0);
        ret = true;
      }
      return ret;
    };
    if (!tryRoles()) {
      tryMembers();
    }
  });
}

