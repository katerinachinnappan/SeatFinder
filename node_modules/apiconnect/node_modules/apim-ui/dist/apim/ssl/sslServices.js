/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2015, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

/* Services */

var sslProfiles = angular.module('apim.tls');

var filterProfileKeys = {
  id: true,
  orgId: true,
  certs: true,
  url: true,
  defaultSystemProfile: true,
  '$resolved': true
};

sslProfiles.factory('SSLProfile', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/ssl-profiles/:objId', {}, {
      query: {method:'GET', params:{orgId: '@orgId'}, isArray:true, transformResponse: function(data) {
        // data is a string, as the serial number will be auto interpreted as a double
        // if we do native json parsing first, which permanently loses the actual info
        if (typeof data == "string") {
          // must check for HTML coming back (e.g. the login screen)
          if (data.substr(0,1) != "<") {
            var certString = data;
            var safeString = certString.replace(/\"serialNumber\":([0-9]+)/g,
              function(match, captureGroup1, offset, string) {
                return "\"serialNumber\":\"" + captureGroup1 + "\"";
              });
            data = JSON.parse(safeString);
          }
        }
        return (data);
      }},
      get: {method:'GET', params:{orgId: '@orgId', objId: '@objId'}, transformResponse: function(data) {
        // data is a string, as the serial number will be auto interpreted as a double
        // if we do native json parsing first, which permanently loses the actual info
        if (typeof data == "string") {
          // must check for HTML coming back (e.g. the login screen)
          if (data.substr(0,1) != "<") {
            var certString = data;
            var safeString = certString.replace(/\"serialNumber\":([0-9]+)/g,
              function(match, captureGroup1, offset, string) {
                return "\"serialNumber\":\"" + captureGroup1 + "\"";
              });
            data = JSON.parse(safeString);
          }
        }
        return (data);
      }},
      update: {method:'PUT', params:{orgId: '@orgId', objId: '@objId'}, transformRequest: function(data, headers) {
        var ret = data;
        if (angular.isObject(data)) {
          // API cant handle some fields it sent to us being sent back...
            var filtered = {};
          for (var key in data) {
            if (data.hasOwnProperty(key) && !filterProfileKeys[key]) {
              filtered[key] = data[key];
            }
          } // end for
          ret = angular.toJson(filtered);
        }
        return (ret);
      }},
      save: {method:'POST', params:{orgId: '@orgId'}},
      remove: {method:'DELETE', params:{orgId: '@orgId', objId: '@objId'}}
    });
  }]);


sslProfiles.factory('TruststoreCerts', ['$resource',
  function($resource){
    return $resource('proxy/orgs/:orgId/ssl-profiles/:objId/truststore/certs/:certId', {}, {
      query: {method:'GET', params:{orgId: '@orgId', objId: '@objId'}, isArray:true},
      remove: {method: 'DELETE', params:{orgId: '@orgId', objId: '@objId', certId:'@certId'}}
    });
  }]);

