/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.datasources')
  .controller('DataSourceDiscoverController',
    function DataSourceDiscoverController (
      $document,
      $modal,
      $q,
      $rootScope,
      $scope,
      $state,
      $stateParams,
      DataSourceDefinition,
      ModalHelper,
      ModelDefinition,
      Project
    ) {
      var vm = this;
      var db = vm.dbName = $stateParams.id;
      var schemaQueryParam = vm.dbName = $stateParams.all;

      var DSD = DataSourceDefinition;

      var discoveredDefs = {};
      vm.xhrProcessing = true;
      // "true" -> true, "false" -> false
      var allFlag = schemaQueryParam === 'true';
      // Default `views` flag to `all`
      var viewsFlag = allFlag;
      $q.all([
        DSD.prototype$getSchema({id: db, options: {all: allFlag, views: viewsFlag}}).$promise,
        ModelDefinition.find({filter: {where: {readonly: false}}}).$promise
      ])
        .then(function (results) {
          vm.tables = results[0].models || [];

          var modelNames = {};
          results[1].forEach(function (model) {
            modelNames[model.name.toLowerCase()] = model.name;
          });

          vm.tables.forEach(function (table) {
            table.dupModel = modelNames[table.name.toLowerCase()];
            table.schema = table.schema || table.owner;
          });

          return true;
        })
        .finally(xhrDone);

      var selectedProps = vm.selectedProps = {};
      vm.selectProps = function (table) {

        $scope.getProps = function () {
          discoveredDefs[table.name] = discoveredDefs[table.name] ||
            DSD.prototype$discoverModelDefinition({
              id: db,
              tableName: table.name,
              // Pass in owner/schema
              options: {schema: table.schema}
            }).$promise.then(function (response) {
              return response.status;
            });
          return discoveredDefs[table.name];
        };
        $scope.selected = selectedProps[table.name] || [];

        $modal.open({
          controller: 'DSDPropController as vm',
          templateUrl: 'apim/datasources/partials/discoverProps.html',
          windowTemplateUrl: 'apim/partials/main-template.html',
          size: 'lg',
          scope: $scope
        }).result.then(function(selected) {
          selectedProps[table.name] = selected;
          formCheckValidity();
        });
      };

      vm.numSelected = function (tableName) {
        return !vm.selectedProps[tableName] ? 0 :
          Object.keys(vm.selectedProps[tableName].properties).length;
      };

      vm.tableClick = function (table) {
        var selected = selectedProps[table.name];
        if (selected) {
          delete selectedProps[table.name];
          formCheckValidity();
        }
        else {
          vm.selectProps(table);
        }
      };

      vm.submit = function () {
        if (Object.keys(selectedProps).length < 1) {
          ModalHelper.confirm({
            title: 'DSDFormNoneSelectedTitle',
            message: 'DSDFormNoneSelectedBody'
          });

          return;
        }

        vm.xhrProcessing = true;
        $rootScope.notifyUser('DSDSaving', [], 'BUSY', false, getTime());

        $q.all(Object.keys(selectedProps).map(function(tableName) {
          return DSD.prototype$createModel({id: db}, {
            discoveredDef: selectedProps[tableName]
          }).$promise;
        }))
          .then(function () {
            return Project.exportSwagger().$promise;
          })
          .then(function () {
            $rootScope.notifyUser('DSDSaved', [], 'SUCCESS', true, getTime());
            $state.go('models');
            return true;
          })
          .catch(function () {
            $rootScope.notifyUser('DSDSaveFailed', [], 'ERROR', true, getTime());
          })
          .finally(xhrDone);
      };

      function formCheckValidity () {
        var empty = angular.equals(selectedProps, {});
        vm.discoverForm[empty ? '$setPristine' : '$setDirty']();
      }

      function getTime () {
        return new Date().getTime();
      }

      function xhrDone () {
        vm.xhrProcessing = false;
        return true;
      }
    }
  );

