/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.datasources')
  .controller('DSDPropController',
    function DSDPropController($modalInstance, $scope) {
      var vm = this;
      vm.getProps = $scope.getProps;
      vm.selected = $scope.selected;

      vm.xhrProcessing = true;
      vm.props = {};
      vm.table = {};
      vm.getProps().then(function (table) {
        vm.props = angular.merge({}, table.properties);
        vm.table = table;

        if (!Array.isArray(vm.selected)) {
          vm.selected = Object.keys(vm.selected.properties);
        }

        if (!vm.selected.length) {
          toggleAll();
        }

        vm.xhrProcessing = false;
      })

      vm.cancel = function() {
        $modalInstance.dismiss();
      }
      vm.select = select;
      vm.toggleAll = toggleAll;

      vm.submit = function() {
        var selected = false;
        if (vm.selected.length) {
          selected = angular.merge({}, vm.table);
          Object.keys(vm.props).forEach(function (prop) {
            if (vm.selected.indexOf(prop) < 0) {
              delete selected.properties[prop];
            }
          })
        }
        $modalInstance.close(selected);
      };

      vm.allChecked = function () {
        return Object.keys(vm.props).length==vm.selected.length
      };

      vm.isIndeterminate = function () {
        var len = vm.selected.length;
        return len > 0 && len !== Object.keys(vm.props).length &&
          Object.keys(vm.props).filter(function (prop) {
            return !vm.props[prop].required;
          }).length > 0;
      };

      function select (name, prop) {
        var index = vm.selected.indexOf(name);
        if (index > -1) {
          if (!prop.required) {
            vm.selected.splice(index, 1);
          }
          return;
        }

        vm.selected.push(name);
      }

      function selectProps (select) {
        vm.selected = Object.keys(vm.props).filter(function (prop) {
          return select || vm.props[prop].required;
        });
        return vm.selected;
      }

      function toggleAll () {
        // If there aren't any keys selected, select them all
        if (!vm.selected.length) {
          return selectProps(true);
        }

        // If all the keys are selected, deselect the ones that aren't required
        if (Object.keys(vm.props).length === vm.selected.length) {
          return selectProps(false);
        }

        // If some or none of the non-required keys are selected, toggle them all
        var notReq = Object.keys(vm.props).filter(function (prop) {
          if (vm.props[prop].required) {
            return;
          }
          select(prop, vm.props[prop]);
        })

        return;
      };
    }
  );

