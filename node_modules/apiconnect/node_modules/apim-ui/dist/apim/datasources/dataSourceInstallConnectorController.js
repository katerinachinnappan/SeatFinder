/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

angular.module('apim.datasources')
  .controller('dataSourceInstallConnectorController', [
    '$modalInstance',
    '$scope',
    '$timeout',
    '$q',
    '$log',
    '$rootScope',
    '$state',
    'LogServices',
    'TrackingServices',
    dataSourceInstallConnectorController
  ]);

function dataSourceInstallConnectorController(
  $modalInstance,
  $scope,
  $timeout,
  $q,
  $log,
  $rootScope,
  $state,
  LogServices,
  TrackingServices
) {

  $scope.installationError = '';
  $scope.status = {
    isInstallingConnector: true,
    isInstallationComplete: false,
    isLogsVisible: true
  };

  $scope.logs = [];

  $scope.close = $modalInstance.close;

  startInstallingConnector()
    .then(handleInstallSuccess)
    .catch(handleInstallFailure);

  function startInstallingConnector() {
    // create stream and subscribe to event stream for updates
    var def = $q.defer();
    var url = '/pm/api/Projects/addDependency?moduleName=' +
      encodeURIComponent($scope.connector.package.name) +
      '&projectPath=' +
      encodeURIComponent($rootScope.activeProject.path);

    TrackingServices.track('datasource', 'startInstallConnector', {
      connectorName: $scope.connector.description
    });

    var stream = new EventSource(url);
    var rawLines = [];
    var done = false;

    var flushLines = function () {
      var lines = [];

      rawLines.forEach(function (msg) {
        var raw = JSON.parse(msg);

        if (!raw) {
          return;
        }

        if (raw.done && !raw.error) {
          stream.close();
          return def.resolve();
        }

        if (raw.error) {
          stream.close();
          return def.reject(raw.error);
        }

        if (raw.data) {
          raw = raw.data;
        }

        raw.toString().split('\n').forEach(function (line) {
          lines.push(line);
        });
      });

      $scope.logs = $scope.logs.concat(lines.map(function (line) {
        return ansi_up.ansi_to_html(line, { use_classes: true });
      }));

      rawLines = [];
    };

    var scheduleUpdate = function() {
      flushLines();

      if (!done) {
        $timeout(scheduleUpdate, 2500);
      }
    };

    scheduleUpdate();

    def.promise.then(function() {
      flushLines();
      done = true;
    })

    stream.addEventListener('data', function(msg) {
      rawLines.push(msg.data);
    });

    stream.addEventListener('error', function(err){
      $log.error(err);
      def.reject(err);
    });

    // resolve the promise when finished installing
    stream.addEventListener('end', function(msg){
      $log.log('projected created', msg);
      def.resolve();
    });

    return def.promise;
  }

  function handleInstallFailure(err) {
    $scope.status.isInstallingConnector = false;
    $scope.installationError = err;
  }

  function handleInstallSuccess() {
    $scope.status.isInstallingConnector = false;
    $scope.installationError = '';
    $scope.status.isInstallationComplete = true;
    $scope.connector.installed = true;

    TrackingServices.track('datasource', 'finishedInstallConnector',  { connectorName: $scope.connector.description });

    if (!$scope.status.isLogsVisible) {
      $scope.close();
    }
  }
}

