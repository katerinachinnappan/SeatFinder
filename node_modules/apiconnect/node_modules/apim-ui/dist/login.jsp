<%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8" trimDirectiveWhitespaces="true"%>
<%@ page import="java.util.Locale"%>
<%
  response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); //HTTP 1.1
  response.setHeader("Pragma", "no-cache"); //HTTP 1.0
  response.setDateHeader("Expires", 0); //prevents caching at the proxy server
  //Get the Language
  Locale locale=request.getLocale();
  String requestLocale=null;
  if (locale!=null)
    requestLocale=locale.getLanguage();
  if (requestLocale==null || requestLocale.length()==0)
    requestLocale="en";
  boolean isRTL=false;
  if (requestLocale.startsWith("ar"))
    isRTL=true;
  String userLocale = locale.toString().replace('_', '-');
  int quoteIndex = userLocale.indexOf("\"");
  if (quoteIndex != -1) {
    userLocale = userLocale.substring(0,quoteIndex);
  }
%>
<!doctype html>
<html lang="<%=userLocale%>">
<!--
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
-->
<head>
    <meta charset="utf-8">
	<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
	<meta http-equiv="Pragma" content="no-cache"/>
	<meta http-equiv="Expires" content="-1"/>
    <title>Login: API Manager - IBM API Connect</title>
    <meta name="description" content="Login: API Manager - IBM API Connect">
    <meta name="viewport" content="width=device-width">
    <link rel="shortcut icon" href="./apim/images/favicon.ico" type="image/vnd.microsoft.icon" />

    <!-- for clickjacking issue: use a cloak to hide the page until iframe status can be verified -->
    <style id="antiClickjack">body{display:none !important;}</style>

    <script>
      var apimSessionLocale = "<%=userLocale%>";
      var isSaaS = (window.location.hostname.indexOf('ibmcloud.com') > -1 || window.location.hostname.indexOf('cloud.ibm.com') > -1);
      var isClickjackProtectionDisabled = isSaaS || window.location.hostname.indexOf("bluemix.net") > -1 || window.location.hostname.indexOf("cloud.ibm.com") > -1;
      var networkMode = 'online';
    </script>
    <script src="/apim/scripts/login-jsp-vendor-56e057a2c4.js"></script>

    <script src="/apim/scripts/login-jsp-apim-a22961f19e.js"></script>

<style media="screen" type="text/css">
body.cloak {
	display: none;
	background: none;
}
body.uncloak {
	display: inherit;
	background: url(./apim/images/poly_background.svg);
	background-color: #1d3649;
	background-blend-mode: color-burn;
	background-repeat: no-repeat;
	background-size: cover;
	background-position: center;
	color: rgba(255,255,255,0.5);
}
html, body {
	width: 100%;
	height: 100%;
	padding: 0;
	margin: 0;
}
body {
	font-family: HelveticaNeue-Light, 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande',
	sans-serif;
	font-size: 14px;
}
body.saas {
	background: #f5f7fa;
	color: #152934;
}
.page {
	width: 100%;
	height: 100%;
	padding: 0;
	margin: 0;
	position: absolute;
}
.saas h1{
	color: #152934;
}
h1 {
	font-weight: 200 !important;
	font-size: 32px;
	color: rgba(255,255,255,0.7);
	margin-bottom: 30px;
}
.bold {
	font-weight: bold;
}
.largerText {
	font-size: 18px;
}
.blue-box {
	position: relative;
	top: 50%;
	left: 50%;
	margin-left: -160px;
	-webkit-transform: translateY(-50%);
	transform: translateY(-50%);
	width: 320px;
	box-sizing: border-box;
}
.error-message {
	color: orange;
	text-align: center;
}
.error-container {
	margin-top: 20px;
	min-height: 100px;
}
.user-message {
	text-align: center;
	margin-top: 20px;
	min-height: 100px;
}
.error-box {
	padding: 10px 0;
}
.legacy .blue-box {
	margin-top: -125px;
}
.saas .inputContainer{
	margin-top:36px;
}
.inputContainer {
	margin-bottom: 30px;
	position: relative;
}
.saas .inputContainer label{
	top: -6px;
	font-weight:bold;
}
.inputContainer label {
	display: block;
	position: absolute;
	top: 4px;
	left: 0;
	transition: top 0.3s, color 0.3s;
}
.saas .inputContainer input{
	margin-top:20px;
	padding: 14px 17px 10px;
	border: none;
	color: #152934;
	background-color: rgba(60,112,178,0.10);
	box-sizing: border-box;
}
.inputContainer input {
	padding: 4px 0;
	border-width: 0 0 1px 0;
	border-style: solid;
	border-color: rgba(255,255,255,0.5);
	width: 100%;
	outline: none;
	background-color: transparent;
	color: white;
	font-family: 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif;
	font-size: 14px;
}
.saas .inputContainer input:focus,
.saas .inputContainer input:valid {
	border: none;
}
.inputContainer input:focus,
.inputContainer input:valid {
	border-color: rgba(255,255,255,1.0);
}
.saas .inputContainer input:focus + label,
.saas .inputContainer input:valid + label {
	color: #152934;
	top: -6px;
	font-size:14px;
}
.inputContainer input:focus + label,
.inputContainer input:valid + label {
	top: -14px;
	left: 0px;
	color: rgba(255,255,255,1.0);
	font-size: 12px;
}
.saas .legacy .inputContainer label{
	top: -20px;
	color: #152934;
	font-size: 14px;
}
.legacy .inputContainer label {
	top: -14px;
	color: rgba(255,255,255,1.0);
	font-size: 12px;
}
.saas .inputContainer input:focus + label{
	color: #152934;
}
.inputContainer input:focus + label {
	color: rgba(255,255,255,1.0);
}
.saas button{
	border: none;
	background-color: #3d70b2;
	color: white;
	padding: 16px;
}
button {
	border: 1px solid rgba(255,255,255,0.7);
	cursor: pointer;
	font-family: Arial, Verdana, Helvetica, sans-serif;
	font-size: 16px;
	font-weight: bold;
	padding: 5px 11px;
	color: rgba(255,255,255,0.7);
	background-color: transparent;
	transition: background-color 0.2s;
	width: 100%;
}
.saas button:disabled {
	border: none;
	opacity: .5;
	color: white;
}
button:disabled {
	border-color: rgba(255,255,255,0.5);
	cursor: not-allowed;
	color: rgba(255,255,255,0.5);
}
.saas button:hover:not(:disabled),
.saas button:focus{
	background-color: #5596e6;
	border: none;
	color: white;
}
button:hover:not(:disabled),
button:focus {
	background-color: rgba(255,255,255,1.0);
	border-color: rgba(255,255,255,1.0);
	color: #1d3649;
}
.modal-dialog button {
	outline: 1px solid #3d70b2;
	color: #3d70b2;
	background-color: transparent;
	width: auto;
}
.modal-dialog button:hover:not(:disabled),
.modal-dialog button:focus {
	background-color: #3d70b2;
	color: white;
}
.legal {
	font-size: 8px;
	 position: fixed;
	bottom: 0;
	left: 0;
	padding: 16px 40px;
	width: 100%;
	box-sizing: border-box;
	display: flex;
	justify-content: center;
}
.legal .legalBox {
	width: 80%;
	display: flex;
	justify-content: center;
}
.legal .legalText {
	margin-right: 20px;
	padding-top: 8px;
}
.legal .javaLogo {
	width: 28px;
	height: 32px;
	background-image: url("./apim/images/Java_Compatible_mono.png");
	background-size: contain;
	background-repeat: no-repeat;
}
.forgot {
	font-size: 12px;
	padding: 10px;
	text-align: center;
}
.forgot a {
  color: rgba(255,255,255,0.7);
}
.boxout {
	padding: 0 0 20px 0;
}
.productName {
	margin: 20px 0 30px 0;
}
.productName h1 {
	margin: 0;
}
.saas .uiname{
	color: #152934;
}
.uiname {
	color: white;
	font-size: 16px;
}
.redirectingSignInBox {
	padding: 10px 0;
}
.registerID {
	padding: 20px 0;
}
.saas .registerID a{
	color: #152934;
}
.registerID a {
	color: rgba(255,255,255,0.8);
}
a {
	text-decoration: none;
}
a:visited {
	text-decoration: none;
}
.saas a:hover,
.saas a:focus{
	color: #152934;
	opacity:0.5;
}
a:hover, a:focus{
	color: rgba(255,255,255,1.0);
	text-decoration: none;
}
.modal-open {
	overflow: hidden;
}
.modal {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: 1050;
	display: none;
	overflow: hidden;
	-webkit-overflow-scrolling: touch;
	outline: 0;
	color: #152934;
}
.modal.fade .modal-dialog {
	transition: transform .3s ease-out;
	-webkit-transform: translate(0, -25%);
	transform: translate(0, -25%);
}
.modal.in .modal-dialog {
	-webkit-transform: translate(0, 0);
	transform: translate(0, 0);
}
.modal-open .modal {
	overflow-x: hidden;
	overflow-y: auto;
}
.modal-dialog {
	position: relative;
	width: auto;
	margin: 10px;
}
.modal-content {
	position: relative;
	background-color: #fff;
	background-clip: padding-box;
	border: 1px solid #999;
	border: 1px solid rgba(0, 0, 0, .2);
	border-radius: 6px;
	outline: 0;
	box-shadow: 0 3px 9px rgba(0, 0, 0, .5);
}
.modal-backdrop {
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: 1040;
	background-color: #000;
}
.modal-backdrop.fade {
	filter: alpha(opacity=0);
	opacity: 0;
}
.modal-backdrop.in {
	filter: alpha(opacity=50);
	opacity: .5;
}
.modal-header {
	min-height: 16.42857143px;
	padding: 15px;
	border-bottom: 1px solid #e5e5e5;
}
.modal-header .close {
	margin-top: -2px;
}
.modal-title {
	margin: 0;
	line-height: 1.42857143;
}
.modal-body {
	position: relative;
	padding: 15px;
}
.modal-footer {
	padding: 15px;
	text-align: right;
	border-top: 1px solid #e5e5e5;
}
.modal-footer .btn + .btn {
	margin-bottom: 0;
	margin-left: 5px;
}
.modal-footer .btn-group .btn + .btn {
	margin-left: -1px;
}
.modal-footer .btn-block + .btn-block {
	margin-left: 0;
}
.modal-scrollbar-measure {
	position: absolute;
	top: -9999px;
	width: 50px;
	height: 50px;
	overflow: scroll;
}
@media (min-width: 768px) {
 .modal-dialog {
  width: 600px;
	 margin: 30px auto;
 }
 .modal-content {
  box-shadow: 0 5px 15px rgba(0, 0, 0, .5);
 }
 .modal-sm {
	 width: 300px;
 }
}
@media (min-width: 992px) {
 .modal-lg {
	 width: 900px;
 }
}
@media all and (max-width: 400px) {
 .white-box {
	 width: 100%;
	 left: 0;
	 margin-left: 0;
 }
}
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  body.uncloak:before {
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    background-color: rgba(17, 32, 44, .7);
  }
}
@supports (-ms-accelerator:true) {
  body.uncloak:before {
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    background-color: rgba(17, 32, 44, .7);
  }
}

@supports (-ms-ime-align:auto) {
  body.uncloak:before {
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    background-color: rgba(17, 32, 44, .7);
  }
}
</style>
<script type="text/javascript">
var startup = function() {
	var userInput = document.getElementById("input_username");
	// detect older browsers
	var legacy = false;
	if (userInput.style["transform"] === undefined) {
		document.body.className = "login legacy";
		legacy = true;
	}
	if (!legacy) {
		var passInput = document.getElementById("input_password");
		var loginButton = document.getElementById("login_button");
		loginButton.disabled = true;
		var validate = function(evt) {
			if (userInput.value && passInput.value) {
				loginButton.disabled = false;
			} else {
				loginButton.disabled = true;
			}
		};
		if (window.addEventListener) {
			userInput.addEventListener("input", validate);
			passInput.addEventListener("input", validate);
		} else {
			userInput.attachEvent("oninput", validate);
			passInput.attachEvent("oninput", validate);
		}
		var checkAutoFill = function() {
			setTimeout(function() {
				if (userInput.value && passInput.value) {
					loginButton.disabled = false;
				} else {
					checkAutoFill();
				}
			}, 500);
		};
		checkAutoFill();
	}
	setTimeout(function() {
		userInput.focus();
	},0);
};
if (window.addEventListener) {
	window.addEventListener("load", startup);
} else {
	window.attachEvent("onload", startup);
}
</script>
</head>
<body class="login cloak" data-ng-class="{uncloak: ready, saas: isSaaS}" data-ng-controller="LoginController">
  <!-- Login Page Eyecatcher 5765625370686572652e6d647566 -->
  <div data-ng-show="validating" class="page">
    <div class="blue-box">
	    <form name="signUpForm" id="signUpForm" target="_self">
	      <h1>{{::'signUpSignUp' | translate}}</h1>
          <div style="margin-bottom: 20px;">
            <label for="input_signup_username">{{::'signUpUsername' | translate}}</label>
            <div data-ng-model="username" id="input_signup_username">{{username}}</div>
          </div>
	      <div class="inputWrapper">
	        <div class="inputContainer">
	            <input data-ng-model="userDetails.firstName" type="text" name="firstName" id="input_signup_firstname" size="32" maxlength="128" autofocus="autofocus" required="required" autocomplete="off"/>
	            <label for="input_signup_firstname">{{::'signUpFirstName' | translate}}</label>
	        </div>
	        <div class="inputContainer">
	            <input data-ng-model="userDetails.lastName" type="text" name="lastName" id="input_signup_lastname" size="32" maxlength="128" required="required" autocomplete="off"/>
	            <label for="input_signup_lastname">{{::'signUpLastName' | translate}}</label>
	        </div>
	        <div data-ng-if="!ldap" class="inputContainer">
	            <input data-ng-model="userDetails.password" type="password" name="password" id="input_signup_password" size="32" maxlength="128" required="required" autocomplete="off" ui-validate="'validatePassword($value)'"/>
	            <label for="input_signup_password">{{::'signUpPassword' | translate}}</label>
	        </div>
	        <div data-ng-if="!ldap" class="inputContainer">
	            <input data-ng-model="confirmPassword" name="confirmPassword" type="password" id="input_signup_confirm" size="32" maxlength="128" required="required" autocomplete="off" ui-validate="'$value==userDetails.password'" ui-validate-watch="'userDetails.password'"/>
	            <label for="input_signup_confirm">{{::'signUpConfirmPassword' | translate}}</label>
	        </div>
	        <button data-ng-disabled="!signUpForm.$valid" data-ng-click="validateUser()">{{::'signUpSignUp' | translate}}</button>
	        <div class="error-container">
		        <div class="error-message" data-ng-show='signUpForm.firstName.$error.validator'>{{::'signUpFirstNameRequired' | translate}}</div>
		        <div class="error-message" data-ng-show='signUpForm.lastName.$error.validator'>{{::'signUpLastNameRequired' | translate}}</div>
		        <div class="error-message" data-ng-show='signUpForm.password.$error.validator'>{{::'signUpPasswordRules' | translate}}</div>
		        <div class="error-message" data-ng-show='signUpForm.confirmPassword.$dirty && signUpForm.confirmPassword.$error.validator'>{{::'signUpPasswordMismatch' | translate}}</div>
		    </div>
	      </div>
	    </form>
	</div>
  </div>
  <div data-ng-show="validateAuthURL" class="page">
    <div class="blue-box">
      <div class="productName">
	      <h1>IBM <span class="bold">API</span> Connect</h1>
	      <div class="uiname">{{::'loginApimName' | translate}}</div>
      </div>
      <div class="boxout" data-ng-show="authUrlMessage" data-ng-bind-html="authUrlMessage"></div>
	  <form name="authUrlForm" id="authUrlForm" target="_self">
        <div class="inputWrapper">
          <div class="inputContainer">
            <input data-ng-model="userDetails.username" type="text" name="username" id="input_authurl_username" size="32" maxlength="128" autofocus="autofocus" required="required" autocomplete="off"/>
            <label for="input_authurl_username">{{::'username' | translate}}</label>
          </div>
          <div class="inputContainer">
            <input data-ng-model="userDetails.password" type="password" name="password" id="input_authurl_password" size="32" maxlength="128" required="required" autocomplete="off"/>
            <label for="input_authurl_password">{{::'Password' | translate}}</label>
          </div>
	      <button data-ng-disabled="!authUrlForm.$valid" data-ng-click="validateUser()">{{::'loginSignIn' | translate}}</button>
        </div>
      </form>
      <div class="error-box" data-ng-show="credentialError">
        <div class="error-message" data-ng-show='credentialError'>{{caseSensitive ? ('loginFailure' | translate) : ('loginFailureNoCase' | translate)}}</div>
      </div>
      <div class="user-message" data-ng-show="userMessage">{{::userMessage}}</div>
    </div> <!-- main box -->
    <div class="legal">
    	<div class="legalBox">
	    	<div class="legalText">{{::'copyrightInfo' | translate}} {{::'trademarkInfo' | translate}}</div>
    		<div class="javaLogo"></div>
    	</div>
    </div>
  </div>
  <div data-ng-show="resettingPassword" class="page">
    <div class="blue-box">
      <div class="productName">
	      <h1>IBM <span class="bold">API</span> Connect</h1>
	      <div class="uiname">{{::'loginApimName' | translate}}</div>
      </div>
      <div class="boxout largerText">{{::'passwordReset' | translate}}</div>
      <div class="boxout">
        <label for="input_reset_username">{{::'signUpUsername' | translate}}</label>
        <div data-ng-model="username" id="input_reset_username">{{username}}</div>
      </div>
	  <form name="resetForm" id="resetForm" target="_self">
	      <div class="inputWrapper">
	        <div class="inputContainer">
	            <input data-ng-model="resetDetails.password" type="password" name="password" id="input_reset_password" size="32" maxlength="128" required="required" autocomplete="off" ui-validate="'validatePassword($value)'"/>
	            <label for="input_reset_password">{{::'signUpPassword' | translate}}</label>
	        </div>
	        <div class="inputContainer">
	            <input data-ng-model="confirmPassword" name="confirmPassword" type="password" id="input_reset_confirm" size="32" maxlength="128" required="required" autocomplete="off" ui-validate="'$value==resetDetails.password'" ui-validate-watch="'resetDetails.password'"/>
	            <label for="input_reset_confirm">{{::'signUpConfirmPassword' | translate}}</label>
	        </div>
	        <button data-ng-disabled="!resetForm.$valid || sendingNewPassword" data-ng-click="resetPassword()">{{::'passwordChange' | translate}}</button>
	        <div class="error-container">
		        <div class="error-message" data-ng-show='resetForm.password.$error.validator'>{{::'signUpPasswordRules' | translate}}</div>
		        <div class="error-message" data-ng-show='resetForm.confirmPassword.$dirty && resetForm.confirmPassword.$error.validator'>{{::'signUpPasswordMismatch' | translate}}</div>
		    </div>
	      </div>
	  </form>
	</div>
  </div>
  <div data-ng-show="!validating && !resettingPassword && !validateAuthURL" class="page">
    <div class="blue-box">
      <div class="productName">
	      <h1>IBM <span class="bold">API</span> Connect</h1>
	      <div class="uiname">{{::'loginApimName' | translate}}</div>
      </div>
      <div class="boxout" data-ng-show="authUrlMessage" data-ng-bind-html="authUrlMessage"></div>
      <div class="boxout" data-ng-show="passwordReminder && !reminderSent">{{::'userRequestReminder' | translate}}</div>
      <div class="boxout" data-ng-show="reminderSent">{{::'reminderSent' | translate}}</div>
	  <form data-ng-show="!redirecting && !passwordReminder" action="j_security_check" method="post" encType="application/x-www-form-urlencoded" accept-charset="UTF-8" name="loginForm" id="loginForm" target="_self">
        <div class="inputWrapper">
          <div class="inputContainer">
            <input type="text" name="j_username" id="input_username" size="32" maxlength="128" autofocus="autofocus" required="required" autocomplete="off"/>
            <label for="input_username">{{::'username' | translate}}</label>
          </div>
          <div class="inputContainer">
            <input type="password" name="j_password" id="input_password" size="32" maxlength="128" required="required" autocomplete="off"/>
            <label for="input_password">{{::'Password' | translate}}</label>
          </div>
          <button id="login_button" type="submit" name="login" value="true">{{::'loginSignIn' | translate}}</button>
          <div class="forgot" data-ng-show="forgotEnabled"><a href="javascript:void();" data-ng-click="passwordReminder = true; credentialError = false; focusBox('remind_email');">{{::'loginForgotPassword' | translate}}</a></div>
        </div>
      </form>
      <form name="passwordRemindForm" data-ng-show="passwordReminder">
        <div class="inputWrapper" data-ng-show="!reminderSent">
          <div class="inputContainer">
            <input type="text" data-ng-model="remindEmail" id="remind_email" data-ng-pattern="/^[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,10}$/" required autocomplete="off"/>
            <label for="remind_email">{{::'Email' | translate}}</label>
          </div>
          <button type="submit" data-ng-disabled="!passwordRemindForm.$valid || sendingReset" data-ng-click="sendReset()">{{::'loginResetSend' | translate}}</button>
          <div class="forgot"><a href="javascript:void();" data-ng-click="passwordReminder = false; credentialError = false; focusBox('input_username');">{{::'loginReturnSignIn' | translate}}</a></div>
        </div>
      </form>
      <div class="apiSelfClear" data-ng-show="redirecting">
        <div class="redirectingSignInBox">{{::'redirectIBMMessage' | translate}}</div>
      </div>
      <div class="error-box" data-ng-show="credentialError">
        <div class="error-message" data-ng-show='credentialError'>{{caseSensitive ? ('loginFailure' | translate) : ('loginFailureNoCase' | translate)}}</div>
      </div>
      <div class="user-message" data-ng-show="userMessage">{{::userMessage}}</div>
    </div> <!-- main box -->
    <div class="legal">
    	<div class="legalBox">
	    	<div class="legalText">{{::'copyrightInfo' | translate}} {{::'trademarkInfo' | translate}}</div>
    		<div class="javaLogo"></div>
    	</div>
    </div>
  </div>
</body>
<!-- for clickjacking issue: to verify and remove the clickjack blocker -->
  <script type="text/javascript">
    if (self === top || isClickjackProtectionDisabled) {
      var antiClickjack = document.getElementById("antiClickjack");
        if (antiClickjack) {
          antiClickjack.parentNode.removeChild(antiClickjack);
        }
    } else {
      top.location = self.location;
    }
  </script>
</html>
