/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui
'use strict';

var apicConfig = require('apiconnect-config');
var express = require('express');
var fs = require('fs');
var project = require('apiconnect-project');
var tracking = require('apiconnect-tracking');

module.exports = function(options) {
  var router = express.Router();
  var tracker = tracking.tracker(options);

  router.get('/inspectPath', function(req, res, next) {
    var result = project.inspectPath(req.query.path);

    res.json(result);
  });

  router.get('/get', function(req, res, next) {
    var config = apicConfig.loadConfig();
    res.json(config.getOne(req.query.key));
  });

  router.post('/set', function(req, res, next) {
    var config = apicConfig.loadConfig();
    var data = {};
    data[req.body.key] = req.body.value;
    var global = !!req.body.global;

    config.set(data, global ? apicConfig.USER_STORE : apicConfig.PROJECT_STORE);
    res.json(config.getOne(req.body.key));
  });

  router.post('/delete', function(req, res, next) {
    var config = apicConfig.loadConfig();
    var global = !!req.body.global;

    config.delete(req.body.key, global ? apicConfig.USER_STORE : apicConfig.PROJECT_STORE);
    res.status(200).end();
  });

  router.get('/id', function(req, res, next) {
    res.json(tracking.genInstallationId());
  });

  router.get('/agreements/analytics', function(req, res, next) {
    if (options.agreements && options.agreements.analytics) {
      fs.readFile(options.agreements.analytics, 'utf8', function(err, data) {
        if (err) {
          options.logger.debug('Unable to load analytics file for UI: %s', err.message);
          return res.status(500).end();
        }
        res.json({ data: data });
      });
    } else {
      options.logger.debug('Analytics file not set, returning 404');
      res.json({ data: 'no agreement found'});
    }
  });

  router.get('/keys/analytics', function(req, res, next) {
    res.json({ key: tracker.getTrackingKey() });
  });

  return router;
};

