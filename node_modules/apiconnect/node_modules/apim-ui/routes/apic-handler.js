/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui
'use strict';

var express = require('express');
var router = express.Router();
var util = require('../common/util.js');

var apicHandler = require('../common/apic-handler');

router.get('/', function(req, res) {
  res.send({'hello': 'world'});
});

router.get('/instances/:instance/loggedIn', function(req, res) {
  apicHandler.isLoggedIn(req.params.instance)
  .then(function(response) {
    res.send(response);
  })
  .catch(function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.get('/instances/:instance/metadata', function(req, res) {
  return apicHandler.getMetadata(req.params.instance)
    .then(function(response) {
      res.send(response);
    })
    .catch(function(error) {
      res.status(error.statusCode || 500).send(util.packageError(error.error));
    });
});

router.post('/instances/:instance/login', function(req, res) {
  var credentials = req.body.credentials;
  apicHandler.login(req.params.instance, credentials)
  .then(function(response) {
    res.send(response);
  })
  .catch(function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.post('/instances/:instance/publish/runtime', function(req, res) {
  req.setTimeout(0);
  apicHandler.publishRuntime(req.params.instance, req.body)
  .then(function(response) {
    res.send(response);
  })
  .catch(function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.post('/instances/:instance/publish/products', function(req, res) {
  apicHandler.publishProducts(req.params.instance, req.body)
  .then(function(response) {
    res.send(response);
  })
  .catch(function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.get('/orgs', function(req, res) {
  apicHandler.listOrgs().then(
    function(orgs) {
    res.status(200).send(orgs);
  }, function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.get('/orgs/:orgId/catalogs', function(req, res) {
  apicHandler.listCatalogs(req.params.orgId).then(
    function(catalogs) {
    res.status(200).send(catalogs);
  }, function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

router.get('/instances/:instance/orgs/:orgId/providerApps', function(req, res) {
  apicHandler.listApps(req.params.instance, req.params.orgId).then(
    function(apps) {
    res.status(200).send(apps);
  }, function(error) {
    res.status(error.statusCode || 500).send(util.packageError(error.error));
  });
});

module.exports = router;
