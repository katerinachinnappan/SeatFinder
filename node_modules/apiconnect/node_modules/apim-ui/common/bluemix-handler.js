/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui
'use strict';

var Promise = require('bluebird');
var auth = require('./auth.js');
var BluemixLogin = require('apiconnect-cli-login-bluemix');
var authPlugin = require('apiconnect-cli-auth');
var BluemixAPI = require('apiconnect-cli-publish-bluemix').bluemixAPI;

var bluemixInstances = {};
var bluemixAPIs = {};

function getBluemixInstance(host) {
  if (!bluemixInstances[host]) {
    bluemixInstances[host] = new BluemixLogin(host);
  }
  return bluemixInstances[host];
}

function getBluemixAPI(host) {
  if (!bluemixAPIs[host]) {
    bluemixAPIs[host] = new BluemixAPI(host);
    return bluemixAPIs[host];
  } else{
    return Promise.resolve(bluemixAPIs[host]);
  }
}

function isLoggedIn(host) {
  var bmx = getBluemixInstance(host);
  return bmx.status().loggedIn
}

function status(host) {
  var bmx = getBluemixInstance(host);
  return Promise.resolve(bmx.status());
}

function login(host) {
  var loggedIn = isLoggedIn(host);
  if (loggedIn) {
    return Promise.resolve();
  } else {
    var serverUri = "apic-mgmt://" + host;
    var credentials = authPlugin.getCredentials('catalog', {
      useDefaultRegion: false,
      uri: serverUri
    });
    if (credentials.login.indexOf('apimanager/') > -1) {     //strip out apimanager to login to bluemix
      credentials.login = credentials.login.split('apimanager/')[1];
    }
    var bmx = getBluemixInstance(host);
    return bmx.login(credentials.login, credentials.password)
      .catch(function(err) {
        console.error('Error logging into Bluemix: %s', err.message);
        err.error = err.message;
        throw err;
      });
    }
}

function getApps(host, space_guid) {
  return getBluemixAPI(host)
    .then(function(api) {
      return api.listAllAppsForSpace(space_guid)
      .catch(function(err) {
        console.error('error gettings apps: %s', err);
        err.error = err.message;
        throw err;
      })
    })
    .catch(function(err) {
      console.error('error getting api: %s', err);
      err.error = err.message;
      throw err;
    })
}

function filterAppsWithSpaces(apps) {
  var filteredApps = [];
  for (var i in apps) {
    if (apps[i].entity.name.indexOf(' ') < 0) {
      filteredApps.push(apps[i]);
    }
  }
  return filteredApps;
}

function getOrgs(host) {
  return getBluemixAPI(host)
    .then(function(api) {
      return api.listAllOrganizations()
        .catch(function(err) {
          console.error('error getting orgs: %s', err);
          err.error = err.message;
          throw err;
        })
    })
    .catch(function(err) {
      console.error('error getting api: %s', err);
      err.error = err.message;
      throw err;
    });
}

function getSpaces(host) {
  return getBluemixAPI(host)
    .then(function(api) {
      return api.listAllSpaces()
      .catch(function(err) {
        console.error('error getting spaces: %s', err);
        err.error = err.message;
        throw err;
      })
    })
    .catch(function(err) {
      console.error('error getting api: %s', err);
      err.error = err.message;
      throw err;
    })
}

function getSpacesForOrg(host, org_guid) {
  return getBluemixAPI(host)
    .then(function(api) {
      return api.listAllSpacesForOrganization(org_guid)
        .catch(function(err) {
          console.error('error getting spaces: %s', err);
          err.error = err;
          throw err;
        });
    })
    .catch(function(err) {
      console.error('error getting api: %s', err);
      err.error = err;
      throw err;
    });
}

function provision(host, org, space) {
  return getBluemixAPI(host)
    .then(function(api) {
      return api.provisionLookup(org, space)
    }).catch(function(err) {
      err.error = err.message;
      throw err;
    });
}

exports.isLoggedIn = isLoggedIn;
exports.status = status;
exports.login = login;
exports.getApps = getApps;
exports.getOrgs = getOrgs;
exports.getSpaces = getSpaces;
exports.getSpacesForOrg = getSpacesForOrg;
exports.filterAppsWithSpaces = filterAppsWithSpaces;
exports.provision = provision;

