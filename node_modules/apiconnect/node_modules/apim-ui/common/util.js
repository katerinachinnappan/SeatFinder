/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui
'use strict';

/**
 * Temporary utils for handling common functions. Should be replaced by utils from CLI
 **/

var osenv = require('osenv');
var path = require('path');
var uuid = require('uuid');
var crypto = require('crypto');
var algo = 'aes256';
var key = 'sa9dfaspa0sac';

// polyfill for ES6 startsWith()
if (!String.prototype.startsWith) {
	String.prototype.startsWith = function(searchString, position){
		position = position || 0;
		return this.substr(position, searchString.length) === searchString;
	};
}
if (!String.prototype.endsWith) {
	String.prototype.endsWith = function(searchString, position) {
		var subjectString = this.toString();
		if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
			position = subjectString.length;
		}
		position -= searchString.length;
		var lastIndex = subjectString.indexOf(searchString, position);
		return lastIndex !== -1 && lastIndex === position;
	};
}

function getConfigDir() {
  return process.env.APICONNECT_CLI_CONFIG_PATH ||
    path.resolve(osenv.home(), '.apiconnect');
}

function packageResponse(response) {
    return {
        url        : response.request.href,
        statusCode : response.statusCode,
        headers    : response.headers,
        body       : response.body
    };
};

function getDefaultStacks() {
  var defStacks = [
    {
      displayName: 'US South',
      name: 'us-south',
      host: 'apimanager.us-south.apiconnect.cloud.ibm.com'
    },
    {
      displayName: 'US East',
      name: 'us-east',
      host: 'apimanager.us-east.apiconnect.cloud.ibm.com'
    },
    {
      displayName: 'United Kingdom',
      name: 'eu-gb',
      host: 'apimanager.eu-gb.apiconnect.cloud.ibm.com'
    },
    {
      displayName: 'Sydney',
      name: 'au-syd',
      host: 'apimanager.au-syd.apiconnect.cloud.ibm.com'
    },
    {
      displayName: 'Germany',
      name: 'eu-de',
      host: 'apimanager.eu-de.apiconnect.cloud.ibm.com'
    }
  ];
  var json = {
    apiServers: "1.0.0",
    servers: defStacks
  };
  return json;
}

function packageError(err){
  var error = {
    id: uuid.v4(),
    errors: []
  };
  if(err && err.constructor === Array){
    error.errors = err;
  }else{
    error.errors.push(err);
  }
  return error;
}

function encrypt(stringToEncrypt) {
    var cipher = crypto.createCipher(algo, key);
    return cipher.update(stringToEncrypt, 'utf8', 'hex') + cipher.final('hex');
};

function decrypt(stringToDecrypt) {
    var decipher = crypto.createDecipher(algo, key);
    return decipher.update(stringToDecrypt, 'hex', 'utf8') + decipher.final('utf8');
};

// encode the given string in base64 suitable for use in a URL
function base64EncodeURL(value) {
	var b64 = new Buffer(value).toString('base64');
	// three chars that occur in base64 cannot occur in URLs
	b64 = b64.replace(/\+/g, "-");
	b64 = b64.replace(/\//g, "_");
	b64 = b64.replace(/=/g, "~");
	return b64;
};

// decode the given string from base64 previously encoded by base64EncodeURL
function base64DecodeURL(value) {
	var ret = value;
	ret = ret.replace(/\-/g, "+");
	ret = ret.replace(/_/g, "/");
	ret = ret.replace(/~/g, "=");
	ret = new Buffer(ret, "base64").toString();
	return ret;
};

function slugifyName(title) {
	var name = title;
	if (name) {
        // multiple spaces replaced by single hyphen
	    name = name.replace(/ +/gi, '-');
	    // multiple hyphens replaced by single hyphen
	    name = name.replace(/-+/gi, '-');
	    // anything not a-z 0-9 A-Z hyphen removed
	    name = name.replace(/[^A-Za-z0-9\\-]/gi, '');
	    // remove all start hyphens
	    name = name.replace(/^[-]+/, '');
	    // remove all end hyphens
	    name = name.replace(/[-]+$/, '');
	    // remove all start numbers
	    name = name.replace(/^[0-9]+/, '');
	    // only lower case
	    name = name.toLowerCase();
	}
    return name;
};

exports.getConfigDir = getConfigDir;
exports.packageResponse = packageResponse;
exports.getDefaultStacks = getDefaultStacks;
exports.encrypt = encrypt;
exports.decrypt = decrypt;
exports.packageError = packageError;
exports.base64EncodeURL = base64EncodeURL;
exports.base64DecodeURL = base64DecodeURL;
exports.slugifyName = slugifyName;

