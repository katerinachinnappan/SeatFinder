/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui
'use strict';

var authPlugin = require('apiconnect-cli-auth');
var BluemixAuth = require('apiconnect-cli-login-bluemix');
var configPlugin = require('apiconnect-config');
var utilPlugin = require('apiconnect-cli-util');
var Promise = require('bluebird');
var request = require('request');
var _ = require('lodash');
var libUrl = require('url');

var publicCloudDomains = [
  'apiconnect.ibmcloud.com',
  'apiconnect.cloud.ibm.com',
  'apiconnect.test.cloud.ibm.com',
  'apim.ibmcloud.com'
];

var pConnectivity;

var authInstances = {};

var getAuthInstance = function(host){
  if(!host){
    host = 'apimanager.us-south.apiconnect.cloud.ibm.com';
  }

  if(!authInstances[host]){
    authInstances[host] = {
      uri: 'https://' + host,
      bluemixLoginInstance: new BluemixAuth(host, {
        loginServerUrl: getLoginServer(host)
      })
    };
  }
  return authInstances[host];
};

function getRegionHost(host) {
  return host.replace(/apimanager./ig, '');
}

function getLoginHost(host) {
  host = getRegionHost(host);

  var isPublicHost = publicCloudDomains.some(function(domain) {
    return host.indexOf(domain) > -1;
  });

  if (isPublicHost) {
    return 'login.service.' + host;
  } else {
    return 'login-service-apiconnect' + host.substr(host.indexOf('.'), host.length);
  }
}

function getLoginServer(host){
  return 'https://' + getLoginHost(host);
}

var auth = {
  DEFAULT_ENDPOINT: 'apimanager.us-south.apiconnect.cloud.ibm.com'
};

auth.getLoginUrl = function(opts) {

  opts = _.assign({
    host: auth.DEFAULT_ENDPOINT
  }, opts);

  var endpoint = getLoginServer(opts.host) + '/auth';

  var returnTo = libUrl.parse(opts.returnTo);
  returnTo.query = _.assign(returnTo.query, {
    host: opts.host
  });

  var url = libUrl.parse(endpoint);

  url.query = {
    redirectURL: libUrl.format(returnTo)
  };

  return libUrl.format(url);
};

auth.login = function(opts) {
  if (!opts) {
    opts = {
      type: void 0
    };
  }

  if (opts.type === 'code') {
    return authPlugin.bluemixLogin(opts.host.replace(/apimanager./ig, ''), {
      code: opts.code
    });
  }

  throw new Error('Unsupported login type: ' + opts.type);
};

auth.getDefaultServer = function() {
  var config = configPlugin.loadConfig({
    projectDir: configPlugin.getUserConfigDir(),
    shouldParseUris: false
  });
  var defaultServer = config.get().UI_Default_Server;

  return defaultServer || {
    displayName: 'IBM Cloud public',
    name: 'us-south',
    host: 'apimanager.us-south.apiconnect.cloud.ibm.com'
  };
};

auth.setDefaultServer = function(server) {
  var config = configPlugin.loadConfig({
    projectDir: configPlugin.getUserConfigDir(),
    shouldParseUris: false
  });

  config.set({
    UI_Default_Server: server
  });
};

// Wrapper to keep the contract for this function consistent
auth.getDefaultHost = function() {
  return this.getDefaultServer().host;
};

auth.logout = function() {
  // If user is logging out from UI, we'll assume they're logging out from all servers
  _.each(authInstances, function(authInstance) {
    authPlugin.logout(authInstance).catch(function(){});
  });
};

auth.isLoggedIn = function(opts) {
  if (!opts) {
    opts = {};
  }

  if (!opts.host) {
    opts.host = auth.getDefaultHost();
  }

  if (opts.tokenOnly) {
    return getAuthInstance(opts.host).bluemixLoginInstance.status()
  }

  var creds = authPlugin.getCredentials(getAuthInstance(opts.host));
  if (!creds || !creds.bluemixStatus) {
    return Promise.resolve(false);
  }

  return utilPlugin.serverMeta.getMetadata({
    host: opts.host
  })
    .then(function(meta) {
      if ((!meta.supports('authTypes', 'token')) && (!creds.login || !creds.password)) {
        return Promise.resolve(false);
      }
      return creds.bluemixStatus
    });
};

auth.hasInternetConnectivity = function(opts) {

  var options = opts || {};

  if (typeof pConnectivity === 'undefined' || options.retry) {
    pConnectivity = new Promise(function (resolve) {
      request({
        uri: getLoginServer(auth.DEFAULT_ENDPOINT) + '/status',
        timeout: 10000
      }, function (err) {
        resolve(err ? false : true);
      });
    });
  }

  return pConnectivity;
};

auth.setConnectivity = function(type) {
  pConnectivity = Promise.resolve(type === 'online');
};

// On module load, run the first connectivity check
auth.hasInternetConnectivity();

auth.getLoginServer = getLoginServer;

module.exports = auth;

