/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apim-ui

'use strict';

var _ = require('lodash');
var apic = require('./routes/apic-handler.js');
var apicConfig = require('./routes/apic-config');
var apicWorkspace = require('apiconnect-workspace');
var auth = require('./routes/auth');
var dp = require('./routes/datapower');
var bluemix = require('./routes/bluemix-handler.js');
var bodyParser = require('body-parser');
var browserOpen = require('open');
var project = require('apiconnect-project');
var express = require('express');
var fsManager = require('strong-arc-filesystem/server/server');
var logger = require('apiconnect-cli-logger');
var lr = require('./routes/localRegistry');
var path = require('path');
var projectList = require('strong-arc-project-list');
var workspace = require('loopback-workspace');

var devPort = 9000;
var NETWORK_MODE = 'offline';

process.on("uncaughtException", function(err) {
  console.log("Unexpected error: " + err);
  console.log(err.stack);
});

function openUI(workDirOrFile, options, callback) {
  var staticAssetBase = __dirname;
  var listenPort = process.env.PORT || devPort;
  var listenAddr = process.env.HOST || '127.0.0.1';
  var connectUrl = 'http://' + listenAddr + ':' + listenPort;

  if (typeof options === 'function') {
    callback = options;
    options = {};
  } else if (!options) {
    options = {};
    callback = function() {};
  }

  var workDir = workDirOrFile;
  if (workDirOrFile.type === 'file') {
    workDir = project.inspectPath(path.dirname(workDirOrFile.basePath));
  }

  _.defaults(options, {
    mode: process.env.APIC_ENV || 'production',
    agreements: {
      'analytics': null,
    },
    logger: logger,
  });

  process.env.WORKSPACE_DIR = workDir.basePath;
  process.chdir(process.env.WORKSPACE_DIR);

  var app = express();

  app.use(bodyParser.urlencoded({ extended: true }));
  app.use(bodyParser.json({limit: 1024*1024*20, type: 'application/json'}));

  app.get('/', auth.requireLogin);

  if (options.mode === 'development'){
    console.log('Running in %s mode', options.mode);
    app.use('/', express.static(path.join(staticAssetBase, '.tmp')));
    app.use('/', express.static(path.join(staticAssetBase, '.')));
    app.use('/', express.static(path.join(staticAssetBase, 'app')));
  } else {
    app.use('/', express.static(path.join(staticAssetBase, 'dist')));
  }

  var noCache = function(req, res, next) {
    res.setHeader('Cache-control', 'no-cache, no-store');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    next();
  };

  app.set('etag', false);
  app.use(noCache);

  workspace.set('etag', false);
  app.use('/workspace', workspace);

  apicWorkspace.set('etag', false);
  app.use('/pm', apicWorkspace);

  projectList.set('etag', false);
  app.use('/project-list', projectList);

  app.use('/apic-config', apicConfig(options));
  app.use('/auth', auth);
  app.use('/dp', dp);
  app.use('/fs', fsManager);
  app.use(lr.localListings());
  app.use('/bluemix', bluemix);
  app.use('/apic', apic);
  app.get('/network-mode', function(req, res, next) {
    res.json({ mode: NETWORK_MODE });
  });

  var server = app.listen(listenPort, listenAddr, function () {
    var address = server.address();
    var host = listenAddr === 'localhost' && address.address === '127.0.0.1' ?
      listenAddr : address.address;
    connectUrl = 'http://' + host + ':' + address.port;
    console.log('Express server listening on ' + connectUrl);

    var openMsg = 'To open the API Designer, enter ' + connectUrl + ' in your web browser.';
    if (options.skipOpen || process.env.SKIP_OPEN) {
      console.log(openMsg);
    }
    else {
      if (!options.accessibility) {
        browserOpen(connectUrl);
      } else {
        // in accessibility mode, prompt user to continue or cancel
        process.stdin.setRawMode(true);
        process.stdin.setEncoding('utf8');
        console.log('API Designer will now open in your default web browser. Press escape to cancel or any other key to continue.');
        process.stdin.once('data', function(key) {
          process.stdin.setRawMode(false);
          if (key === '\u001B') {
            console.log(openMsg);
          } else {
            browserOpen(connectUrl);
          };
        });
      }
    }

    lr.setGatewayHost(address.address);
    if (process.env.HOST) {
      delete process.env.HOST;
    }

    app.set('connectUrl', connectUrl);

    if (typeof options.onStart === 'function') {
      options.onStart();
    }
  });

  app.server = server;

  server.on('error', function(err){
    callback(err);
  });

  server.on('close', function() {
    if (callback) {
      callback();
    }
    callback = null;
  });
  return app;
}

module.exports = openUI;
