/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-validate

var _ = require('lodash');
var apicLogger = require('apiconnect-cli-logger');
var g = require('strong-globalize')();
var path = require('path');
var project = require('apiconnect-project');
var validate = require('apiconnect-validate').validateArtifact;

var fn = path.basename;

module.exports.validate = function validateAction(filename, options) {
  options = options || {};
  _.defaults(options, { productOnly: false, extensions: true });
  var logger = options.logger || apicLogger;
  var productOnly = options.productOnly;
  var extensions = options.extensions;

  return project.loadProject(filename, { resolveExternalApiRefs: true })
    .then(_.bind(validate, null, _, { extensions: extensions, productOnly: productOnly }))
    .then(processResults);

  function processResults(results) {
    var valid = _.values(results).map(processResult);
    if (_.includes(valid, false)) {
      throw new Error(g.f('Validation did not complete successfully.'));
    };
  }; // eslint-disable-line no-unreachable

  function processResult(result) {
    var artifact = result.artifact;
    var valid = true;
    if (artifact.type !== 'product' && productOnly) {
      return valid;
    }
    if (result.error.length > 0) {
      valid = false;
      result.error.forEach(function(err) {
        if (err.name === 'YAMLException') {
          logger.writeln(g.f('YAMLException while processing %s. message: %s',
            fn(artifact.filePath), err.message));
        } else if (err.type === 'tabs-indentation') {
          err.lines.forEach(function(ln) {
            logger.writeln(g.f('Invalid indent character "tab" line: %s', ln));
          });
        } else {
          // unexpected conditions
          logger.writeln(err.message);
        }
      });
    }

    if (result.validation.length > 0) {
      result.validation.forEach(function(validation) {
        var type = validation.type === 'product' ? 'product definition' : 'API definition';
        if (validation.status === 'not_valid') {
          valid = false;
          logger.writeln(
            g.f('Error validating %s with %s %s [%s:%s].',
              fn(validation.path),
              validation.title,
              type,
              validation.name,
              validation.version
            ));
          _.each(validation.error, function(err) {
            if (err.dataPath) {
              logger.writeln(g.f('  %s (%s)', err.message, err.dataPath));
            } else {
              logger.writeln(g.f('  %s', err.message));
            }
          });
        } else if (validation.status === 'valid') {
          logger.writeln(g.f(
            'Successfully validated %s against %s %s [%s:%s].',
            fn(validation.path),
            validation.title,
            type,
            validation.name,
            validation.version
          ));
        }
      });
    }
    return valid;
  }
};

