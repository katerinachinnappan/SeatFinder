/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var apicLogger = require('apiconnect-cli-logger');
var clientHelper = require('./util/client');
var errors = require('./util/errors');
var fmt = require('util').format;
var g = require('strong-globalize')();
var names = require('./util/name-helper');

module.exports = {
  getFmt: getFmt,
  getImpl: getImpl,
};

function getFmt(options) {
  var l = options.logger;
  var namesPromise = Promise.resolve(options.service);
  l.debug('services.getFmt', options.service);
  if (!options.service) {
    namesPromise = names(null, true);
  }
  return namesPromise.then(function(serviceName) {
    if (!serviceName) {
      throw errors.nonProjectDir('apic services:get');
    }
    return getImpl(serviceName, options);
  }).then(function(res) {
    var parentPid = 'unknown';
    var workerPids = [];
    var ports = [];
    _.each(res.processes, function(process) {
      if (process.workerId === 0) {
        parentPid = process.pid;
      } else {
        workerPids.push(process.pid);
        ports.push.apply(ports, process.sockets);
      }
    });
    ports = _.uniqBy(ports);
    l.writeln(g.f('name: %s\naddresses: %s\nsupervisor_pid: %s\nworker_pids: %s\nproject_dir: %s',
      res.name, ports.join(' '), parentPid, workerPids.join(' '), res.projectDir));
    return;
  });
}

function getImpl(serviceName, opts) {
  opts = opts || {};
  var l = opts.logger || apicLogger;
  clientHelper.init(opts);
  l.debug('services.getImpl', serviceName);
  var svc = clientHelper.getService(serviceName);
  return svc.call('getStatusSummaryAsync')
    .then(function(summary) {
      var res = {};
      res.id = summary.id;
      res.name = summary.name;
      res.instances = processInstances(summary.instances);
      res.processes = processProcesses(summary.processes);
      res.projectDir = svc.value().env.__APIC_APP_HOME;
      l.debug('services.get return', res);
      return res;
    }).catch(function(err) {
      l.debug('services.get err', err);
      throw new Error(g.f('Unable to locate service `%s`.', serviceName));
    });
};

// All of the service collection code is poached from strong-mesh-models/bin/sl-meshctl.js
// It collects more than necessary, but will trim down
function processProcesses(processes) {
  return _.chain(processes).map(function(proc) {
    if (proc.stopReason) {
      return null;
    }
    var curr = {};
    curr.displayId = proc.displayId;
    curr.pid = proc.pid;
    curr.workerId = proc.workerId;
    curr.sockets = proc.listeningSockets.map(addr2str);
    curr.isTracking = proc.isTrackingObjects;
    curr.profiling = proc.isProfiling;
    curr.watchdogTimeout = proc.watchdogTimeout;
    curr.watchdogStallout = proc.watchdogStallout;
    curr.tracing = (proc.tracing) ? true : false; // eslint-disable-line no-unneeded-ternary
    curr.debugging = proc.debugger && proc.debugger.running;

    return curr;
  }).filter().value(); // Strip out any null elements

  function addr2str(address) {
    var str;
    if ('address' in address) {
      str = fmt('%s:%d', address.address || '0.0.0.0', address.port);
    } else {
      str = fmt('unix:%s', address);
    }
    return str;
  }
};

function processInstances(instances) {
  return _.map(instances, function(instance) {
    var meta = instance.driverMeta && instance.driverMeta.user
      ? JSON.stringify(instance.driverMeta.user)
      : 'N/A';
    return {
      version: instance.version,
      agent_version: instance.agentVersion,
      debugger_version: instance.debuggerVersion,
      cluster_size: instance.clusterSize,
      meta: meta,
    };
  });
};

