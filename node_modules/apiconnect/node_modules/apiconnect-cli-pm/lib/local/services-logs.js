/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var LogHandler = require('./util/log-handler');
var Promise = require('bluebird');
var client = require('./util/client');
var errors = require('./util/errors');
var g = require('strong-globalize')();
var l = require('apiconnect-cli-logger');
var names = require('./util/name-helper');

module.exports = {
  logsFmt: logsFmt,
  logsImpl: logsImpl,
};

function logsFmt(options) {
  var l = options.logger;
  var tail = options.tail;

  return new Promise(function(resolve, reject) {
    return logsImpl(options.service, options).then(function(handler) {
      if (tail === true) {
        l.writeln(g.f('Tailing logs for `%s`', handler.serviceName));
        return handler.tail(function(err, data) {
          if (err) {
            return reject(err);
          }
          l.writeln(data);
        });
      }
      handler.get(function(err, data) {
        if (err) {
          return reject(err);
        }
        l.writeln(data);
        resolve();
      });
    }).catch(function(err) {
      reject(err);
    });
  });
}

/**
 * If able to locate service @param {serviceName}, Resolves a LogHandler
 */
function logsImpl(serviceName, opts) {
  opts = opts || {};
  client.init(opts);
  l.debug('services.logs', serviceName, opts.cwd);
  var namesPromise = Promise.resolve(serviceName);
  if (!serviceName) {
    namesPromise = names(opts.cwd, true);
  }

  return namesPromise.then(function(serviceName) {
    if (!serviceName) {
      throw errors.nonProjectDir('apic services:logs');
    }
    return client.getService(serviceName);
  }).then(function(service) {
    return new LogHandler(service);
  }).catch(function(err) {
    l.debug('services.logs err', err);

    throw err;
  });
};

