/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var Promise = require('bluebird');
var debug = require('debug')('apiconnect-cli-pm:lib:name-helper');
var fmt = require('util').format;
var path = require('path');
var project = require('apiconnect-project');

/**
 * @param {root} if provided returns the 'root' name.
 *
 * If root && app && gw all exist, resolve ONLY app.
 * else if root && gw, resolve ONLY gw
 */
module.exports = function(dir, root) {
  dir = dir || process.cwd();

  var res = {};
  return appName(dir).then(function(appName) {
    if (appName) {
      res.app = appName;
    }
    return gwName(dir, appName);
  }).then(function(gwName) {
    if (gwName) {
      res.gw = gwName;
    }
    if (root) {
      return res.app ? res.app : res.gw;
    }
    return res;
  });
};

function appName(dir) {
  var projectInfo = project.inspectPath(dir, { incNodeProjects: true });
  var res;
  if (projectInfo.type === 'project') {
    try {
      res = require(path.resolve(projectInfo.basePath, 'package.json')).name;
    } catch (err) {
      res = path.basename(dir);
      debug('error reading package json name from %s', dir, err);
    }
  }
  return Promise.resolve(res);
}

function gwName(dir, baseName) {
  // No basename if we're running in a non-lb dir
  if (!baseName) {
    baseName = path.basename(dir);
  }
  return project.loadProject(dir)
    .then(function(artifacts) {
      if (!artifacts || artifacts.length === 0) {
        debug(fmt('%s does not contain any gw artifacts', dir));
        return;
      }
      return fmt('%s-gw', baseName);
    });
}

