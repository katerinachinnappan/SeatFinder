/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client
'use strict';

var testSupport = require('apiconnect-cli-test-support');
var path = require('path');
var moduleRoot = path.resolve(__dirname, '..');
var apic = testSupport.apic(moduleRoot);
var auth = testSupport.auth(apic);
var conf = testSupport.config;
var logger = testSupport.logger;
var test = testSupport.stackerTest;

test('setup', function(t) {
  return auth.login();
});

test('members', function(t) {
  logger.clear();
  return apic('members -o climbon -s ' + conf.getServer())
    .then(function() {
      var output = logger.values();
      output.sort();
      t.equals(output.length, 2);
      t.contains(output[0], 'User ibmapim+shavon@gmail.com (User ID:');
      t.contains(output[0], 'having developer role in climbon org');
      t.contains(output[1], 'User ibmapim+steve@gmail.com (User ID:');
      t.contains(output[1], 'having owner role in climbon org');
    });
});

test('negative members no org', function(t) {
  logger.clear();
  return apic('members -s ' + conf.getServer())
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --organization option is required.');
    });
});

test('negative members no server', function(t) {
  logger.clear();
  return apic('members -o climbon')
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --server option is required.');
    });
});

test('members --scope org', function(t) {
  logger.clear();
  return apic('members --scope org -o climbon -s ' + conf.getServer())
    .then(function() {
      var output = logger.values();
      output.sort();
      t.equals(output.length, 2);
      t.contains(output[0], 'User ibmapim+shavon@gmail.com (User ID:');
      t.contains(output[0], 'having developer role in climbon org');
      t.contains(output[1], 'User ibmapim+steve@gmail.com (User ID:');
      t.contains(output[1], 'having owner role in climbon org');
    });
});

test('members:list --scope org', function(t) {
  logger.clear();
  return apic('members:list --scope org -o climbon -s ' + conf.getServer())
    .then(function() {
      var output = logger.values();
      output.sort();
      t.equals(output.length, 2);
      t.contains(output[0], 'User ibmapim+shavon@gmail.com (User ID:');
      t.contains(output[0], 'having developer role in climbon org');
      t.contains(output[1], 'User ibmapim+steve@gmail.com (User ID:');
      t.contains(output[1], 'having owner role in climbon org');
    });
});

test('members --scope consumer-org', function(t) {
  logger.clear();
  return apic('members --scope consumer-org -o climbon -c sb --consumer-org consumerorg -s ' + conf.getServer())
    .then(function() {
      var output = logger.values();
      output.sort();
      t.contains(output[0], 'User ibmapim+andre@gmail.com (User ID:');
      t.contains(output[0], 'having owner role in consumerorg org');
    });
});

test('members:list --scope consumer-org', function(t) {
  logger.clear();
  return apic('members:list --scope consumer-org -o climbon -c sb --consumer-org consumerorg -s '
    + conf.getServer())
    .then(function() {
      var output = logger.values();
      output.sort();
      t.contains(output[0], 'User ibmapim+andre@gmail.com (User ID:');
      t.contains(output[0], 'having owner role in consumerorg org');
    });
});

test('negative members:list --scope consumer-org no consumer-org', function(t) {
  logger.clear();
  return apic('members:list --scope consumer-org -o climbon -c sb -s ' + conf.getServer())
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --consumerOrg option is required.');
    });
});

test('negative members:list --scope consumer-org no catalog', function(t) {
  logger.clear();
  return apic('members:list --scope consumer-org -o climbon --consumer-org consumerorg -s ' + conf.getServer())
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --catalog option is required.');
    });
});

test('negative members:list --scope consumer-org no org', function(t) {
  logger.clear();
  return apic('members:list --scope consumer-org -c sb --consumer-org consumerorg -s ' + conf.getServer())
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --organization option is required.');
    });
});

test('negative members:list --scope consumer-org no server', function(t) {
  logger.clear();
  return apic('members:list --scope consumer-org -o climbon -c sb --consumer-org consumerorg')
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --server option is required.');
    });
});

