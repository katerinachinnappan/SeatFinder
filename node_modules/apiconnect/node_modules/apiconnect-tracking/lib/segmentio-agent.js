/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-tracking

var Analytics = require('strong-analytics-node');
var Promise = require('bluebird');
var genId = require('./inst-id');
var debug = require('debug')('apiconnect-tracking:segmentio-agent');

var DEV_KEY = 'NctQs1pqTrmQeutdcCMwVBjPBQKY4jAg';
var PROD_KEY = 'I6y23EMe4KgPmRQd3mtUleSDityxSYFd';

function SegmentIOTracker(options) {
  this._isDevMode = options.pkgInfo['product-version'] === 'dev';
  var key = this.getTrackingKey();
  var id = this._id = genId();
  this._session = (+new Date()).toString();
  this._segmentio = new Analytics(key);
  this._instInfo = {
    'product-version': options.pkgInfo['product-version'],
    'cli-version': options.pkgInfo['version'],
  };
}

SegmentIOTracker.prototype.getTrackingKey = function() {
  return this._isDevMode ? DEV_KEY : PROD_KEY;
}

SegmentIOTracker.prototype.start = function() {
  return Promise.resolve();
};

SegmentIOTracker.prototype.logCommand = function(command, cmdOptions, cmdInfo) {
  var id = this._id;
  var self = this;

  eventProps = {}
  for (var idx in cmdOptions) {
    eventProps['cmd-opt-' + cmdOptions[idx]] = true
  }
  for (var key in cmdInfo) {
    eventProps[key] = cmdInfo[key]
  }
  for (var key in self._instInfo) {
    eventProps[key] = self._instInfo[key]
  }

  self._segmentio.identify({
    userId: id.hardwareId + '-' + id.instId,
  }, function(err) {
    if (err) {
      debug('Identify called failed: %s', err.message);
    }
  });

  self._segmentio.track({
    userId: id.hardwareId + '-' + id.instId,
    event: command,
    properties: eventProps,
  }, function(err) {
    if (err) {
      debug('Track called failed. Error: %s', err.message);
    }
  });
}

SegmentIOTracker.prototype.flush = function() {
  var self = this;
  return new Promise(function(resolve) {
    self._segmentio.flush(resolve);
  });
}

module.exports = SegmentIOTracker;

