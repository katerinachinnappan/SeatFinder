/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-tracking

var _ = require('lodash');
var crypto = require('crypto');
var fs = require('fs');
var jsYaml = require('js-yaml');
var os = require('os');
var path = require('path');
var userConfigdir = require('apiconnect-config').getUserConfigDir();

function getId() {
  try {
    fs.statSync(path.join(userConfigdir, 'installation-id'));
  } catch (_) {
    genId();
  }

  return jsYaml.safeLoad(fs.readFileSync(path.join(userConfigdir, 'installation-id'), 'utf8'));
}

function genId() {
  var id = {};

  var ifaces = [];
  _.each(os.networkInterfaces(), function(v, k) {
    _.each(v, function(v) {
      ifaces.push(_.merge(v, { iface: k }));
    });
  });

  ifaces = _(ifaces).filter(function(iface) {
    return !iface.internal && iface.mac !== '00:00:00:00:00:00';
  }).reduce(function(info, iface) {
    if (!info[iface.family]) {
      info[iface.family] = iface.mac;
    }
    return info;
  }, {});

  id.instId = +(new Date());
  id.hardwareId = (ifaces.IPv4 ? ifaces.IPv4 : ifaces.IPv6).replace(/:/g, '');
  id.hardwareId = crypto.createHash('md5').update(id.hardwareId).digest('hex');

  fs.writeFileSync(path.join(userConfigdir, 'installation-id'), jsYaml.safeDump(id), 'utf8');
}

module.exports = getId;

