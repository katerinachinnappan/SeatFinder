#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-apps

var RemoteApps = require('apiconnect-cli-util').RemoteApps;
var api = require('../index');
var apimClient = require('apiconnect-apim-client');
var fmt = require('./apps_list_formatter');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var path = require('path');

function appsListCmd(options) {
  if (!options.server) {
    throw new Error(g.f('The {{--server}} option is required.'));
  }
  if (!options.organization && !options.allOrganizations) {
    throw new Error(g.f('The {{--organization}} option is required.'));
  }
  return apimClient.apps.listAll(options).then(fmt.format).catch(function(err) {
    if (err.error) { // Liberty
      var first_err = Object.keys(err.error.errors[0]);
      fmt.error(err.error.errors[0][first_err]);
    } else {
      fmt.error(err);
    }
  });
}
exports.appsListCmd = appsListCmd;

function buildCmd(options) {
  var zip = true;
  var install = !!options.install;
  var scripts = !!options.scripts;
  // Don't validate install / scripts as that'll be handled by build api
  if (options.format === 'tar') {
    zip = false;
  } else if (options.format && options.format !== 'zip') {
    // user provided something, but it's not 'tar' or 'zip' warn
    throw new Error(g.f('The {{--format}} %s is not supported.', options.format));
  }
  return api.build(process.cwd(), { zip: zip, install: install, scripts: scripts }).then(function(res) {
    logger.writeln(g.f('Built %s', path.join('..', path.basename(res))));
    return;
  });
}
exports.buildCmd = buildCmd;

function appsSet(options) {
  return RemoteApps.resolve(options).then(function(impl) {
    if (options.status === 'online') {
      return impl.servicesStart(options);
    } else if (options.status === 'offline') {
      return impl.servicesStop(options);
    }
  }).then(function(res) {
    options.logger.writeln(g.f(
      'Updated apic-app://%s/orgs/%s/apps/%s (status: %s)',
      options.server, options.organization, options.app, options.status
    ));
  }).catch(function(err) {
    options.logger.debug(err);
    options.logger.debug(err.stack);
    throw err;
  });
}
exports.appsSet = appsSet;

function appsGet(options) {
  return RemoteApps.resolve(options).then(function(impl) {
    return impl.serviceStatus(options).then(function(status) {
      options.logger.writeln(g.f('name: %s', options.app));
      options.logger.writeln(g.f('title: %s', options.providerApp.title));
      options.logger.writeln(g.f(
        'url: apic-app://%s/orgs/%s/apps/%s',
        options.server, options.organization, options.app
      ));
      options.logger.writeln(g.f('status: %s', status));
      options.logger.writeln(g.f('organization: %s', options.organization));
    });
  });
}
exports.appsGet = appsGet;

