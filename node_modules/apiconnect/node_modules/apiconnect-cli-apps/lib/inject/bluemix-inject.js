/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-apps

var Promise = require('bluebird');
var debug = require('debug')('apiconnect-cli-apps:lib:publish:bluemix');
var g = require('strong-globalize')();
var fsExtra = Promise.promisifyAll(require('fs-extra'));
var js2yaml = require('js-yaml');
var glob = require('glob');
var path = require('path');

function bluemixInject(res, bluemixOptions) {
  var projectDir = bluemixOptions.projectDir;
  var catalog = bluemixOptions.catalog;
  var fromUI = bluemixOptions.fromUI;
  //update API Definition Yaml with the TLS profile and target url.
  return Promise.try(function() {
    if (typeof catalog === 'undefined' || catalog === null || !fromUI) {
      return res;
    }

    var files = glob.sync(path.join(projectDir + '/definitions', '*.yaml'));

    files.forEach(function(yamlFile) {
      var yamlDoc = js2yaml.safeLoad(fsExtra.readFileSync(yamlFile, 'utf8'));
      //check if it's an API Swagger yaml and if it has x-ibm-configuration
      if (typeof (yamlDoc['swagger']) === 'undefined' || typeof yamlDoc['x-ibm-configuration'] === 'undefined') {
        return;
      }

      if (!yamlDoc['x-ibm-configuration'].catalogs) {
        yamlDoc['x-ibm-configuration'].catalogs = {};
      }
      if (!yamlDoc['x-ibm-configuration'].catalogs[catalog]) {
        yamlDoc['x-ibm-configuration'].catalogs[catalog] = { properties: {} };
      }
      if (!yamlDoc['x-ibm-configuration'].catalogs[catalog].properties) {
        yamlDoc['x-ibm-configuration'].catalogs[catalog].properties = {};
      }

      yamlDoc['x-ibm-configuration'].catalogs[catalog].properties['runtime-url'] =
          'https://' + res.hostname;
      yamlDoc['x-ibm-configuration'].catalogs[catalog].properties['invoke-tls-profile'] =
          'client:Loopback-client';

      // add properties
      var propertyArray = [ 'runtime-url', 'invoke-tls-profile' ];
      if (typeof yamlDoc['x-ibm-configuration']['properties'] === 'undefined') {
        yamlDoc['x-ibm-configuration']['properties'] = {};
      }

      propertyArray.forEach(function(prop) {
        yamlDoc['x-ibm-configuration'].properties[prop] = {
          value: '',
          description: '',
          encoded: false,
        };
      });

      var executeArray = yamlDoc['x-ibm-configuration'].assembly.execute;
      for (var i = 0; i < executeArray.length; i++) {
        executeArray[i].invoke['tls-profile'] = '$(invoke-tls-profile)';
      }
      yamlDoc['x-ibm-configuration'].assembly.execute = executeArray;
      fsExtra.writeFileSync(yamlFile, js2yaml.safeDump(yamlDoc));
      res.messages.push(g.f('Updated %s with tls-profile and target-url.', path.posix.basename(yamlFile)));
    });

    return res;
  }).catch(function(error) {
    debug('Error updating definition file: %s', error.message);
    //tls-url injection failed.  Continue with deploy
    res.messages.push(g.f('Error updating definition file.', error.message));
    return res;
  });
}

module.exports = bluemixInject;

