/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-apps

var Promise = require('bluebird');
var _ = require('lodash');
var apimClient = require('apiconnect-apim-client');
var debug = require('debug')('apiconnect-cli-apps:lib:deploy');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var path = require('path');
var project = require('apiconnect-project');
var libertyPublish = require('./publish/liberty-publish');
var bluemixPublish = require('./publish/bluemix-publish');
var bluemixInject = require('./inject/bluemix-inject');

/**
 * @typedef RuntimeInfo
 * @type Object
 * @property {string} hostname Hostname for the application.
 * @property {string} [header] Optional header that must be set to route to the application.
 * @property {string} managementUri URL for managing the application runtime.
 * @property {object} extendedStatus Full output from runtime deployer
 */

/**
 * Deploy project to runtime service.
 *
 * @param {object} [options] options.
 * @param {string} [options.projectDir] Directory to project files. Defaults to process.cwd()
 * @param {string} [options.server] API Management server.
 * @param {string} [options.organization] Provider org name.
 * @param {string} [options.app] Application name. Defaults to project name if available.
 * @param {string} [options.title] Application title. Defaults to application name.
 *
 * @returns {RuntimeInfo}
 */
function deployProject(options) {
  options = _.defaults(options, {
    projectDir: process.cwd(),
  });
  debug('project dir: %s', options.projectDir);
  var dirInfo = project.inspectPath(options.projectDir, { incNodeProjects: true });
  debug('inspect %j', dirInfo);

  if (!dirInfo.name) {
    throw new Error(g.f('Package.json is invalid.  The name can not be blank.'));
  }
  if (!dirInfo.version) {
    throw new Error(g.f('Package.json is invalid.  The version can not be blank.'));
  }
  if (dirInfo.type === 'project') {
    options.packageName = dirInfo.name;
    options.projectType = dirInfo.projectType;
    options.app = options.app || options.packageName;
    options.title = options.title || options.app || options.packageName;
    return lookupRuntimeProviderOrgAndApp(options).then(function(info) {
      debug('lookup info', info);
      var providerOrg = info[0];
      var providerApp = info[1];
      if (!providerOrg) {
        throw new Error(g.f('The organization %s is not found.', options.organization));
      }
      if (!providerApp) {
        throw new Error(g.f('The application %s is not found.', options.app));
      }
      if (providerApp.bluemix) {
        logger.writeln(g.f('Deploying to {{Bluemix}}'));
        return bluemixPublish(
          providerOrg, providerApp, options
        ).then(function(res) {
          var bluemixOptions = {
            projectDir: path.resolve(options.projectDir),
            catalog: options.catalog,
            fromUI: options.fromUI,
          };
          return bluemixInject(res, bluemixOptions);
        }).then(function(res) {
          _.each(res.messages, function(m) {
            logger.writeln(m);
          });
          return res;
        });
      } else if (providerApp.liberty) {
        return libertyPublish(
          providerOrg, providerApp, options
        ).then(function(res) {
          logger.writeln();
          logger.writeln(g.f('Upload to liberty server completed successfully.'));
          logger.writeln(g.f('Applications may take a few minutes to update and start.'));
          logger.writeln();
          logger.writeln(g.f(
            'Collectives admin center: https://%s:%s/adminCenter.',
            res.liberty.controllerHosts[0].host,
            res.liberty.controllerHosts[0].port
          ));
          logger.writeln();

          var pkgJson = require(path.resolve(options.projectDir, 'package.json'));
          var isGateway = pkgJson.APIConnectGateway;
          if (!isGateway) {
            logger.writeln(g.f('Please update your swagger with:'));
            logger.writeln(g.f('API target urls: %s', res.ihsInfo.join(', ')));
            logger.writeln(g.f('host header: %s', res.liberty.vHostHeader));
          }
        });
      }
      throw new Error(g.f('The application %s with the organization %s is not found.',
        options.app, options.organization));
    });
  } else {
    throw new Error(g.f('The path %s is not an {{API Connect}} project.', options.projectDir));
  }
}
exports.deployProject = deployProject;

function lookupRuntimeProviderOrgAndApp(options) {
  if (!options.server) {
    throw new Error(g.f('The {{--server}} option is required.'));
  }
  if (!options.organization) {
    throw new Error(g.f('The {{--organization}} option is required.'));
  }
  options.name = options.organization;
  var providerOrgPromise = apimClient.orgs.get(options);
  var providerAppPromise = providerOrgPromise.then(function(org) {
    return apimClient.apps.get(options).catch(function(err) {
      if (err.status === 404) {
        // make a new provider-app if this is bluemix
        if (org.bluemix) {
          options.organization = org.name;
          options.runtime = 'bluemix';
          return apimClient.apps.create(options);
        }
        return null;
      }
      throw err;
    });
  });
  return Promise.all([ providerOrgPromise, providerAppPromise ]);
}

