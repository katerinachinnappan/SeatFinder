/** ******************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2018
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

'use strict';
var _ = require('lodash');
var u = require('../lib/utils.js');
var g = require('../lib/strong-globalize-fake.js');


/**
* @return information about the indicated namespace
*/
function getNamespaceInfo(namespace) {
    return NAMESPACE_INFO[namespace] || {
        known: false,
        base: false,
        extension: true,
        for: 'UNKNOWN'
    };
}

function getKnownNamespaces() {
    let known = [];
    for (let ns in NAMESPACE_INFO) {
        if (NAMESPACE_INFO[ns].known) {
            known.push(ns);
        }
    }
    return known;
}

/**
* @return info about this node ncName
*/
function getNameInfo(ncName) {
    if (_.indexOf(COMMOM_NODE_NAMES, ncName) >= 0) {
        return {
            known: true,
            common: true
        };
    } else if (UNCOMMON_NODE_NAMES[ncName]) {
        return {
            known: true,
            common: false,
            ns: UNCOMMON_NODE_NAMES[ncName]
        };
    } else {
        return {
            known: false,
            common: false,
            ns: 'unknown'
        };
    }
}

/**
* @return info about this attribute ncName
*/
function getAttrInfo(ncName) {
    if (_.indexOf(COMMOM_ATTR_NAMES, ncName) >= 0) {
        return {
            known: true,
            common: true
        };
    } else if (UNCOMMON_ATTR_NAMES[ncName]) {
        return {
            known: true,
            common: false,
            ns: UNCOMMON_ATTR_NAMES[ncName]
        };
    } else {
        return {
            known: false,
            common: false,
            ns: 'unknown'
        };
    }
}

/**
* Traverse dom
* @param node (start with root)
* @param f callback for each node
* @param list ancestor schema and definitions
*/
function traverseDOM(node, f, list) {
    list = list || [];
    if (!node) {
        return;
    }
    let isRoot = !node.parentNode;
    // A null value returned from f indicates that the descendents
    // are not processed.
    if (f(node, list) && node.childNodes) {
        let isSchemaOrDef = (node.localName === 'schema' || node.localName === 'definitions');
        if (isSchemaOrDef) {
            list.push(node);
        }
        // Must create a copy of the childNodes prior to traversing
        // the children because a descendent call to f may delete a node.
        let childNodes = [];
        for (let i = 0; i < node.childNodes.length; i++) {
            childNodes.push(node.childNodes[i]);
        }
        for (let i = 0; i < childNodes.length; i++) {
            traverseDOM(childNodes[i], f, list);
        }
        if (isSchemaOrDef) {
            list.pop();
        }
    }
}

/**
* @param dom for XSD or WSDL
* @return map of names of nodes and attributes and namespaces declarations
*/
function getNamesMap(dom) {
    let map = { nodes: {}, attrs: {}, namespaces: {} };
    traverseDOM(dom, function(node) {
        if (node.nodeName) {
            let i = node.nodeName.indexOf(':');
            let name = i > -1 ? node.nodeName.substring(i + 1) : node.nodeName;
            map.nodes[name] = map.nodes[name] ? map.nodes[name]++ : 1;
        }
        if (node.attributes) {
            for (let i = 0; i < node.attributes.length; i++) {
                let attr = node.attributes[i].nodeName;

                if (attr.startsWith('xmlns:')) {
                    let ns = node.attributes[i].nodeValue;
                    map.namespaces[ns] = map.namespaces[ns] ? map.namespaces[ns]++ : 1;
                    continue;
                }
                let index = attr.indexOf(':');
                let name = index > -1 ? attr.substring(index + 1) : attr;
                map.attrs[name] = map.attrs[name] ? map.attrs[name]++ : 1;
            }
        }
        return node;
    });
    return map;
}

/**
* @return information about this nodetype
*/
function getNodeTypeInfo(nodetype) {
    return NODE_TYPE[nodetype] || { keep: true, report: true, name: 'UNKNOWN TYPE' + nodetype };
}

/**
* @return DOM with DTD and other bad nodes removed
*/
function removeDTD(dom) {
    traverseDOM(dom, function(node) {
        let info = getNodeTypeInfo(node.nodeType);
        if (info.keep) {
            return node;
        } else {
            node.parentNode.removeChild(node);
            return null;
        }
    });
}

/**
* Remove all non-WSDL and non-XSD elements
*/
function pruneDOM(dom, fileName, req) {
    fileName = fileName === 'MEMORY' ? 'file' : fileName;
    let map = {
        'http://www.w3.org/2001/XMLSchema': true,
        'http://schemas.xmlsoap.org/wsdl/': true,
        'http://schemas.xmlsoap.org/wsdl/http/': true,
        'http://schemas.xmlsoap.org/wsdl/soap/': true,
        'http://schemas.xmlsoap.org/wsdl/soap12/': true,
        'http://schemas.xmlsoap.org/wsdl/mime/': true,
        'http://www.w3.org/2006/05/addressing/wsdl': true,
    };
    traverseDOM(dom, function(node) {
        if (node.nodeType === 1) {
            let info = getNameInfo(node.localName);
            if (map[node.namespaceURI]) {
                if (!info.common) {
                    // Looks like an attempt to use a name that is not defined in the standard
                    throw g.http(u.r(req)).Error('The following name, %s, was bound to specification standard namespace %s in %s.  This is an unrecognized element, please correct.',
                    node.nodeName, fileName, node.namespaceURI);
                }
            } else {
                // Discard this element
                if (info.common) {
                    // If this is a common name, then someone may have mispelled a namespace.  Throw an error
                    throw g.http(u.r(req)).Error('The following name, %s, was bound to namespace %s in %s.  This is an unrecognized element, please correct.',
                    node.nodeName, fileName, node.namespaceURI);
                }
                node.parentNode.removeChild(node);
                node = null;
            }
        }
        return node;
    });
    return dom;
}

// Each namespace has the following information
//   known: indicates that we have seen this before and it is valid
//   base: means that it is an essential piece of XSD/WSDL
//   extension: means that it is an extension to wsdl or xsd that we actually process or checking (WS-SECURITY).
//              If known but not base/extension, this means that we recognize and ignore it.
//   for: text indicating how it is known.
var NAMESPACE_INFO = {
    'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd': {
        known: true,
        base: false,
        extension: true,
        for: 'WS-SECURITY'
    },
    'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd': {
        known: true,
        base: false,
        extension: true,
        for: 'WS-SECURITY'
    },
    'http://schemas.microsoft.com/ws/06/2004/mspolicy/netbinary1': {
        known: true,
        base: false,
        extension: false,
        for: 'Microsoft',
    },
    'http://schemas.microsoft.com/ws/06/2004/policy/http': {
        known: true,
        base: false,
        extension: false,
        for: 'Microsoft',
    },
    'http://schemas.microsoft.com/ws/2005/12/wsdl/contract': {
        known: true,
        base: false,
        extension: false,
        for: 'Microsoft',
    },
    'http://schemas.xmlsoap.org/ws/2004/09/policy': {
        known: true,
        base: false,
        extension: false,
        for: 'WS-Policy',
    },
    'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy': {
        known: true,
        base: false,
        extension: false,
        for: 'WS-Policy',
    },
    'http://schemas.xmlsoap.org/ws/2006/02/addressingidentity': {
        known: true,
        base: false,
        extension: false,
        for: 'WS-Addressing',
    },
    'http://schemas.xmlsoap.org/wsdl/': {
        known: true,
        base: true,
        extension: false,
        for: 'WSDL',
    },
    'http://schemas.xmlsoap.org/wsdl/http/': {
        known: true,
        base: false,
        extension: true,  // This is for HTTP bindings in WSDL, which we currently ignore
        for: 'WSDL HTTP BINDING',
    },
    'http://schemas.xmlsoap.org/wsdl/mime/': {
        known: true,
        base: false,
        extension: true,  // This is for MIME part scanning, we don't do anything special with mime
        for: 'WSDL MIME',
    },
    'http://schemas.xmlsoap.org/wsdl/soap12/': {
        known: true,
        base: true,
        extension: false,
        for: 'WSDL SOAP 1.2',
    },
    'http://schemas.xmlsoap.org/wsdl/soap/': {
        known: true,
        base: true,
        extension: false,
        for: 'WSDL SOAP 1.1',
    },
    'http://ws-i.org/schemas/conformanceClaim/': {
        known: true,
        base: false,
        extension: true,  // Currently ignore this, but see https://github.ibm.com/velox/apiconnect-wsdl/issues/219
        for: 'WSDL WS-I',
    },
    'http://www.w3.org/2000/09/xmldsig#': {
        known: true,
        base: false,
        extension: false,
        for: 'WSDL WS-I',
    },
    'http://www.w3.org/2001/XMLSchema': {
        known: true,
        base: true,
        extension: false,
        for: 'XML Schema',
    },
    'http://www.w3.org/2005/05/xmlmime': {
        known: true,
        base: false,
        extension: true,  // This is for MIME part scanning, we don't do anything special with mime
        for: 'WSDL MIME',
    },
    'http://www.w3.org/2005/08/addressing': {
        known: true,
        base: false,
        extension: true,
        for: 'WS-Addressing',
    },
    'http://www.w3.org/2006/05/addressing/wsdl': {
        known: true,
        base: false,
        extension: true,
        for: 'WS-Addressing',
    },
    'http://www.w3.org/2007/XMLSchema-versioning': {
        known: true,
        base: false,
        extension: true,  // We currently only check and report if we find a versioning issue
        for: 'XML Schema 1.1',
    },
    'http://www.w3.org/XML/1998/namespace': {
        known: true,
        base: false,
        extension: true,
        for: 'XML Schema',
    },
    'http://java.sun.com/xml/ns/jaxws': {
        known: true,
        base: false,
        extension: false,
        for: 'JAXS GENERATION',
    },
    'http://schemas.xmlsoap.org/ws/2003/05/partner-link/': {
        known: true,
        base: false,
        extension: false,
        for: 'BPEL',
    },
    'http://www.w3.org/2001/12/soap-encoding': {
        known: true,
        base: false,
        extension: false,
        for: 'SOAP ENCODING'
    }
};

// Common NCNames for Nodes found in XSD or WSDL
var COMMOM_NODE_NAMES = [
    '#document', 'definitions', 'documentation', 'types', 'schema',
    'element', 'complexType', 'annotation', '#text', 'appinfo', 'sequence', 'message', 'part', 'portType',
    'operation', 'input', 'output', 'binding', 'body', 'service', 'port', 'address',
    '#comment', 'include', 'import', 'complexType', 'extension', 'restriction', 'simpleType',
    'simpleContent', 'complexContent', 'minLength', 'maxLength', 'pattern',
    'minInclusive', 'maxInclusive', 'attribute', 'group', 'attributeGroup',
    'totalDigits', 'enumeration', 'choice', '#cdata-section', 'any', 'anyAttribute',
    'list', 'fault', 'all', 'union', 'length', 'minInclusive', 'maxInclusive', 'minExclusive', 'maxExclusive', 'fractionDigits',
    'header', 'whiteSpace', 'urlEncoded', 'redefine', 'notation', 'unique', 'headerfault', 'mimeXml', 'content', 'multipartRelated',
    'selector', 'field',
    'UsingAddressing'
];

// Uncommon NCNames and the namspace they are usually associated with
var UNCOMMON_NODE_NAMES = {
    enableWrapperStyle: 'http://java.sun.com/xml/ns/jaxws',
    bindings: 'http://java.sun.com/xml/ns/jaxws',
    UsingPolicy: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    PolicyReference: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    Policy: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    ExactlyOne: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    All: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    TransportBinding: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    TransportToken: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    HttpsToken: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    AlgorithmSuite: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    Layout: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    Basic256: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    Strict: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    EndpointReference: 'http://www.w3.org/2005/08/addressing',
    Address: 'http://www.w3.org/2005/08/addressing',
    Identity: 'http://schemas.xmlsoap.org/ws/2006/02/addressingidentity',
    Spn: 'http://schemas.xmlsoap.org/ws/2006/02/addressingidentity',
    NegotiateAuthentication: 'http://schemas.microsoft.com/ws/06/2004/policy/http',
    BbinaryAuthentication: 'http://schemas.microsoft.com/ws/06/2004/policy/http',
    BasicAuthentication: 'http://schemas.microsoft.com/ws/06/2004/policy/http',
    BinaryEncoding: 'http://schemas.microsoft.com/ws/06/2004/mspolicy/netbinary1',
    role: 'http://schemas.xmlsoap.org/ws/2003/05/partner-link/',
    partnerLinkType: 'http://schemas.xmlsoap.org/ws/2003/05/partner-link/',
};

// Common NCNames for attributes found in xsd and wsdl files
var COMMOM_ATTR_NAMES = [
    'name', 'targetNamespace', 'required', 'xmlns', 'type', 'lang', 'source',
    'minOccurs', 'maxOccurs', 'element', 'message', 'style', 'transport', 'soapAction',
    'use', 'binding', 'location', 'elementFormDefault', 'attributeFormDefault', 'mixed', 'ref',
    'base', 'value', 'fixed', 'default', 'version', 'schemaLocation', 'substitutionGroup',
    'namespace', 'nillable', 'id', 'abstract', 'processContents', 'final', 'itemType', 'Action',
    'memberTypes', 'parts', 'parameterOrder', 'part', 'blockDefault', 'encodingStyle', 'finalDefault', 'xpath', 'refer',
    'form', 'verb', 'expectedContentTypes', 'minVersion', 'maxVersion',
    'apicID' // This is an attribute silently added by APIC during processing so that we can track order
];

// Uncommon  Attribute NCNames and the namspace they are usually associated with
var UNCOMMON_ATTR_NAMES = {
    docRoot: 'an ibm tooling extension',
    Id: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    URI: 'http://schemas.xmlsoap.org/ws/2004/09/policy',
    RequireClientCertificate: 'http://schemas.xmlsoap.org/ws/2005/07/securitypolicy',
    usingSession: 'http://schemas.microsoft.com/ws/2005/12/wsdl/contract',
    arrayType: 'http://www.w3.org/2001/12/soap-encoding', // Actually in 'http://schemas.xmlsoap.org/wsdl/' but used for soap encoding
};

// NODE TYPE INFORMATION
var NODE_TYPE = {
    1: { keep: true,   report: false, name: 'ELEMENT_NODE' },
    2: { keep: true,   report: false, name: 'ATTRIBUTE_NODE' },
    3: { keep: true,   report: false, name: 'TEXT_NODE' },
    4: { keep: true,   report: false, name: 'CDATA_SECTION_NODE' },
    5: { keep: false,  report: true,  name: 'ENTITY_REFERENCE_NODE' },
    6: { keep: false,  report: true,  name: 'ENTITY_NODE' },
    7: { keep: true,   report: false, name: 'PROCESSING_INSTRUCTION_NODE' },
    8: { keep: false,  report: false, name: 'COMMENT_NODE' },
    9: { keep: true,   report: false, name: 'DOCUMENT_NODE' },
    10: { keep: false, report: true,  name: 'DOCUMENT_TYPE_NODE' },
    11: { keep: true,  report: true,  name: 'DOCUMENT_FRAGMENT_NODE' },
    12: { keep: true,  report: true,  name: 'NOTATION_NODE' }
};


exports.getAttrInfo = getAttrInfo;
exports.getNamespaceInfo = getNamespaceInfo;
exports.getNamesMap = getNamesMap;
exports.getNameInfo = getNameInfo;
exports.getNodeTypeInfo = getNodeTypeInfo;
exports.getKnownNamespaces = getKnownNamespaces;
exports.pruneDOM = pruneDOM;
exports.removeDTD = removeDTD;
exports.traverseDOM = traverseDOM;
