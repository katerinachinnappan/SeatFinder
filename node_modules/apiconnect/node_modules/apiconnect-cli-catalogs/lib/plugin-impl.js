#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-catalogs


var Catalogs = require('apiconnect-apim-client').catalogs;
var apicUtil = require('apiconnect-cli-util').Util;
var fmt = require('./formatter');
var g = require('strong-globalize')();

module.exports.catalogsList = catalogsList;
function catalogsList(options) {
  if (options.allOrganizations) {
    options.organization = null;
  } else if (!options.organization) {
    throw new Error(g.f('The {{--organization}} option is required'));
  }
  var catalogsFun = options.allOrganizations ? Catalogs.listAll : Catalogs.list;
  return catalogsFun(options)
    .then(function(res) {
      fmt.listFormatter(res, options);
    })
    .catch(function(err) {
      fmt.error(err);
    });
};

module.exports.catalogsCreate = catalogsCreate;
function catalogsCreate(displayName, options) {
  if (typeof options.name === 'function') {
    options.name = null;
  }
  options.name = options.name || apicUtil.generateSlugFromText(displayName);
  options.displayName = displayName;
  return Catalogs.create(options).then(function(result) {
    fmt.createFormatter(result, options);
  });
}

module.exports.catalogsGet = catalogsGet;
function catalogsGet(name, options) {
  options.catalog = name;
  return Catalogs.get(options).then(function(result) {
    fmt.getFormatter(result, options);
  });
}

module.exports.catalogsDelete = catalogsDelete;
function catalogsDelete(name, options) {
  options.catalog = name;
  return Catalogs.delete(options).then(function(result) {
    fmt.deleteFormatter(name, options);
  });
}

module.exports.catalogsSet = catalogsSet;
function catalogsSet(name, options) {
  options.catalog = name;
  options.spaceEnabled = options.spaces && (options.spaces === 'enabled');
  return Catalogs.set(options).then(function(result) {
    fmt.setFormatter(result, options);
  });
}

module.exports.catalogsTransfer = catalogsTransfer;
function catalogsTransfer(name, userId, options) {
  options.catalog = name;
  options.userId = userId;
  return Catalogs.transferOwner(options).then(function(result) {
    fmt.transferFormatter(name, options);
  })
  .catch(function(err) {
    fmt.error(err);
  });
}
