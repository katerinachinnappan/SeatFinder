/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var f = require('util').format;

module.exports = function(options, required) {
  options = options || {};
  required = typeof required === 'string' ? [ required ] : required;

  var credsErr = checkCredsOpts(options);
  if (credsErr) {
    return Promise.reject(credsErr);
  }

  var missing = [];
  // Checking the required fields
  if (required) {
    var keys = Object.keys(options);
    missing = _.reduce(required, function(acc, reqKey) {
      if (!_.includes(keys, reqKey)) {
        acc.push(reqKey);
      }
      return acc;
    }, missing);
  }

  if (missing.length === 0) {
    return Promise.resolve(options);
  }
  missing = _.sortBy(missing);
  var err = new Error(f('Missing the following parameters [%s]', missing.join(', ')));
  err.missing = missing;
  return Promise.reject(err);
};

function checkCredsOpts(options) {
  if (options.creds === false) {
    return;
  }
  options.creds = options.creds || {};
  var keys = Object.keys(options.creds);
  var i = _.includes.bind(_, keys);
  // we can't figure out which method of creds they're using.
  if (!options.creds || !i('token') && !i('username') && !i('password')) {
    var err = Error(f('Missing the following parameters [%s] or [%s].',
      'creds.username, creds.password, creds.host',
      'creds.token, creds.host'));
    err.missing = [
      [ 'creds.username, creds.password, creds.host' ],
      [ 'creds.token, creds.host' ],
    ];
    return err;
  } else {
    var missing = [];
    // Found a match
    if (i('token') && (i('host') || i('host'))
      || i('username') && i('password') && (i('host') || i('host'))) {
      return;
    } else if (i('token') && !i('host')) {
      missing.push('creds.host');
    } else if (i('username') || i('password')) {
      if (!i('host')) {
        missing.push('creds.host');
      }
      if (!i('password')) {
        missing.push('creds.password');
      }
      if (!i('username')) {
        missing.push('creds.username');
      }
    }
    err = new Error(f('Missing the following parameters [%s]',
      missing.join(', ')));
    err.missing = missing;
    return err;
  }
};

