/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var _ = require('lodash');
var f = require('util').format;
var reqOpts = require('./req-options');
var request = require('./request');
var validator = require('./opts-validator');

function list(options) {
  options = _.defaults({}, options, { type: 'provider' });
  switch (options.type) {
    case 'provider':
      return validator(options, [ 'type' ]).then(function(options) {
        return request(reqOpts(_.defaults({
          url: '/v1/me/orgs?orgType=apiProvider',
          json: true,
        }, options))).then(function(orgs) {
          return _.map(orgs, fixupOrg);
        });
      });
    case 'consumer':
      var args = options.space ?
      [
        '/v1/orgs/%s/environments/%s/spaces/%s/consumerOrgs/',
        options.organization,
        options.catalog,
        options.space,
      ] : [
        '/v1/orgs/%s/environments/%s/consumerOrgs/',
        options.organization,
        options.catalog,
      ];
      return validator(options, [ 'type', 'organization', 'catalog' ]).then(function(options) {
        return request(reqOpts(_.defaults({
          url: f.apply(null, args),
          json: true,
        }, options)));
      });
    default:
      var err = new Error(f('Unknown type: %s. Valid types are "provider" and "consumer"', options.type));
      err.code = 'INVALID_ORG_TYPE';
      err.obj = { type: options.type };
      throw err;
  }
};

function get(options) {
  options = _.defaults({}, options, { type: 'provider' });
  switch (options.type) {
    case 'provider':
      return validator(options, [ 'type', 'name' ]).then(function(options) {
        return request(reqOpts(_.defaults({
          url: '/v1/me/orgs?orgType=apiProvider',
          json: true,
        }, options))).then(function(orgs) {
          orgs = _.map(orgs, fixupOrg);
          orgs = _.filter(orgs, function(org) {
            return org.id === options.name || org.name === options.name;
          });
          if (orgs.length !== 1) {
            var err = new Error(f('No such provider organization: %s', options.name));
            err.code = 'ORG_NOT_FOUND';
            err.obj = { org: options.name };
            throw err;
          }
          return orgs[0];
        });
      });
    case 'consumer':
      var args = options.space ?
      [
        '/v1/orgs/%s/environments/%s/spaces/%s/consumerOrgs/%s',
        options.organization,
        options.catalog,
        options.space,
        options.name,
      ] : [
        '/v1/orgs/%s/environments/%s/consumerOrgs/%s',
        options.organization,
        options.catalog,
        options.name,
      ];
      return validator(options, [ 'type', 'organization', 'catalog', 'name' ]).then(function(options) {
        return request(reqOpts(_.defaults({
          url: f.apply(null, args),
          json: true,
        }, options))).catch(function(err) {
          if (err.statusCode === 404) {
            err = new Error(f('No such consumer organization: %s', options.name));
            err.code = 'ORG_NOT_FOUND';
            err.obj = { org: options.name };
            throw err;
          }
          throw err;
        });
      });
    default:
      var err = new Error(f('Unknown type: %s. Valid types are "provider" and "consumer"', options.type));
      err.code = 'INVALID_ORG_TYPE';
      err.obj = { type: options.type };
      throw err;
  }
};

function fixupOrg(org) {
  if (org.externalNativeOrgId) {
    org.bluemix = {
      inviteUri: org.externalInviteOverride,
      organization: org.externalNativeOrgId,
      space: org.externalSpaceId,
    };
  }
  return org;
}

module.exports = {
  list: list,
  get: get,
};

