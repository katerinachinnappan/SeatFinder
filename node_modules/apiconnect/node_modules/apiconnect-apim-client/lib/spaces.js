/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var _ = require('lodash');
var f = require('util').format;
var reqOpts = require('./req-options');
var request = require('./request');
var util = require('./util');
var validator = require('./opts-validator');

function list(options) {
  return validator(options, [ 'organization', 'catalog' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: f('/v1/orgs/%s/environments/%s/spaces', options.organization, options.catalog),
      json: true,
    }, options));
    return request(reqOptions);
  }).then(function(spaces) {
    return _.map(spaces, function(space) {
      space.spaceConfigUrl = f(
        'apic-space://%s/orgs/%s/catalogs/%s/spaces/%s',
        options.creds.host,
        options.organization,
        options.catalog,
        space.name
      );
      return space;
    });
  });
};

function get(options) {
  return validator(options, [ 'organization', 'catalog', 'space' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: f('/v1/orgs/%s/environments/%s/spaces/%s', options.organization, options.catalog, options.space),
      json: true,
    }, options));
    return request(reqOptions);
  });
};

function create(options) {
  if (typeof options.name === 'string') {
    options.spacename = options.name;
  }
  options = _.defaults({}, options, { spacename: util.generateSlugFromText(options.displayName) });

  return validator(options, [ 'organization', 'catalog', 'displayName' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: f('/v1/orgs/%s/environments/%s/spaces', options.organization, options.catalog),
      json: true,
      method: 'post',
      body: {
        name: options.spacename,
        title: options.displayName,
      },
    }, options));
    return request(reqOptions);
  });
}

function del(options) {
  return validator(options, [ 'organization', 'catalog', 'space' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: f('/v1/orgs/%s/environments/%s/spaces/%s', options.organization, options.catalog, options.space),
      json: true,
      method: 'delete',
    }, options));
    return request(reqOptions);
  });
};

function set(options) {
  return validator(options, [ 'organization', 'catalog', 'space' ]).then(function(options) {
    var payload = {};
    if (options.name && typeof options.name !== 'function') {
      payload.name = options.name;
    }
    if (options.displayName) {
      payload.title = options.displayName;
    }
    var reqOptions = reqOpts(_.defaults({
      url: f('/v1/orgs/%s/environments/%s/spaces/%s', options.organization, options.catalog, options.space),
      json: true,
      method: 'put',
      body: payload,
    }, options));
    return request(reqOptions);
  });
};

module.exports = {
  create: create,
  del: del,
  get: get,
  list: list,
  set: set,
};

