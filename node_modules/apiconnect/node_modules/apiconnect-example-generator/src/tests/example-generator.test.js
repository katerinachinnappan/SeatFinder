/********************************************************* {COPYRIGHT-TOP} ***
* Licensed Materials - Property of IBM
*
* (C) Copyright IBM Corporation 2016, 2018
*
* All Rights Reserved.
* US Government Users Restricted Rights - Use, duplication or disclosure
* restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************** {COPYRIGHT-END} **/
describe('example-generator', function() {

  // set to true to have output from generate steps printed to console
  var debug = true;

  var exampleGenerator;
  var bank = {
    "swagger": "2.0",
    "info": {
      "title": "BankA",
      "description": "API resources related to the financial industry.\n\nYou may download the swagger.json definition to use in your API Management demos.\n\nOptionally, you can obtain the [source code](https://hub.jazz.net/git/bakert/apim-banka) and run it locally.",
      "version": "1.0.0",
      "x-ibm-name": "ibm-apim-banka"
    },
    "host": "apim-services.mybluemix.net",
    "basePath": "/banka/v1",
    "schemes": [
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/branches": {
        "post": {
          "tags": [
            "branch"
          ],
          "summary": "Create a new instance of the model and persist it into the data source.",
          "operationId": "branch.create",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "Model instance data",
              "required": false,
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "branch"
          ],
          "summary": "Update an existing model instance or insert a new one into the data source.",
          "operationId": "branch.upsert",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "Model instance data",
              "required": false,
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          },
          "deprecated": false
        },
        "get": {
          "tags": [
            "branch"
          ],
          "summary": "Find all instances of the model matched by filter from the data source.",
          "operationId": "branch.find",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filter defining fields, where, include, order, offset, and limit",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "zip",
              "in": "query",
              "description": "restrict matches to the selected zip code",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "opening_time",
              "in": "query",
              "description": "restrict matches to branches that are open after this time",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "hour",
              "in": "query",
              "description": "restrict matches to branches that are open at this hour",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sunset",
              "in": "query",
              "description": "restrict matches to branches that are open before this sunset time",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "humidity",
              "in": "query",
              "description": "something about the humidity for some reason",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "pressure",
              "in": "query",
              "description": "something something pressure",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "temperature",
              "in": "query",
              "description": "something something temperature",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "country",
              "in": "query",
              "description": "something something country",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "countryShort",
              "in": "query",
              "description": "something something country code",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "countryCode",
              "in": "query",
              "description": "something something country in short form",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/branch"
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/branches/{id}/exists": {
        "get": {
          "tags": [
            "branch"
          ],
          "summary": "Check whether a model instance exists in the data source.",
          "operationId": "branch.exists",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "object"
              }
            }
          },
          "deprecated": false
        }
      },
      "/branches/{id}": {
        "head": {
          "tags": [
            "branch"
          ],
          "summary": "Check whether a model instance exists in the data source.",
          "operationId": "branch.exists.head",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "object"
              }
            }
          },
          "deprecated": false
        },
        "get": {
          "tags": [
            "branch"
          ],
          "summary": "Find a model instance by id from the data source.",
          "operationId": "branch.findById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filter defining fields and include",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "branch"
          ],
          "summary": "Delete a model instance by id from the data source.",
          "operationId": "branch.deleteById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "branch"
          ],
          "summary": "Update attributes for a model instance and persist it into the data source.",
          "operationId": "branch.prototype.updateAttributes",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "An object of model property name/value pairs",
              "required": false,
              "schema": {
                "$ref": "#/definitions/branch"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/branch"
              }
            }
          },
          "deprecated": false
        }
      },
      "/branches/count": {
        "get": {
          "tags": [
            "branch"
          ],
          "summary": "Count instances of the model matched by where from the data source.",
          "operationId": "branch.count",
          "parameters": [
            {
              "name": "where",
              "in": "query",
              "description": "Criteria to match model instances",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "object"
              }
            }
          },
          "deprecated": false
        }
      },
      "/customers/{id}/accounts/{fk}": {
        "get": {
          "tags": [
            "customer"
          ],
          "summary": "Find a related item by id for accounts.",
          "operationId": "customer.prototype.__findById__accounts",
          "parameters": [
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for accounts",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "customer"
          ],
          "summary": "Delete a related item by id for accounts.",
          "operationId": "customer.prototype.__destroyById__accounts",
          "parameters": [
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for accounts",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "customer"
          ],
          "summary": "Update a related item by id for accounts.",
          "operationId": "customer.prototype.__updateById__accounts",
          "parameters": [
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for accounts",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "data",
              "in": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/account"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "deprecated": false
        }
      },
      "/customers/{id}/accounts": {
        "get": {
          "tags": [
            "customer"
          ],
          "summary": "Queries accounts of customer.",
          "operationId": "customer.prototype.__get__accounts",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/account"
                }
              }
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "customer"
          ],
          "summary": "Creates a new instance in accounts of this model.",
          "operationId": "customer.prototype.__create__accounts",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/account"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/account"
              }
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "customer"
          ],
          "summary": "Deletes all accounts of this model.",
          "operationId": "customer.prototype.__delete__accounts",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful"
            }
          },
          "deprecated": false
        }
      },
      "/customers/{id}/accounts/count": {
        "get": {
          "tags": [
            "customer"
          ],
          "summary": "Counts accounts of customer.",
          "operationId": "customer.prototype.__count__accounts",
          "parameters": [
            {
              "name": "where",
              "in": "query",
              "description": "Criteria to match model instances",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "id",
              "in": "path",
              "description": "PersistedModel id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "object"
              }
            }
          },
          "deprecated": false
        }
      },
      "/customers": {
        "post": {
          "tags": [
            "customer"
          ],
          "summary": "Create a new instance of the model and persist it into the data source.",
          "operationId": "customer.create",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "Model instance data",
              "required": false,
              "schema": {
                "$ref": "#/definitions/customer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/customer"
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "customer"
          ],
          "summary": "Update an existing model instance or insert a new one into the data source.",
          "operationId": "customer.upsert",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "Model instance data",
              "required": false,
              "schema": {
                "$ref": "#/definitions/customer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/customer"
              }
            }
          },
          "deprecated": false
        },
        "get": {
          "tags": [
            "customer"
          ],
          "summary": "Find all instances of the model matched by filter from the data source.",
          "operationId": "customer.find",
          "parameters": [
            {
              "name": "filter",
              "in": "query",
              "description": "Filter defining fields, where, include, order, offset, and limit",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/customer"
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/customers/{id}": {
        "get": {
          "tags": [
            "customer"
          ],
          "summary": "Find a model instance by id from the data source.",
          "operationId": "customer.findById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filter defining fields and include",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/customer"
              }
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "customer"
          ],
          "summary": "Delete a model instance by id from the data source.",
          "operationId": "customer.deleteById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful"
            }
          },
          "deprecated": false
        }
      },
      "/loans/quote": {
        "get": {
          "tags": [
            "loan"
          ],
          "summary": "Calculate a monthly payment",
          "operationId": "loan.quote",
          "parameters": [
            {
              "name": "apr",
              "in": "query",
              "description": "annual percentage rate (%)",
              "required": true,
              "type": "number",
              "format": "double"
            },
            {
              "name": "amount",
              "in": "query",
              "description": "total amount of the loan ($)",
              "required": true,
              "type": "number",
              "format": "double"
            },
            {
              "name": "term",
              "in": "query",
              "description": "loan duration (months)",
              "required": true,
              "type": "number",
              "format": "double"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/quote"
              }
            }
          },
          "deprecated": false
        }
      },
      "/branches/multiple_withref": {
        "post": {
          "tags": [
            "branch"
          ],
          "description": "Create multiple branches",
          "responses": {
            "201": {
              "description": "201 Created"
            }
          },
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "description": "Branches request",
              "schema": {
                "$ref": "#/definitions/branchrequest_ref"
              }
            }
          ]
        }
      },
      "/branches/multiple_inline": {
        "post": {
          "tags": [
            "branch"
          ],
          "description": "Create multiple branches",
          "responses": {
            "201": {
              "description": "201 Created"
            }
          },
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "description": "Branches request",
              "schema": {
                "$ref": "#/definitions/branchrequest_inline"
              }
            }
          ]
        }
      },
      "/branches/multiple_recursive": {
        "post": {
          "responses": {
            "200": {
              "description": "200 OK"
            }
          },
          "tags": [
            "branch"
          ],
          "summary": "An artificial operation allowing for testing of a body with a recursively defined, self-referential object",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/branchrequest_recursive"
              }
            }
          ]
        }
      },
      "/branches/array_of_arrays": {
        "post": {
          "responses": {
            "200": {
              "description": "200 OK"
            }
          },
          "tags": [
            "branch"
          ],
          "summary": "An artificial operation allowing for testing of a body with a recursively defined, self-referential object",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/arrayofarray"
              }
            }
          ]
        }
      }
    },
    "definitions": {
      "address": {
        "properties": {
          "street1": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "street1": "15 Fancy Street",
          "street2": "Faraway",
          "city": "Toptown",
          "state": "Hundera",
          "zip_code": "123456"
        }
      },
      "account": {
        "properties": {
          "id": {
            "type": "string",
            "example": "ACC-10298362"
          },
          "name": {
            "type": "string",
            "example": "Universal Saver"
          },
          "type": {
            "type": "string",
            "example": "checking"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "example": 2000.2
          },
          "status": {
            "type": "string",
            "example": "open"
          },
          "credit_limit": {
            "type": "number",
            "format": "double",
            "example": 2000
          },
          "customer_id": {
            "type": "string",
            "example": "CUST-102928282"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "customer": {
        "description": "operations for customer accounts",
        "properties": {
          "id": {
            "type": "string",
            "example": "ABC-DE-12345"
          },
          "first_name": {
            "type": "string",
            "example": "Thomas"
          },
          "last_name": {
            "type": "string",
            "example": "Maxwell"
          },
          "email": {
            "type": "string",
            "example": "thomas.maxwell@example.com"
          },
          "address": {
            "$ref": "#/definitions/address"
          },
          "dob": {
            "type": "string",
            "format": "date",
            "example": "01-01-1901"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false
      },
      "branch": {
        "description": "operations for branch information",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "$ref": "#/definitions/address"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "example": {
          "id": 1234,
          "type": "retail",
          "phone": 474747,
          "address": {
            "street1": "15 Sunrise Drive",
            "street2": "Havenbrook",
            "city": "Millwall",
            "state": "Penshire",
            "zip_code": 47471
          }
        }
      },
      "quote": {
        "properties": {
          "monthly_payment": {
            "type": "number",
            "example": 12
          }
        }
      },
      "branchrequest_inline": {
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The ID of the request",
            "example": "ABCD1234"
          },
          "branches": {
            "properties": {},
            "type": "array",
            "description": "The array of branches",
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "address": {
                  "$ref": "#/definitions/address"
                }
              },
              "required": [
                "id",
                "type",
                "phone",
                "address"
              ],
              "additionalProperties": false,
              "example": {
                "id": "BR-123",
                "type": "retail",
                "phone": 1234474747,
                "address": {
                  "street1": "15 Sunrise Drive",
                  "street2": "Havenbrook",
                  "city": "Millwall",
                  "state": "Penshire",
                  "zip_code": 47471
                }
              }
            }
          }
        },
        "required": [
          "requestId",
          "branches"
        ]
      },
      "branchrequest_ref": {
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The ID of the request",
            "example": "AABB-11223344"
          },
          "branches": {
            "type": "array",
            "description": "The array of branches",
            "items": {
              "$ref": "#/definitions/branch"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "requestId",
          "branches"
        ]
      },
      "branchrequest_recursive": {
        "type": "object",
        "description": "Recursive array definition of branches",
        "properties": {
          "genericProperty": {
            "properties": {},
            "type": "string"
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/branchrequest_recursive"
            }
          }
        },
        "required": [
          "genericProperty",
          "branches"
        ]
      },
      "arrayofarray": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "branch",
        "description": "operations for branch information"
      },
      {
        "name": "customer",
        "description": "operations for customer accounts"
      },
      {
        "name": "loan",
        "description": "operations for loans"
      }
    ],
    "x-ibm-configuration": {
      "enforced": true,
      "testable": true,
      "phase": "realized",
      "cors": {
        "enabled": true
      }
    }
  };

  var twitter = {
    "swagger": "2.0",
    "info": {
      "version": "1.1",
      "title": "Twitter REST API",
      "x-ibm-name": "twitter-rest-api",
      "description": "Retrieved from http://editor.swagger.io/ on 29th Feb 2016. \nAssembly implementation added on 29th Feb 2016. \n\nNote that this API is NOT enforced and CAN NOT be invoked."
    },
    "host": "api.twitter.ibm.com",
    "basePath": "/1.1",
    "schemes": [
      "http",
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "securityDefinitions": {
      "oauth": {
        "type": "oauth2",
        "flow": "implicit",
        "authorizationUrl": "https://twitter.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token",
        "scopes": {
          "basic": "to read any and all data related to twitter\n"
        }
      }
    },
    "security": [
      {
        "oauth": [
          "basic"
        ]
      }
    ],
    "paths": {
      "/statuses/mentions_timeline": {
        "get": {
          "description": "Returns the 20 most recent mentions for the authenticating user",
          "security": [
            {
              "oauth": [
                "basic"
              ]
            }
          ],
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "description": "Specifies the number of tweets to try and retrieve",
              "required": false,
              "type": "string"
            },
            {
              "name": "since_id",
              "in": "query",
              "description": "Returns result with an ID greater than the specified ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "max_id",
              "in": "query",
              "description": "Returns results with an ID less than or equal to the specified ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "trim_user",
              "in": "query",
              "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object",
              "required": false,
              "type": "string"
            },
            {
              "name": "contributor_details",
              "in": "query",
              "description": "This parameter enhances the contributors element of the status response",
              "required": false,
              "type": "string"
            },
            {
              "name": "include_entities",
              "in": "query",
              "description": "The entities node will be disincluded when set to false",
              "required": false,
              "type": "string"
            },
            {
              "name": "booleanParam",
              "in": "query",
              "description": "An example boolean",
              "required": false,
              "type": "boolean"
            },
            {
              "default": 0,
              "description": "Number of payment requests to skip for pagination.",
              "format": "int32",
              "in": "query",
              "name": "offset",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Tweets"
                }
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Tweets": {
        "type": "object",
        "properties": {
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Contributors"
            }
          },
          "coordinates": {
            "$ref": "#/definitions/Coordinates"
          },
          "created_at": {
            "type": "string"
          },
          "current_user_retweet": {
            "$ref": "#/definitions/Tweets"
          },
          "entities": {
            "$ref": "#/definitions/Entities"
          },
          "favorite_count": {
            "type": "integer"
          },
          "favorited": {
            "type": "boolean"
          },
          "filter_level": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "id_str": {
            "type": "string"
          },
          "in_reply_to_screen_name": {
            "type": "string"
          },
          "in_reply_to_status_id": {
            "type": "integer"
          },
          "in_reply_to_status_id_str": {
            "type": "string"
          },
          "in_reply_to_user_id": {
            "type": "integer"
          },
          "in_reply_to_user_id_str": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "place": {
            "$ref": "#/definitions/Places"
          },
          "possibly_sensitive": {
            "type": "boolean"
          },
          "quoted_status_id": {
            "type": "integer"
          },
          "quoted_status_id_str": {
            "type": "string"
          },
          "quoted_status": {
            "$ref": "#/definitions/Tweets"
          },
          "scopes": {
            "type": "object",
            "additionalProperties": {}
          },
          "retweet_count": {
            "type": "integer"
          },
          "retweeted": {
            "type": "boolean"
          },
          "retweeted_status": {
            "$ref": "#/definitions/Tweets"
          },
          "source": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "truncated": {
            "type": "string"
          },
          "user": {
            "$ref": "#/definitions/Users"
          },
          "withheld_copyright": {
            "type": "boolean"
          },
          "withheld_countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "withheld_scope": {
            "type": "string"
          }
        }
      },
      "Contributors": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "id_str": {
            "type": "string"
          },
          "screen_name": {
            "type": "string"
          }
        }
      },
      "Coordinates": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "contributors_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "default_profile": {
            "type": "boolean"
          },
          "default_profile_image": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "entities": {
            "$ref": "#/definitions/Entities"
          },
          "favorites_count": {
            "type": "integer"
          },
          "follow_request_sent": {
            "type": "boolean"
          },
          "following": {
            "type": "boolean"
          },
          "followers_count": {
            "type": "integer"
          },
          "friends_count": {
            "type": "integer"
          },
          "geo_enabled": {
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "id_str": {
            "type": "string"
          },
          "is_translator": {
            "type": "boolean"
          },
          "lang": {
            "type": "string"
          },
          "listed_count": {
            "type": "integer"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notifications": {
            "type": "boolean"
          },
          "profile_background_color": {
            "type": "string"
          },
          "profile_background_image_url": {
            "type": "string"
          },
          "profile_background_image_url_https": {
            "type": "string"
          },
          "profile_background_tile": {
            "type": "string"
          },
          "profile_banner_url": {
            "type": "string"
          },
          "profile_image_url": {
            "type": "string"
          },
          "profile_image_url_https": {
            "type": "string"
          },
          "profile_link_color": {
            "type": "string"
          },
          "profile_sidebar_border_color": {
            "type": "string"
          },
          "profile_sidebar_fill_color": {
            "type": "string"
          },
          "profile_text_color": {
            "type": "string"
          },
          "profile_use_background_image": {
            "type": "boolean"
          },
          "protected": {
            "type": "boolean"
          },
          "screen_name": {
            "type": "string"
          },
          "show_all_inline_media": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/definitions/Tweets"
          },
          "statuses_count": {
            "type": "integer"
          },
          "time_zone": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "utc_offset": {
            "type": "integer"
          },
          "verified": {
            "type": "boolean"
          },
          "withheld_in_countries": {
            "type": "string"
          },
          "withheld_scope": {
            "type": "string"
          }
        }
      },
      "Entities": {
        "type": "object",
        "properties": {
          "hashtags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Hashtags"
            }
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Media"
            }
          },
          "urls": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/URL"
            }
          },
          "user_mentions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/User_Mention"
            }
          }
        }
      },
      "Hashtags": {
        "type": "object",
        "properties": {
          "indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "text": {
            "type": "string"
          }
        }
      },
      "Media": {
        "type": "object",
        "properties": {
          "display_url": {
            "type": "string"
          },
          "expanded_url": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "id_str": {
            "type": "string"
          },
          "indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "media_url": {
            "type": "string"
          },
          "media_url_https": {
            "type": "string"
          },
          "sizes": {
            "$ref": "#/definitions/Sizes"
          },
          "source_status_id": {
            "type": "integer"
          },
          "source_status_id_str": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Size": {
        "type": "object",
        "properties": {
          "h": {
            "type": "integer"
          },
          "resize": {
            "type": "string"
          },
          "w": {
            "type": "integer"
          }
        }
      },
      "Sizes": {
        "type": "object",
        "properties": {
          "thumb": {
            "$ref": "#/definitions/Size"
          },
          "large": {
            "$ref": "#/definitions/Size"
          },
          "medium": {
            "$ref": "#/definitions/Size"
          },
          "small": {
            "$ref": "#/definitions/Size"
          }
        }
      },
      "URL": {
        "type": "object",
        "properties": {
          "display_url": {
            "type": "string"
          },
          "expanded_url": {
            "type": "string"
          },
          "indices": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "User_Mention": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "id_str": {
            "type": "string"
          },
          "indices": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string"
          },
          "screen_name": {
            "type": "string"
          }
        }
      },
      "Bounding_box": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Places": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {}
          },
          "bounding_box": {
            "$ref": "#/definitions/Bounding_box"
          },
          "country": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "place_type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "x-ibm-configuration": {
      "gateway": "datapower-gateway",
      "enforced": false,
      "testable": false,
      "phase": "identified",
      "cors": {
        "enabled": false
      },
      "assembly": {
        "execute": [
          {
            "activity-log": {
              "title": "activity-log",
              "content": "payload",
              "error-content": "payload",
              "description": "Log all traffic through our managed API"
            }
          },
          {
            "operation-switch": {
              "title": "operation-switch",
              "case": [
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/statuses/mentions_timeline"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/mentions_timeline"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/statuses/user_timeline"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statues/user_timeline"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/statuses/home_timeline"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/home_timeline"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/statuses/retweets/{id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/retweets/$(request.parameters.id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/statuses/show/{id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/show/$(request.parameters.id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/statuses/destroy/{id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/destroy/$(request.parameters.id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/statuses/update"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/update"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/statuses/oembed"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/statuses/oembed"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/list"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/list"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/statuses"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/statuses"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/members/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/members/destroy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/memberships"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/memberships"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/subscribers"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/subscribers"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/lists/subscribers/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/subscribers/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/subscribers/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/subscribers/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/subscribers/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/subscribers/destroy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/members/create_all"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/members/create_all"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/list/members/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/list/members/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/list/members"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/list/members"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/list/members/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/list/members/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/lists/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/destroy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/lists/update"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/update"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/lists/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/lists/subscriptions"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/lists/subscriptions"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/list/members/destroy_all"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/list/members/destroy_all"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/direct_messages/sent"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/direct_messages/sent"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/direct_messages/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/direct_messages/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/search/tweets"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/search/tweets"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/saved_searches/list"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/saved_searches/list"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/saved_searches/show/{id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/saved_searches/show/$(request.parameters.id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/saved_searches/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/saved_searches/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/saved_searches/destroy/{id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/saved_searches/destroy/$(request.parameters.id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/direct_messages"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/direct_messages"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/direct_messages/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/direct_messages/view"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/direct_messages/new"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/direct_messages/new"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/friends/ids"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friends/ids"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/followers/ids"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/followers/ids"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/friendships/incoming"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/incoming"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/friendships/outgoing"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/outgoing"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/friendships/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/friendships/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/destroy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/friendships/update"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/update"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/friendships/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/friendships/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/account/settings"
                    },
                    {
                      "verb": "post",
                      "path": "/account/settings"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/settings"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/account/update_delivery_device"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/update_delivery_device"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/account/update_profile"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/update_profile"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/account/update_profile_background_image"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/update_profile_background_image"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/account/update_profile_colors"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/update_profile_colors"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/account/update_profile_image"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/account/update_profile_image"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/blocks/list"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/blocks/list"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/blocks/ids"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/blocks/ids"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/blocks/create"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/blocks/create"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/blocks/destroy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/blocks/destroy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/users/lookup"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/lookup"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/users/show"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/show"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/users/search"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/search"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/users/contributees"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/contributees"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/users/contributors"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/contributors"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/geo/id/{place_id}"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/geo/id/$(request.parameters.place_id)"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/geo/reverse_geoncode"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/geo/reverse_geoncode"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/geo/search"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/geo/search"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/geo/similar_places"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/geo/similar_places"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/geo/places"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/geo/places"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/trends/available"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/trends/available"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/trends/place"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/trends/place"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/trends/closest"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/trends/closest"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "post",
                      "path": "/users/report_spam"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/users/report_spam"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/help/configuration"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/help/configuration"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/help/languages"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/help/languages"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/help/privacy"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/help/privacy"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/help/tos"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/help/tos"
                      }
                    }
                  ]
                },
                {
                  "operations": [
                    {
                      "verb": "get",
                      "path": "/application/rate_limit_status"
                    }
                  ],
                  "execute": [
                    {
                      "invoke": {
                        "title": "invoke",
                        "target-url": "https://api.twitter.ibm.com/application/rate_limit_status"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "redact": {
              "title": "redact",
              "actions": [
                {
                  "action": "redact",
                  "from": [
                    "all"
                  ],
                  "path": "/*/ibm"
                }
              ],
              "description": "Remove all instances of the word IBM from responses"
            }
          }
        ]
      }
    }
  };

  var recursive_definitions = {
  "swagger": "2.0",
  "info": {
    "x-ibm-name": "recursive-definitions",
    "title": "Recursive Definitions",
    "version": "1.0.0"
  },
  "schemes": [
    "https"
  ],
  "host": "$(catalog.host)",
  "basePath": "/complex-recursive-definitions",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "clientIdHeader": {
      "type": "apiKey",
      "in": "header",
      "name": "X-IBM-Client-Id"
    }
  },
  "security": [
    {
      "clientIdHeader": []
    }
  ],
  "x-ibm-configuration": {
    "testable": true,
    "enforced": true,
    "cors": {
      "enabled": true
    },
    "assembly": {
      "execute": [
        {
          "invoke": {
            "target-url": "$(target-url)$(request.path)"
          }
        }
      ]
    },
    "phase": "realized"
  },
  "paths": {
    "/ships": {
      "get": {
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/Ships"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Container": {
      "properties": {
        "label": {
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/Dimensions"
        },
        "owner": {
          "$ref": "#/definitions/Person"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      },
      "additionalProperties": false
    },
    "Person": {
      "properties": {
        "name": {
          "type": "string"
        },
        "honorific": {
          "type": "string"
        },
        "crew_on_ship": {
          "$ref": "#/definitions/Ship"
        }
      },
      "additionalProperties": false
    },
    "Dimensions": {
      "properties": {
        "width": {
          "type": "number",
          "format": "double"
        },
        "height": {
          "type": "number",
          "format": "double"
        },
        "depth": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "Item": {
      "properties": {
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Person"
        },
        "assigned_to_ship": {
          "$ref": "#/definitions/Ship"
        }
      },
      "additionalProperties": false
    },
    "Ship": {
      "properties": {
        "identifier": {
          "type": "string"
        },
        "captain": {
          "$ref": "#/definitions/Person"
        },
        "freight": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Container"
          }
        }
      },
      "additionalProperties": false
    },
    "Ships": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Ship"
      }
    }
  },
  "tags": []
};

  var arrayDefinitions = {
    "swagger": "2.0",
    "info": {
      "x-ibm-name": "array-definitions",
      "title": "Arrays",
      "version": "1.0.0",
      "description": "API demonstrating issues with arrays",
      "termsOfService": "none"
    },
    "schemes": [
      "https"
    ],
    "basePath": "/arrays",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "securityDefinitions": {
      "api-key-2": {
        "type": "apiKey",
        "description": "",
        "in": "header",
        "name": "X-IBM-Client-Secret"
      },
      "api-key-1": {
        "type": "apiKey",
        "description": "",
        "in": "header",
        "name": "X-IBM-Client-Id"
      }
    },
    "x-ibm-configuration": {
      "testable": true,
      "enforced": true,
      "cors": {
        "enabled": true
      },
      "phase": "realized"
    },
    "paths": {
      "/arrayobject": {
        "get": {
          "parameters": [
            {
              "name": "object",
              "in": "path",
              "description": "object",
              "required": true,
              "type": "string",
              "default": "abcdefg"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/arrayObjectResponse"
              }
            }
          }
        }
      },
      "/arrayIntegers": {
        "put": {
          "responses": {
            "200": {
              "description": "200 OK"
            }
          },
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/arrayIntegersBody"
              }
            }
          ]
        }
      }
    },
    "definitions": {
      "arrayObjectResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string"
            }
          },
          "example": [{
            "property": "some value"
          }]
        }
      },
      "arrayIntegersBody": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "example": [
          10,
          20,
          30
        ]
      }
    },
    "security": [
      {
        "api-key-2": [],
        "api-key-1": []
      }
    ]
  };

  var account = {
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "Accounts",
      "x-ibm-name": "accounts",
      "description": "Seamlessly morph focused innovation with performance based platforms. Globally promote distinctive customer service and technically sound customer service. Professionally optimize customer directed web services rather than sticky products. Dynamically empower pandemic testing procedures for ethical applications. Professionally simplify out-of-the-box paradigms through compelling human capital.\n\n\nQuickly engage backward-compatible e-tailers rather than performance based technology. Holisticly predominate fully tested solutions rather than client-centric applications. Phosfluorescently architect high standards in resources via client-focused growth strategies. Progressively engage multifunctional content whereas goal-oriented expertise. Continually impact superior potentialities without.",
      "termsOfService": "Terms",
      "contact": {
        "name": "A Person",
        "email": "a_person@uk.ibm.com",
      },
      "license": {
        "name": "MIT",
        "url": "http://swagger.io/terms/"
      },
      "x-ibm-summary": ""
    },
    "host": "blah.example.com",
    "basePath": "/demo/accounts",
    "paths": {
      "/balance": {
        "get": {
          "responses": {
            "200": {
              "description": "200 OK",
              "schema": {
                "properties": {
                  "Balance": {
                    "type": "number",
                    "format": "double"
                  }
                },
                "required": [
                  "Balance"
                ]
              }
            }
          },
          "parameters": [
            {
              "name": "customer_id",
              "type": "string",
              "required": true,
              "in": "query"
            }
          ]
        }
      }
    },
    "securityDefinitions": {
      "clientID": {
        "description": "",
        "in": "header",
        "name": "X-IBM-Client-Id",
        "type": "apiKey"
      }
    },
    "security": [
      {
        "clientID": []
      }
    ],
    "x-ibm-configuration": {
      "enforced": true,
      "testable": true,
      "phase": "realized",
      "cors": {
        "enabled": true
      },
      "targets": {
        "AccountService": {
          "swagger": "2.0",
          "info": {
            "title": "AccountService",
            "description": "",
            "x-ibm-name": "accountservice",
            "version": "1.0.0"
          },
          "schemes": [
            "https"
          ],
          "basePath": "/AccountService",
          "produces": [
            "application/xml"
          ],
          "consumes": [
            "text/xml"
          ],
          "securityDefinitions": {
            "clientID": {
              "type": "apiKey",
              "name": "X-IBM-Client-Id",
              "in": "header",
              "description": ""
            }
          },
          "security": [
            {
              "clientID": []
            }
          ],
          "x-ibm-configuration": {
            "type": "wsdl",
            "wsdl-definition": {
              "wsdl": "578639e5e4b035f005173c05",
              "service": "AccountService",
              "port": "AccountPort",
              "soap-version": "1.1"
            },
            "assembly": {
              "execute": [
                {
                  "proxy": {
                    "title": "proxy",
                    "target-url": "http://example.com/blah"
                  }
                }
              ]
            },
            "gateway": "datapower-gateway",
            "enforced": true,
            "testable": true,
            "phase": "realized",
            "cors": {
              "enabled": true
            }
          },
          "paths": {
            "/getBalance": {
              "post": {
                "summary": "Operation getBalance",
                "description": "",
                "operationId": "getBalance",
                "parameters": [
                  {
                    "in": "body",
                    "name": "body",
                    "required": true,
                    "schema": {
                      "type": "object",
                      "properties": {
                        "Envelope": {
                          "xml": {
                            "prefix": "soap-env",
                            "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                          },
                          "type": "object",
                          "properties": {
                            "Header": {
                              "type": "object",
                              "properties": {
                                "wsSecurityHeader": {
                                  "xml": {
                                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                                    "prefix": "wsse"
                                  },
                                  "type": "object",
                                  "properties": {
                                    "UsernameToken": {
                                      "type": "object",
                                      "properties": {
                                        "Username": {
                                          "type": "string"
                                        },
                                        "Password": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "Body": {
                              "type": "object",
                              "properties": {
                                "getBalance": {
                                  "xml": {
                                    "namespace": "http://bankA.sample.ibm.com/",
                                    "prefix": "tns"
                                  },
                                  "type": "object",
                                  "properties": {
                                    "arg0": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Header>\n\n  <wsse:wsSecurityHeader\nxmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n   <UsernameToken>\n\n    <Username>string</Username>\n\n    <Password>string</Password>\n\n   </UsernameToken>\n\n  </wsse:wsSecurityHeader>\n\n </soap-env:Header>\n\n <soap-env:Body>\n\n  <tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <arg0>3</arg0>\n\n  </tns:getBalance>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
                    }
                  }
                ],
                "responses": {
                  "default": {
                    "description": "",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "Envelope": {
                          "xml": {
                            "prefix": "soap-env",
                            "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                          },
                          "type": "object",
                          "properties": {
                            "Body": {
                              "type": "object",
                              "properties": {
                                "getBalanceResponse": {
                                  "xml": {
                                    "namespace": "http://bankA.sample.ibm.com/",
                                    "prefix": "tns"
                                  },
                                  "type": "object",
                                  "properties": {
                                    "return": {
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  },
                                  "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Body>\n\n  <tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <return>3</return>\n\n  </tns:getBalanceResponse>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
                    }
                  }
                },
                "x-ibm-soap": {
                  "soap-action": "getBalance",
                  "soap-operation": "{http://bankA.sample.ibm.com/}getBalance"
                }
              }
            }
          },
          "definitions": {
            "wsSecurityHeader": {
              "xml": {
                "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                "prefix": "wsse"
              },
              "type": "object",
              "properties": {
                "UsernameToken": {
                  "type": "object",
                  "properties": {
                    "Username": {
                      "type": "string"
                    },
                    "Password": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "getBalanceInput": {
              "type": "object",
              "properties": {
                "Envelope": {
                  "xml": {
                    "prefix": "soap-env",
                    "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                  },
                  "type": "object",
                  "properties": {
                    "Header": {
                      "type": "object",
                      "properties": {
                        "wsSecurityHeader": {
                          "xml": {
                            "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                            "prefix": "wsse"
                          },
                          "type": "object",
                          "properties": {
                            "UsernameToken": {
                              "type": "object",
                              "properties": {
                                "Username": {
                                  "type": "string"
                                },
                                "Password": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "Body": {
                      "type": "object",
                      "properties": {
                        "getBalance": {
                          "xml": {
                            "namespace": "http://bankA.sample.ibm.com/",
                            "prefix": "tns"
                          },
                          "type": "object",
                          "properties": {
                            "arg0": {
                              "type": "integer",
                              "format": "int32"
                            }
                          },
                          "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
                        }
                      }
                    }
                  }
                }
              },
              "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Header>\n\n  <wsse:wsSecurityHeader\nxmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n   <UsernameToken>\n\n    <Username>string</Username>\n\n    <Password>string</Password>\n\n   </UsernameToken>\n\n  </wsse:wsSecurityHeader>\n\n </soap-env:Header>\n\n <soap-env:Body>\n\n  <tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <arg0>3</arg0>\n\n  </tns:getBalance>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
            },
            "getBalanceOutput": {
              "type": "object",
              "properties": {
                "Envelope": {
                  "xml": {
                    "prefix": "soap-env",
                    "namespace": "http://schemas.xmlsoap.org/soap/envelope/"
                  },
                  "type": "object",
                  "properties": {
                    "Body": {
                      "type": "object",
                      "properties": {
                        "getBalanceResponse": {
                          "xml": {
                            "namespace": "http://bankA.sample.ibm.com/",
                            "prefix": "tns"
                          },
                          "type": "object",
                          "properties": {
                            "return": {
                              "type": "integer",
                              "format": "int32"
                            }
                          },
                          "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
                        }
                      }
                    }
                  }
                }
              },
              "example": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\n <soap-env:Body>\n\n  <tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n\n   <return>3</return>\n\n  </tns:getBalanceResponse>\n\n </soap-env:Body>\n\n</soap-env:Envelope>"
            },
            "getBalanceHeader": {
              "type": "object",
              "properties": {
                "wsSecurityHeader": {
                  "xml": {
                    "namespace": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                    "prefix": "wsse"
                  },
                  "type": "object",
                  "properties": {
                    "UsernameToken": {
                      "type": "object",
                      "properties": {
                        "Username": {
                          "type": "string"
                        },
                        "Password": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "getBalance": {
              "xml": {
                "namespace": "http://bankA.sample.ibm.com/",
                "prefix": "tns"
              },
              "type": "object",
              "properties": {
                "arg0": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": "\n<tns:getBalance xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <arg0>3</arg0>\n</tns:getBalance>"
            },
            "getBalanceResponse": {
              "xml": {
                "namespace": "http://bankA.sample.ibm.com/",
                "prefix": "tns"
              },
              "type": "object",
              "properties": {
                "return": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "example": "\n<tns:getBalanceResponse xmlns:tns=\"http://bankA.sample.ibm.com/\">\n <return>3</return>\n</tns:getBalanceResponse>"
            }
          }
        }
      },
      "gateway": "datapower-gateway",
      "type": "rest",
      "properties": {
        "target-url": {
          "value": "http://example.com/operation-name",
          "description": "The URL of the target service",
          "encoded": false
        }
      },
      "servers": [
        {
          "url": "https://blah.example.com/blah",
          "description": "Default Staging server."
        }
      ]
    },
    "definitions": {
      "Account Output": {
        "properties": {
          "Balance": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "Balance"
        ]
      }
    },
    "externalDocs": {
      "description": "Bank A Account services",
      "url": "http://blah.example.com/docs"
    },
    "schemes": [
      "https"
    ]
  };

  var balance = {
    "swagger": "2.0",
    "info": {
      "title": "Balance",
      "description": "Description for the balance service.  Monotonectally foster stand-alone potentialities without superior infrastructures. Globally extend mission-critical ROI rather than high standards in niches. Proactively evisculate market positioning meta-services and market-driven functionalities. Quickly expedite maintainable intellectual capital and resource sucking architectures. Conveniently impact parallel functionalities and web-enabled results.",
      "version": "1",
      "x-ibm-name": "balance",
      "x-ibm-summary": ""
    },
    "basePath": "/demo/balance",
    "paths": {
      "/item/{id}": {
        "get": {
          "tags": [],
          "summary": "findItemById",
          "description": "Summary - Returns an item based on a single ID",
          "parameters": [
            {
              "default": "",
              "description": "ID of item to fetch",
              "name": "id",
              "required": true,
              "type": "string",
              "in": "path"
            },
            {
              "schema": [],
              "description": "",
              "name": "body",
              "in": "body"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "required": [
                  "id",
                  "name",
                  "categories"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  },
                  "categories": {
                    "type": "string"
                  }
                },
                "example": {
                  "id": 1,
                  "name": "Item1",
                  "categories": "Super,Duper"
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "id": "1",
                  "name": "Item1",
                  "categories": "Super,Duper"
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        },
        "put": {
          "tags": [],
          "summary": "updateItemById",
          "description": "Summary - Updates an item",
          "parameters": [
            {
              "schema": {
                "required": [
                  "name",
                  "categories"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "categories": {
                    "type": "string"
                  }
                }
              },
              "name": "body",
              "in": "body"
            },
            {
              "default": "",
              "description": "ID of item to update",
              "name": "id",
              "required": true,
              "type": "string",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "required": [
                  "code",
                  "message"
                ],
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "code": "0",
                  "message": "1:Item1"
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        },
        "post": {
          "tags": [],
          "summary": "addItemById",
          "description": "Summary - Adds a new item",
          "parameters": [
            {
              "schema": {
                "required": [
                  "name",
                  "categories"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "categories": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "Item1",
                  "categories": "Super,Duper"
                }
              },
              "name": "body",
              "in": "body"
            },
            {
              "default": "",
              "description": "ID of item to add",
              "name": "id",
              "required": true,
              "type": "string",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "required": [
                  "name",
                  "categories"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "categories": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "code": "0",
                  "message": "1:Item1"
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        },
        "delete": {
          "tags": [],
          "summary": "deleteItemByID",
          "description": "Summary - Deletes an item",
          "parameters": [
            {
              "default": "",
              "description": "ID of item to delete",
              "name": "id",
              "required": true,
              "type": "string",
              "in": "path"
            },
            {
              "schema": [],
              "description": "",
              "name": "body",
              "in": "body"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "required": [
                  "code",
                  "message"
                ],
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "code": "0",
                  "message": "1 deleted"
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        }
      },
      "/items": {
        "get": {
          "tags": [],
          "summary": "findItems",
          "description": "Summary - Returns all items from the system that the user has access to",
          "parameters": [
            {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "id",
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "id": 1,
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                }
              },
              "name": "body",
              "in": "body"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "id",
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "id": 1,
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "item": [
                    {
                      "id": "1",
                      "name": "Item1",
                      "categories": "Super,Duper"
                    },
                    {
                      "id": "2",
                      "name": "Item2",
                      "categories": "Super,Duper"
                    },
                    {
                      "id": "3",
                      "name": "Item3",
                      "categories": "Super,Duper"
                    },
                    {
                      "id": "4",
                      "name": "Item4",
                      "categories": "Super,Duper"
                    },
                    {
                      "id": "5",
                      "name": "Item5",
                      "categories": "Super,Duper"
                    }
                  ]
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        },
        "post": {
          "tags": [],
          "summary": "addItems",
          "description": "Summary - Adds new items",
          "parameters": [
            {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "id",
                    "name",
                    "categories"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    },
                    "categories": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "id": 1,
                    "name": "Item1",
                    "categories": "Super,Duper"
                  }
                }
              },
              "name": "body",
              "in": "body"
            }
          ],
          "responses": {
            "200": {
              "schema": {
                "required": [
                  "code",
                  "message"
                ],
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated Response Description",
              "examples": {
                "application/json": {
                  "code": "0",
                  "message": "Items saved: 1;2;3;4;5;"
                }
              }
            }
          },
          "deprecated": false,
          "schemes": [
            "https"
          ]
        }
      }
    },
    "definitions": {
      "item": {
        "required": [
          "id",
          "name",
          "categories"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          }
        },
        "example": {
          "id": 1,
          "name": "Item1",
          "categories": "Super,Duper"
        }
      },
      "items": {
        "type": "array",
        "items": {
          "required": [
            "id",
            "name",
            "categories"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            },
            "categories": {
              "type": "string"
            }
          },
          "example": {
            "id": 1,
            "name": "Item1",
            "categories": "Super,Duper"
          }
        }
      },
      "itemsAddResponse": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "itemAddRequest": {
        "required": [
          "name",
          "categories"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          }
        },
        "example": {
          "name": "Item1",
          "categories": "Super,Duper"
        }
      },
      "itemAddResponse": {
        "required": [
          "name",
          "categories"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          }
        }
      },
      "itemUpdateRequest": {
        "required": [
          "name",
          "categories"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "string"
          }
        }
      },
      "itemUpdateResponse": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "itemDeleteResponse": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "schemes": [
      "https"
    ],
    "tags": [],
    "securityDefinitions": {
      "API Secret": {
        "type": "apiKey",
        "description": "",
        "in": "query",
        "name": "client_secret"
      },
      "API Key": {
        "type": "apiKey",
        "name": "client_id",
        "in": "query",
        "description": ""
      }
    },
    "security": [
      {
        "API Key": [],
        "API Secret": []
      }
    ],
    "x-ibm-configuration": {
      "enforced": true,
      "phase": "realized",
      "testable": true,
      "cors": {
        "enabled": true
      },
      "type": "rest",
      "gateway": "datapower-gateway",
      "properties": {
        "target-url": {
          "value": "http://example.com/operation-name",
          "description": "The URL of the target service",
          "encoded": false
        }
      },
      "servers": [
        {
          "url": "https://blah.example.com/blah",
          "description": "Default Staging server."
        }
      ]
    },
    "host": "blah.example.com"
  };

  beforeEach(function() {
    exampleGenerator = window.exampleGenerator;
  });

  // ***************************************************
  // Tests for the code snippet generator
  // ***************************************************

  it('generateCodeSnippets works for NodeJS and BankA', function(){

    var api = bank;
    var clientId = "CLIENT";
    var clientSecret = "SECRET";
    var languages = ['node'];
    var endpoint = null;
    var references = null;
    var operation = bank.paths['/branches'].get;
    var config = {};
    var path = '/banka/v1/branches';
    var method = 'GET';
    var does = exampleGenerator.generateCodeSnippets(api, path, method, operation, config, clientId, clientSecret, languages, references, endpoint);

    if(debug){
      console.log(does);
    }

    expect(does).not.toBeNull();
    expect(does.nodeContent).not.toBeNull();
    var pos = does.nodeContent.search(/\/\/ Install request by running "npm install --save request/);
    expect(pos).not.toEqual(-1);
    pos = does.nodeContent.search(/var request = require\("request"\);/);
    expect(pos).not.toEqual(-1);
    pos = does.nodeContent.search(/var options = { method: 'GET',/);
    expect(pos).not.toEqual(-1);
    pos = does.nodeContent.search(/url: 'https:\/\/apim-services.mybluemix.net\/banka\/v1\/banka\/v1\/branches'/);
    expect(pos).not.toEqual(-1);
    pos = does.nodeContent.search(/headers: { accept: 'application\/json' }/);
    expect(pos).not.toEqual(-1);
    //pos = does.nodeContent.search(/request\(options, function \(error, response, body\) {/);
    expect(pos).not.toEqual(-1);
  });

  // ***************************************************
  // Tests for the example parameter generator
  // ***************************************************

  it('simple object in request body', function(){
    var api = bank;
    var references = null;
    var path = '/customers/{id}/accounts/{fk}';
    var method = 'put';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(typeof(body)).toEqual("object");
    expect(body).toEqual(JSON.parse(JSON.stringify(body)));
    expect(body.id).not.toBeNull();
    expect(typeof(body.id)).toEqual("string");
    expect(body.name).not.toBeNull();
    expect(typeof(body.name)).toEqual("string");
    expect(body.type).not.toBeNull();
    expect(typeof(body.type)).toEqual("string");
    expect(body.balance).not.toBeNull();
    expect(typeof(body.balance)).toEqual("number");
    expect(body.status).not.toBeNull();
    expect(typeof(body.status)).toEqual("string");
    expect(body.credit_limit).not.toBeNull();
    expect(typeof(body.credit_limit)).toEqual("number");
    expect(body.customer_id).not.toBeNull();
    expect(typeof(body.customer_id)).toEqual("string");
  });

  it('object with nested object reference', function(){
    var api = bank;
    var references = null;
    var path = '/customers';
    var method = 'post';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(typeof(body)).toEqual("object");
    expect(body).toEqual(JSON.parse(JSON.stringify(body)));
    expect(Object.keys(body).length).toEqual(6);
    expect(body.id).not.toBeNull();
    expect(typeof(body.id)).toEqual("string");
    expect(body.first_name).not.toBeNull();
    expect(typeof(body.first_name)).toEqual("string");
    expect(body.last_name).not.toBeNull();
    expect(typeof(body.last_name)).toEqual("string");
    expect(body.email).not.toBeNull();
    expect(typeof(body.email)).toEqual("string");
    expect(body.address).not.toBeNull();
    expect(typeof(body.address)).toEqual("object");
    expect(Object.keys(body.address).length).toEqual(5);
    expect(Object.keys(body.address)).toEqual(["street1","street2","city","state","zip_code"]);
    expect(body.dob).not.toBeNull();
    expect(typeof(body.dob)).toEqual("string");
  });

  it('creates body parameter with array where items is inlined object', function(){
    var api = bank;
    var references = null;
    var path = '/branches/multiple_inline';
    var method = 'post';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(Object.keys(body).length).toEqual(2);
    expect(body.requestId).not.toBeNull();
    expect(typeof(body.requestId)).toEqual("string");
    expect(body.branches).not.toBeNull();
    expect(typeof(body.branches)).toEqual("object");
    expect(Array.isArray(body.branches)).toEqual(true);
    expect(body.branches.length).toEqual(1);
    expect(Object.keys(body.branches[0]).length).toEqual(4);
    expect(body.branches[0].id).not.toBeNull();
    expect(typeof(body.branches[0].id)).toEqual("string");
    expect(body.branches[0].type).not.toBeNull();
    expect(typeof(body.branches[0].type)).toEqual("string");
    expect(body.branches[0].phone).not.toBeNull();
    expect(typeof(body.branches[0].phone)).toEqual("string");
    expect(body.branches[0].address).not.toBeNull();
    expect(typeof(body.branches[0].address)).toEqual("object");
    expect(Object.keys(body.branches[0].address).length).toEqual(5);
    expect(Object.keys(body.branches[0].address)).toEqual(["street1","street2","city","state","zip_code"]);
  });

  it('creates body parameter with array where items is #ref', function(){
    var api = bank;
    var references = null;
    var path = '/branches/multiple_withref';
    var method = 'post';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });
    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(Object.keys(body).length).toEqual(2);
    expect(body.requestId).not.toBeNull();
    expect(typeof(body.requestId)).toEqual("string");
    expect(body.branches).not.toBeNull();
    expect(typeof(body.branches)).toEqual("object");
    expect(Array.isArray(body.branches)).toEqual(true);
    expect(body.branches.length).toEqual(1);
    console.log(Object.keys(body.branches[0]));
    expect(Object.keys(body.branches[0]).length).toEqual(4);
    expect(body.branches[0].id).not.toBeNull();
    expect(typeof(body.branches[0].id)).toEqual("string");
    expect(body.branches[0].type).not.toBeNull();
    expect(typeof(body.branches[0].type)).toEqual("string");
    expect(body.branches[0].phone).not.toBeNull();
    expect(typeof(body.branches[0].phone)).toEqual("string");
    expect(body.branches[0].address).not.toBeNull();
    expect(typeof(body.branches[0].address)).toEqual("object");
    expect(Object.keys(body.branches[0].address).length).toEqual(5);
    expect(Object.keys(body.branches[0].address)).toEqual(["street1","street2","city","state","zip_code"]);
  });

  it('creates body param avoiding simple recursive definition', function(){
    var api = bank;
    var references = null;
    var path = '/branches/multiple_recursive';
    var method = 'post';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(Object.keys(body).length).toEqual(2);
    expect(Object.keys(body)).toEqual(["genericProperty", "branches"]);
    expect(body.genericProperty).not.toBeNull();
    expect(typeof(body.genericProperty)).toEqual("string");
    expect(body.branches).not.toBeNull();
    expect(typeof(body.branches)).toEqual("object");
    expect(Array.isArray(body.branches)).toEqual(false);
    expect(Object.keys(body.branches).length).toEqual(1);
    expect(Object.keys(body.branches)).toEqual(["circular_reference"]);
    expect(body.branches.circular_reference).not.toBeNull();
    expect(typeof(body.branches.circular_reference)).toEqual("string");
    expect(body.branches.circular_reference).toEqual("#/definitions/branchrequest_recursive");
  });

  it('creates array of array of object definition correctly', function(){
    var api = bank;
    var references = null;
    var path = '/branches/array_of_arrays';
    var method = 'post';
    var operation = bank.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var body = JSON.parse(exampleGenerator.generateExampleParameter(api, path, method, bodyParameters[0], null, true, references));

    if(debug){
      console.log(JSON.stringify(body));
    }

    expect(body).not.toBeNull();
    expect(Object.keys(body).length).toEqual(1);
    expect(Array.isArray(body)).toEqual(true);
    expect(body[0]).not.toBeNull();
    expect(Array.isArray(body[0])).toEqual(true);
    expect(Object.keys(body[0]).length).toEqual(1);
    expect(body[0][0]).not.toBeNull();
    expect(typeof(body[0][0])).toEqual("object");
    expect(Object.keys(body[0][0]).length).toEqual(3);
    expect(body[0][0].id).not.toBeNull();
    expect(typeof(body[0][0].id)).toEqual("string");
    expect(body[0][0].type).not.toBeNull();
    expect(typeof(body[0][0].type)).toEqual("string");
    expect(body[0][0].phone).not.toBeNull();
    expect(typeof(body[0][0].phone)).toEqual("string");
  });

  it('generates sensible non-recursive example for a complex Twitter definition', function(){
    // This example has a top level Tweets object which references itself directly from the top level
    // i.e. Tweets / Tweets. If we blindly dereference each of these, we end up with over 8MB of data
    // which blows up browsers.

    var api = twitter;
    var references = null;
    var path = '/statuses/mentions_timeline';
    var method = 'get';
    var operation = api.paths[path][method];
    var bodyParameters = operation.parameters.filter(function (parameter) {
      return (parameter.in == "body");
    });

    var response = JSON.parse(exampleGenerator.generateResponse(api, path, method, "200", "application/json", references));

    if(debug){
      console.log(JSON.stringify(response));
    }

    expect(response).not.toBeNull();
    expect(Array.isArray(response)).toEqual(true);
    // Each of these are a #/definition/Tweets object which is the same as the parent and therefore circular
    expect(response[0].current_user_retweet).toEqual({circular_reference: '#/definitions/Tweets'});
    expect(response[0].quoted_status).toEqual({circular_reference: '#/definitions/Tweets'});
    expect(response[0].retweeted_status).toEqual({circular_reference: '#/definitions/Tweets'});
    expect(response[0].user.status).toEqual({circular_reference: '#/definitions/Tweets'});
    // These are all reference objects but none of them are circular references
    expect(response[0].contributors).not.toEqual({circular_reference: '#/definitions/Contributors'});
    expect(response[0].coordinates).not.toEqual({circular_reference: '#/definitions/Coordinates'});
    expect(response[0].entities).not.toEqual({circular_reference: '#/definitions/Entities'});
    expect(response[0].place).not.toEqual({circular_reference: '#/definitions/Places'});
    expect(response[0].user).not.toEqual({circular_reference: '#/definitions/Users'});
    expect(response[0].user.entities).not.toEqual({circular_reference: '#/definitions/Entities'});
  });

  it('generates sensible non-recursive example for a interlinked recursive definition', function(){
    // This example has circular references such as :
    //  - Ships / Ship / Person / Ship
    //  - Ships / Ship / Container / Person / Ship
    //  - Ships / Ship / Container / Items / Person / Ship
    // whereever the nested 'Ship' definition appears, to should be marked as a circular reference rather than resolved.
    var api = recursive_definitions;
    var references = null;
    var path = '/ships';
    var method = 'get';
    var operation = api.paths[path][method];

    var response = JSON.parse(exampleGenerator.generateResponse(api, path, method, "200", "application/json", references));

    if(debug){
      console.log(JSON.stringify(response));
    }

    expect(response).not.toBeNull();
    expect(Array.isArray(response)).toEqual(true);
    // Each of these are a #/definition/Ship object which is the same as the parent and therefore circular
    expect(response[0].captain.crew_on_ship).toEqual({circular_reference: '#/definitions/Ship'});
    expect(response[0].freight[0].owner.crew_on_ship).toEqual({circular_reference: '#/definitions/Ship'});
    expect(response[0].freight[0].contents[0].owner.crew_on_ship).toEqual({circular_reference: '#/definitions/Ship'});
    expect(response[0].freight[0].contents[0].assigned_to_ship).toEqual({circular_reference: '#/definitions/Ship'});
  });

  it('generates better examples for specific named parameters', function(){
    // i.e. a parameter named 'zip' should look like a zip code and 'time' should give a Date/Time stamp
    var api = bank;
    var references = null;
    var path = '/branches';
    var method = 'get';
    var operation = api.paths[path][method];
    var parameters = operation.parameters;

    var zipParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[1], 'application/json', true, references);
    var timeParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[2], 'application/json', true, references);
    var hourParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[3], 'application/json', true, references);
    var sunsetParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[4], 'application/json', true, references);
    var humidityParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[5], 'application/json', true, references);
    var pressureParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[6], 'application/json', true, references);
    var temperatureParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[7], 'application/json', true, references);
    var countryParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[8], 'application/json', true, references);
    var countryCodeDescriptionParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[9], 'application/json', true, references);
    var countryCodeParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[10], 'application/json', true, references);

    if(debug){
      console.log("zip parameter: " + zipParameter);
      console.log("time parameter: " + timeParameter);
      console.log("hour parameter: " + hourParameter);
      console.log("sunset parameter: " + sunsetParameter);
      console.log("humidity parameter: " + humidityParameter);
      console.log("pressure parameter: " + pressureParameter);
      console.log("temperature parameter: " + temperatureParameter);
      console.log("country parameter: " + countryParameter);
      console.log("country code (description) parameter: " + countryCodeDescriptionParameter);
      console.log("countryCode parameter: " + countryCodeParameter);
    }

    expect(zipParameter).not.toBeNull();
    expect(zipParameter.match(/\d\d\d\d\d/).length).toBe(1);
    expect(timeParameter).not.toBeNull();
    expect(timeParameter.match(/\d\d:\d\d/).length).toBe(1);
    expect(hourParameter).not.toBeNull();
    expect(hourParameter.match(/\d\d/).length).toBe(1);
    expect(sunsetParameter).not.toBeNull();
    expect(sunsetParameter.match(/\d\d:\d\d/).length).toBe(1);
    expect(humidityParameter).not.toBeNull();
    expect(humidityParameter.match(/[\d]{1,3} %/).length).toBe(1);
    expect(pressureParameter).not.toBeNull();
    expect(pressureParameter.match(/[\d]{3,4} hPa/).length).toBe(1);
    expect(temperatureParameter).not.toBeNull();
    expect(temperatureParameter.match(/[\d]{1,3} C/).length).toBe(1);
    expect(countryParameter).not.toBeNull();
    expect(countryParameter.match(/\w{4,}/).length).toBe(1);
    expect(countryCodeDescriptionParameter).not.toBeNull();
    expect(countryCodeDescriptionParameter.match(/\w{2}/).length).toBe(1);
    expect(countryCodeParameter).not.toBeNull();
    expect(countryCodeParameter.match(/\w{2}/).length).toBe(1);
  });

  it('correct examples for arrays in OAI2 objects', function() {
    // i.e. a parameter named 'zip' should look like a zip code and 'time' should give a Date/Time stamp
    var api = arrayDefinitions;
    var references = null;

    // array of integers but with an example
    var path = '/arrayIntegers';
    var method = 'put';
    var operation = api.paths[path][method];
    var parameters = operation.parameters;

    var arrayWithExample = exampleGenerator.generateExampleParameter(api, path, method, parameters[0], 'application/json', true, references);

    expect(arrayWithExample).not.toBeNull();
    expect(arrayWithExample).toBe('[10,20,30]');

    // array of objects
    var path = '/arrayobject';
    var method = 'get';
    var operation = api.paths[path][method];

    var arrayResponse = exampleGenerator.generateResponse(api, path, method, "200", "application/json", references)

    expect(arrayResponse).not.toBeNull();
    expect(JSON.stringify(JSON.parse(arrayResponse))).toBe('[[{"property":"some value"}]]');

  });

  it('generates boolean parameter value correctly', function() {

    var api = twitter;
    var path = '/statuses/mentions_timeline';
    var method = 'get';
    var operation = api.paths[path][method];
    var parameters = operation.parameters;
    var references = null;

    var booleanParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[6], 'application/json', true, references);

    if(debug) {
      console.log(JSON.stringify(booleanParameter));
    }

    expect(booleanParameter).not.toBeNull();
    expect(booleanParameter.match(/true|false/).length).toBe(1);

  });

  it('generates integer default of 0 correctly', function() {

    var api = twitter;
    var path = '/statuses/mentions_timeline';
    var method = 'get';
    var operation = api.paths[path][method];
    var parameters = operation.parameters;
    var references = null;

    var intParameter = exampleGenerator.generateExampleParameter(api, path, method, parameters[7], 'application/json', true, references);

    if(debug) {
      console.log(JSON.stringify(intParameter));
    }

    expect(intParameter).not.toBeNull();
    expect(JSON.stringify(JSON.parse(intParameter))).toBe('0');

  });

  it('handles produces and consumes properly', function(){

    var api = account;
    var references = null;
    var path = '/balance';
    var method = 'get';

    var response = JSON.parse(exampleGenerator.generateResponse(api, path, method, "200", "application/json", references));

    if(debug){
      console.log(JSON.stringify(response));
    }

    expect(response).not.toBeNull();
    expect(response['Balance']).not.toBeNull();
  });

  it('invalid swagger triggers uncaught errors', function(){

    // This is a change in behaviour added so that our generator-worker can catch the errors and use postMessage
    // to send those errors to apiconnect-explorer. We need this so that apiconnect-explorer can be given a proper
    // error message when something goes wrong. The old behaviour was to return "" to explorer which doesn't give
    // explorer any way to know that there was an error.

    var api = balance;
    var path = '/item/{id}';
    var method = 'get';
    var operation = api.paths[path][method];

    var config = {};
    config.parametersArray = operation.parameters;

    try {
      console.log(exampleGenerator.generateCodeSnippets(api, path, method, operation, config, '1234', '5678', ['curl', 'node'], null, null));

      // Make the test fail if we get here without an error being thrown.
      expect(false).toBe(true);
    } catch(e) {
      // this is what we wanted to happen
      console.log("Expected error was triggered");
    }

  });

});
