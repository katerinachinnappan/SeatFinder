/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 *
 * (C) Copyright IBM Corporation 2017, 2018
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

// needed for httpsnippet-browser
if (!self.window) {
    self.window = self;
}

// some poor man's polyfilling for PhantomJS
if (typeof FormData === "undefined") {
    self.FormData = {};
}
if (typeof console === "undefined") {
    self.console = {
        error: function() {},
        log: function() {},
        warn: function() {}
    }
}

self._ = require('../../node_modules/lodash');
var Chance = require('../../node_modules/chance');
self.chance = new Chance();
var httpsnippet = require('../vendor/httpsnippet-browser');
self.vkbeautify = require('../../node_modules/vkbeautify');
self.x2js = require('../../node_modules/x2js');
var exampleGenerator = require('./example-generator');
var hljs = require('../../node_modules/highlight.js');
var JsonRefs = require('../../node_modules/json-refs');
var jsonPointer = require("jsonpointer");
var referenceResolver = require('./reference-resolver.js');

onmessage = function(event) {

  if (!event.data || !event.data.type) {
    // error because incorrect message supplied
    console.trace();
    throw new Error("Incorrect message, should have data and data.type properties.");
  }
  var type = event.data.type;

  if (type === 'response' || type === 'eventResponse') {
    try {
      // we're generating an example response
      var exampleObj;
      if (type === 'eventResponse') {
        exampleObj = exampleGenerator.generateEventResponse(event.data.api, event.data.response, event.data.contentType);
      } else {
        exampleObj = exampleGenerator.generateResponse(event.data.api, event.data.path, event.data.verb, event.data.response, event.data.contentType);
      }
      var highlightLanguage = 'json';
      if (event.data.contentType && event.data.contentType.indexOf('yaml') >= 0) highlightLanguage = 'yaml';
      if (event.data.config && event.data.config.accepts && event.data.config.accepts.length === 1 && event.data.config.accepts[0].indexOf('xml') >= 0) {
        // this operation takes only xml, therefore the example object will be xml
        highlightLanguage = 'xml';
      }
      if (exampleObj) exampleObj = hljs.highlight(highlightLanguage, exampleObj).value;
      postMessage({example: exampleObj || ""});
    } catch(e) {
      console.error(e);
      postMessage({"error": e.message});
    }
  } else if (type === 'operation' || type === 'event') {
    // we're generating operation content
    setTimeout(function() {
        try {
            var snippets;
            if (type === 'event') {
                snippets = exampleGenerator.generateEventCodeSnippets(event.data.api, event.data.topicName, event.data.kafka, event.data.languages);
            } else {
                snippets = exampleGenerator.generateCodeSnippets(event.data.api, event.data.path, event.data.verb, event.data.operation, event.data.config, event.data.clientId, event.data.clientSecret, event.data.languages, null, event.data.endpoint, event.data.values);
            }
            Object.keys(snippets).forEach(function(language) {
                var thisLanguage = language.replace('Content', '');
                if (thisLanguage === 'curl') thisLanguage = 'bash';
                if (thisLanguage === 'kafkacat') thisLanguage = 'bash';
                if (thisLanguage === 'node') thisLanguage = 'js';
                snippets[language] = hljs.highlight(thisLanguage, snippets[language]).value;
            });
            var exampleObj;
            if (type === 'event') {
                exampleObj = exampleGenerator.generateEventExampleResponse(event.data.api, event.data.streamName);
            } else {
                exampleObj = exampleGenerator.generateExampleResponse(event.data.api, event.data.path, event.data.verb);
            }
            var highlightLanguage = 'json';
            if (event.data.config.accepts && event.data.config.accepts.length === 1 && event.data.config.accepts[0].indexOf('xml') >= 0) {
                // this operation takes only xml, therefore the example object will be xml
                highlightLanguage = 'xml';
            }
            if (exampleObj) exampleObj = hljs.highlight(highlightLanguage, exampleObj).value;
            var result;
            if (type === 'event') {
                result = {
                    name: event.data.streamName,
                    type: event.data.type,
                    snippets: snippets,
                    example: exampleObj || ""
                };
            } else {
                result = {
                    path: event.data.path,
                    type: event.data.type,
                    method: event.data.verb,
                    snippets: snippets,
                    example: exampleObj || ""
                };
            }
            postMessage(result);
        } catch (e) {
            console.error(e);
            postMessage({"error": e.message});
        }
    }, 10);
  } else if (type === 'definitions') {
    var highlightedDefinitions = {};
    Object.keys(event.data.definitions).forEach(function(definitionName) {
        highlightedDefinitions[definitionName] = hljs.highlight('json', JSON.stringify(event.data.definitions[definitionName], null, 2)).value;
    });
    postMessage({
        definitions: highlightedDefinitions
    });
  } else if (type === 'parameter') {
    try {
      var exampleObj = exampleGenerator.generateExampleParameter(event.data.api, event.data.pathName, event.data.verb, event.data.parameter, event.data.contentTypeHeader, event.data.skipBeautify, event.data.apiReferences);
      postMessage(exampleObj);
    } catch (e) {
      console.error(e);
      postMessage({"error": e.message});
    }
  } else if (type === 'highlight') {
      if (event.data.language) {
          postMessage({content: hljs.highlight(event.data.language, event.data.content)});
      } else {
        postMessage({content: hljs.highlightAuto(event.data.content)});
      }
  } else if (type === 'resolveReferences') {

    referenceResolver.resolveReferences(event.data.schema).then(function(result){
        postMessage({
            schema: result
        });
    });

  } else {
    // error because message is Unknown
    throw new Error("Unknown type of: " + type);
  }
};
