#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-policies


var ApicCliUtil = require('apiconnect-cli-util');
var Promise = require('bluebird');
var apimPolicies = require('apiconnect-apim-client').policies;
var f = require('util').format;
var fmt = require('./formatter');
var util = require('./util/util');

var checkForOrgOrAllOrgAndCatalogOrCatalog = ApicCliUtil.Util.checkForOrgOrAllOrgAndCatalogOrCatalog;
var checkForOrgOrCatalog = ApicCliUtil.Util.checkForOrgOrCatalog;

function policiesClone(options) {
  checkForOrgOrCatalog(options);

  return apimPolicies.list(options).then(function(results) {
    return Promise.map(results, function(policy) {
      return policiesPull(f('%s:%s', policy.name, policy.version), options);
    });
  });
};

function policiesDelete(nameVersion, options) {
  checkForOrgOrCatalog(options);

  var policyName = util.getName(nameVersion);
  var policyVersion = util.getVersion(nameVersion);

  return apimPolicies.remove(policyName, policyVersion, options).then(function(result) {
    fmt.deleteFormatter(policyName, policyVersion, options);
  });
};

function policiesGet(nameVersion, options) {
  checkForOrgOrCatalog(options);

  var policyName = util.getName(nameVersion);
  var policyVersion = util.getVersion(nameVersion);

  return apimPolicies.get(policyName, policyVersion, options).then(function(result) {
    fmt.getFormatter(options.catalog, options.organization, result);
  });
};

function policiesList(options) {
  checkForOrgOrAllOrgAndCatalogOrCatalog(options);

  return apimPolicies.listAll(options)
    .then(fmt.listFormatter);
};

function policiesPull(nameVersion, options) {
  checkForOrgOrCatalog(options);

  var policyName = util.getName(nameVersion);
  var policyVersion = util.getVersion(nameVersion);

  return apimPolicies.pull(policyName, policyVersion, options).then(function(result) {
    fmt.pullFormatter(options.catalog, options.organization, result);
  });
};

function policiesPublish(options) {
  checkForOrgOrCatalog(options);

  return apimPolicies.publish(options.directory, options).then(function(result) {
    return fmt.publishFormatter(options.catalog, options.organization, result);
  });
};

module.exports = {
  policiesClone: policiesClone,
  policiesDelete: policiesDelete,
  policiesGet: policiesGet,
  policiesList: policiesList,
  policiesPublish: policiesPublish,
  policiesPull: policiesPull,
};

