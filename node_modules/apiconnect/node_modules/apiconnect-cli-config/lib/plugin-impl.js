/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-config

var g = require('strong-globalize')();

function getTopics() {
  return [ {
    name: 'config',
    description: 'manager configuration variables',
    commands: [
      configList,
      configGet,
      configSet,
      configDelete,
      configClear,
    ],
  } ];
};
exports.getTopics = getTopics;

var configList = {
  command: 'list',
  aliases: [ 'config' ],
  helpInfo: function() {
    return g.f('apic_config_list_help.txt');
  },
  action: function list(options) {
    return require('./actions').list(options);
  },
  options: [ '-g, --global', '-l --local' ],
};

var configGet = {
  command: 'get <name>',
  aliases: [],
  helpInfo: function() {
    return g.f('apic_config_get_help.txt');
  },
  action: function list(name, options) {
    return require('./actions').getConfig(name, options);
  },
  options: [ '-g, --global', '-l --local' ],
};

var configSet = {
  command: 'set <name=value> [name=value...]',
  aliases: [],
  helpInfo: function() {
    return g.f('apic_config_set_help.txt');
  },
  action: function(kv, otherKVs, options) {
    return require('./actions').setConfig(kv, otherKVs, options);
  },
  analytics: function(kv, otherKVs, options) {
    return require('./actions').getAnalytics(kv, otherKVs, options);
  },
  options: [ '-g, --global', '-l --local' ],
};

var configDelete = {
  command: 'delete <name>',
  helpInfo: function() {
    return g.f('apic_config_delete_help.txt');
  },
  action: function(name, options) {
    return require('./actions').deleteConfig(name, options);
  },
  options: [ '-g, --global', '-l --local' ],
};


var configClear = {
  command: 'clear',
  helpInfo: function() {
    return g.f('apic_config_clear_help.txt');
  },
  action: function(options) {
    return require('./actions').clearConfig(options);
  },
  options: [ '-g, --global', '-l --local' ],
};

