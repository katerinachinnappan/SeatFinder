/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-config

'use strict';

var _ = require('lodash');
var cliFormatMd = require('collab-help');
var fs = require('fs');
var md5 = require('md5');
var path = require('path');
var tap = require('tap');
var util = require('util');

var cliSrc = cliFormatMd();
var helpHash = [];
var tagCheckPassed = true;

if (cliSrc) {
  tap.test('build help hash from the source', function(t) {
    var srcLines = cliSrc.split('\n');
    var tag = '';
    var recordingToHelpContents = false;
    var helpContents = [];
    _.each(srcLines, function(line) {
      var trimedLine = _.trim(line);
      var content = trimedLine.replace(/^\#\# (.+)$/, '$1');
      if (content !== trimedLine) { // ## tag found
        tag = content;
        // t.comment('tag detected: %s', tag);
        return;
      }
      if (trimedLine === '</pre>') {
        tagCheckPassed = tagCheckPassed && !!tag;
        if (!tag) {
          t.comment('tag should not be empty at </pre>.');
        }
        if (!recordingToHelpContents) {
          t.comment('should be recording to helpContents at </pre>.');
        }
        recordingToHelpContents = true;
        var joinedContents = helpContents.join('\n');
        var hh = {
          tag: tag,
          hash1: md5(joinedContents),
          hash2: md5(joinedContents + '\n'),
        };
        helpHash.push(hh);
        t.comment('tag: %s, hash: %s %s', hh.tag, hh.hash1, hh.hash2);
        tag = null;
        recordingToHelpContents = false;
      }
      if (recordingToHelpContents) {
        helpContents.push(line);
      }
      if (trimedLine === '<pre>') {
        tagCheckPassed = tagCheckPassed && !!tag;
        if (!tag) {
          t.comment('tag should not be empty at </pre>.');
        }
        if (recordingToHelpContents) {
          t.comment('should not be recording to helpContents at <pre>.');
        }
        helpContents = [];
        recordingToHelpContents = true;
      }
    });
    t.ok(tagCheckPassed, '## tag is associated with all <pre> contents.');
    t.end();
  });
}

var myPlugin = null;

tap.test('identify main module from package.json', function(t) {
  var main = null;
  t.doesNotThrow(function() {
    try {
      main = path.resolve(require('../package.json').main);
    } catch (e) {
      t.bailout('package.json read failure');
    }
  }, 'package.json acquired.');
  t.comment(main);
  t.doesNotThrow(function() {
    try {
      myPlugin = require(main);
    } catch (e) {
      t.bailout('main cannot be loaded');
    }
  }, 'main module is loaded.');
  t.end();
});

var topics = null;

tap.test('get topics object', function(t) {
  t.doesNotThrow(function() {
    try {
      topics = myPlugin.getTopics();
    } catch (e) {
      t.bailout('topics could not be acquired.');
    }
  }, 'getTopics is implemented.');
  t.end();
});

var DEFAULT_TYPE = -1;
var helpInfo = null;
var helpFile = null;
var fullName = null;
var helpContents = null;

tap.test('helpInfo matches with help file contents', function(t) {
  _.each(topics, function(topic) {
    helpInfo = topic.helpInfo;
    if (helpInfo) {
      helpFile = 'apic_' + topic.name + '_help.txt';
      t.comment('topic help file: ' + helpFile);
      helpContents = null;
      try {
        helpContents = fs.readFileSync(
          path.resolve(__dirname, '../intl/en', helpFile), 'utf-8');
      } catch (e) {
        t.fail('help file read failure: ' + helpFile);
      }
      if (helpContents) {
        if (typeof helpInfo === 'function') {
          helpInfo = helpInfo();
        }
        fullName = topic.name;
        t.ok(helpInfo, util.format(
          'topic helpInfo is provided for: %s', fullName));
      }
    }
    _.each(topic.commands, function(command) {
      var verb = command.command.split(' ')[0];
      var type = command.type || DEFAULT_TYPE;
      helpFile = 'apic_' + topic.name + '_' + verb +
        (type === DEFAULT_TYPE ? '' : ('_' + type)) + '_help.txt';
      var cmdOrType = (type === DEFAULT_TYPE ? 'command' : 'type');
      t.comment(cmdOrType + ' help file: ' + helpFile);
      helpContents = null;
      try {
        helpContents = fs.readFileSync(
          path.resolve(__dirname, '../intl/en', helpFile), 'utf-8');
      } catch (e) {
        t.fail('help file read failure: ' + helpFile);
      }
      if (helpContents) {
        helpInfo = command.helpInfo;
        if (helpInfo && (typeof helpInfo === 'function')) {
          helpInfo = helpInfo();
        }
        fullName = topic.name + '_' + verb +
          (cmdOrType === 'type' ? ('_' + type) : '');
        t.ok(helpInfo, util.format(
          '%s helpInfo is provided for: %s', cmdOrType, fullName));
      }
    });
  });

  t.end();
});

