/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-securegateways

var g = require('strong-globalize')();

module.exports = {
  name: 'securegateways',
  version: require('../package.json').version,
  path: __filename,
  isBuiltin: true,
  topics: topics,
};

function topics() {
  return [ {
    name: 'securegateways',
    commands: [
      {
        command: 'list',
        loginRequired: 'org',
        aliases: [ 'securegateways' ],
        helpInfo: g.f('apic_securegateways_list_help.txt'),
        action: function(opts) {
          return require('./plugins-impl').listGateways(opts);
        },
        options: [
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.org.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.org.host', required: true },
        ],
      },
      {
        command: 'create',
        loginRequired: 'org',
        helpInfo: g.f('apic_securegateways_create_help.txt'),
        action: function(opts) {
          return require('./plugins-impl').createGateway(opts);
        },
        options: [
          { name: 'name' },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.org.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.org.host', required: true },
        ],
      },
      {
        command: 'get <gatewayId>',
        loginRequired: 'org',
        helpInfo: g.f('apic_securegateways_get_help.txt'),
        action: function(gatewayId, opts) {
          return require('./plugins-impl').getGateway(gatewayId, opts);
        },
        options: [
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.org.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.org.host', required: true },
        ],
      },
      {
        command: 'delete <gatewayId>',
        loginRequired: 'org',
        helpInfo: g.f('apic_securegateways_delete_help.txt'),
        action: function(gatewayId, opts) {
          return require('./plugins-impl').deleteGateway(gatewayId, opts);
        },
        options: [
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.org.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.org.host', required: true },
        ],
      },
      {
        command: 'set <gatewayId>',
        loginRequired: 'org',
        helpInfo: g.f('apic_securegateways_set_help.txt'),
        action: function(gatewayId, opts) {
          return require('./plugins-impl').setGateway(gatewayId, opts);
        },
        options: [
          { name: 'name' },
          { name: 'status', type: 'enum', values: [ 'enabled', 'disabled' ] },
          { name: 'organization', rune: 'o', type: 'name', default: '$APIC_CONFIG$.org.data.orgs', required: true },
          { name: 'server', rune: 's', type: 'host', default: '$APIC_CONFIG$.org.host', required: true },
        ],
      },
    ],
  } ];
};

