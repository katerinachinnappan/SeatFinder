/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-util

/*eslint brace-style: 0, max-len: 0*/

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var apimClient = require('apiconnect-apim-client');
var g = require('strong-globalize')();

function RemoteApps(options) {
  this.__options = options;
}

RemoteApps.prototype.init = function() {
  return Promise.resolve();
};

RemoteApps.resolve = function(options) {
  options.serviceFromConfig = !options.service;
  options.name = options.organization;
  var providerOrgPromise = apimClient.orgs.get(options);
  return providerOrgPromise.then(function(org) {
    if (!options.app) {
      return Promise.resolve();
    }
    return apimClient.apps.get(_.defaults({
      organization: org.name,
      getEncrypted: true,
    }, options));
  }).then(function(providerApp) {
    var providerOrg = providerOrgPromise.value();
    options.providerApp = providerApp;
    options.providerOrg = providerOrg;
    if (options.providerApp.bluemix) {
      // Defered require due to cycles
      var BluemixSupport = require('../bluemix').BluemixSupport;
      return new BluemixSupport(options);
    } else if (options.providerApp.liberty) {
      // Defered require due to cycles
      var LibertySupport = require('../collectives');
      return new LibertySupport(options);
    } else {
      throw new Error(g.f('Unsupported application runtime'));
    }
  }).then(function(remote) {
    return remote.init().return(remote);
  });
};

module.exports = RemoteApps;

