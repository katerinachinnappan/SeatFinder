/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/


var _ = require('lodash');
var Promise = require('bluebird');
var apicConfig = require('apiconnect-config');
var apimClient = require('apiconnect-apim-client');

var config = apicConfig.loadConfig();

function getMetadata(serverConfig, opts) {

  var options = _.assign({
    forceRefresh: false,
  }, opts);

  var configKey = serverConfig.host + '.meta';

  var serverMeta = config.getOne(configKey);

  if (serverMeta && !options.forceRefresh) {
    return Promise.resolve(new ServerMeta(serverMeta));
  }
  return apimClient.metaData.get({ server: serverConfig.host })
    .then(function(serverMeta) {
      var confEntry = { };
      confEntry[ configKey ] = serverMeta;
      config.set(confEntry);

      return new ServerMeta(serverMeta);
    });
}

function ServerMeta(meta) {
  this.meta = meta;
}

ServerMeta.prototype.supports = function(key, expectedValue) {

  var capabilities = this.meta.serverCapabilities;

  if (!capabilities[key]) { return false; }

  if (Array.isArray(capabilities[key])) {
    return capabilities[key].indexOf(expectedValue) > -1;
  }

  return capabilities[key] === expectedValue;

};

ServerMeta.prototype.isBluemix = function() {
  return this.meta.formFactor.indexOf('BLUEMIX') > -1;
};

ServerMeta.prototype.minimumVersion = function() {
  if (this.meta.toolkit && this.meta.toolkit.version_minimum) {
    return this.meta.toolkit.version_minimum;
  } else {
    return null;
  }
};

ServerMeta.prototype.recommendedVersion = function() {
  if (this.meta.toolkit && this.meta.toolkit.version_recommended) {
    return this.meta.toolkit.version_recommended;
  } else {
    return null;
  }
};

module.exports = {
  getMetadata: getMetadata,
};

