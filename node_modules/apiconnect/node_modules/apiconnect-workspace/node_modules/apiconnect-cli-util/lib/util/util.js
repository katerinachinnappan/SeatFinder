/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-util

/*eslint brace-style: 0, max-len: 0*/

/**
 * Return the user's home directory
 *
 * @returns {String}
 */

var Chance = require('chance');
var ServerError = require('./server-error');
var debug = require('debug')('apiconnect-cli-util:util');
var fs = require('fs');
var g = require('strong-globalize')();
var os = require('os');
var path = require('path');
var version = require('../../package.json').version;

var PREFIX = 'api-';

/**
 * Return the user's home directory
 * @type {userHome}
 */
module.exports.userHome = userHome;
function userHome() {
  return process.env.HOME || process.env.USERPROFILE;
}
//Return the path to the apic configs directory
module.exports.apicHomePath = apicHomePath;
function apicHomePath() {
  return userHome() + '/.apic';
}

/**
 * Return the User Agent used that is send when a http request is being made.
 * @type {userAgent}
 */
module.exports.userAgent = userAgent;
function userAgent() {
  return 'APIC Toolkit/' + version + ' (' + os.type() + '; ' +
    os.platform() + '; ' + os.arch() + ')';
}

module.exports.generateSlugFromText = generateSlugFromText;
function generateSlugFromText(text) {
  if (!text) {
    return generateRandomSlug(PREFIX);
  }

  // Remove the intial and ending spaces
  text = text.trim();

  //transform spaces to dash
  text = text.replace(/\s+/g, '-');

  //remove any characters that are not a-zA-Z_-0-9
  text = text.replace(/[^A-Za-z_\-0-9]/g, '');

  //make all text lowercase
  text = text.toLowerCase();

  if (text === '' || text === '-') {
    return generateRandomSlug(PREFIX);
  }

  return text;
}

function generateRandomSlug(prefix) {
  var randomWord = new Chance();
  var uniqueText = randomWord.word({ length: 5 });
  return prefix + uniqueText;
}

module.exports.stringifyServerError = stringifyServerError;
/**
 * Stringify an error response coming from server
 * @param body
 * @returns {string}
 */
function stringifyServerError(body) {
  var msg = g.f('Error: ');
  if (body && body.errors) {
    for (var i = 0; i < body.errors.length; i++) {
      var e = body.errors[i];
      for (var propName in e) {
        msg += e[propName] + '\n';
      }
    }
  }
  return msg;
}

module.exports.stringifyError = stringifyError;
function stringifyError(error) {
  if (error instanceof ServerError) {
    return error.toString();
  }
  var msg = g.f('Error: ');
  var body;
  if (error.body) {
    if (error.body || typeof error.body === 'string') {
      try {
        body = JSON.parse(error.body);
      }
      catch (err) {
        body = error.body;
      }
    }
    else {
      body = error.body;
    }
  }
  else {
    body = typeof error.message === 'object' ? JSON.parse(error.message) : error.message;
  }
  if (body && body.errors) {
    for (var i = 0; i < body.errors.length; i++) {
      var e = body.errors[i];
      for (var propName in e) {
        msg += e[propName];
      }
    }
  }
  else {
    msg += body;
  }
  return msg;
}

module.exports.getHelpFileContent = getHelpFileContent;
/**
 * Return the content of <tt>fileName</tt>
 * @param parentDir
 * @param fileName
 */
function getHelpFileContent(parentDir, fileName) {
  var absolutePath = path.resolve(parentDir, fileName);
  debug('Reading content for: ' + absolutePath);
  var data = fs.readFileSync(absolutePath);
  return data.toString();
}

module.exports.checkForOrgOrAllOrgAndCatalogOrCatalog = checkForOrgOrAllOrgAndCatalogOrCatalog;
function checkForOrgOrAllOrgAndCatalogOrCatalog(opts) {
  if (opts.allOrganizations) {
    opts.organization = null;
  } else if (!opts.organization) {
    throw new Error(g.f('{{--organization}} or {{--all-organizations}} is required.'));
  }

  if (opts.allCatalogs) {
    opts.catalog = null;
  } else if (!opts.catalog) {
    throw new Error(g.f('{{--catalog}} or {{--all-catalogs}} is required.'));
  }
};

module.exports.checkForOrgOrCatalog = checkForOrgOrCatalog;
function checkForOrgOrCatalog(opts) {
  checkForOrg(opts);
  checkForCatalog(opts);
};

module.exports.checkForOrg = checkForOrg;
function checkForOrg(opts) {
  if (!opts.organization) {
    throw new Error(g.f('The {{--organization}} option is required or the catalog configuration ' +
      'variable must be set using the {{"apic config:set catalog="}} command.'));
  }
};

module.exports.checkForCatalog = checkForCatalog;
function checkForCatalog(opts) {
  if (!opts.catalog) {
    throw new Error(g.f('{{--catalog}} is required or needs to be set via {{$apic config:set catalog}}'));
  }
};

