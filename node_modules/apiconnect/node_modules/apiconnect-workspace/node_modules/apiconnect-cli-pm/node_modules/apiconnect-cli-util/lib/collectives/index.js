/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

var Promise = require('bluebird');
var RemoteApps = require('../util/remote-apps');
var _ = require('lodash');
var g = require('strong-globalize')();
var util = require('util');

function LibertySupport(options) {
  RemoteApps.call(this, options);

  this._options = options;
  this._service = options.service;
  this._providerApp = options.providerApp;
  this._clusters = [];

  var Cluster = require('./cluster-operation');
  var l = options.providerApp.liberty;
  this._cluster = new Cluster({
    host: l.controllerHosts[0].host,
    port: l.controllerHosts[0].port,
    user: l.username,
    password: l.password,
  });
  var Environment = require('./env-vars.js');
  this._env = new Environment({
    host: l.controllerHosts[0].host,
    port: l.controllerHosts[0].port,
    user: l.username,
    password: l.password,
  });
}
util.inherits(LibertySupport, RemoteApps);
module.exports = LibertySupport;

/**
 * Locate clusters running on remote liberty server.
 */
LibertySupport.prototype.init = function() {
  var self = this;
  return this._cluster.list().then(function(clusterNames) {
    var clusters = _(clusterNames).map(function(clusterName) {
      clusterName = clusterName.replace(new RegExp('^' + _.escapeRegExp('apic.')), '');
      var clusterData = clusterName.split('-');
      return {
        ts: new Date(parseInt(clusterData.pop(), 10)),
        guid: clusterData.pop(),
        name: clusterData.join('-'),
        clusterName: clusterName,
      };
    }).sortBy([ 'ts' ]).reverse().sortedUniqBy(function(clusterData) {
      return clusterData.guid;
    });
    self._clusters = clusters.value();
  });
};

LibertySupport.prototype.propsClear = function() {
  var opts = this._options;
  var self = this;

  return clear(opts, opts.providerApp);

  function clear(opts, providerApp) {
    opts = _.merge({ clusterName: self._getClusterForApp(providerApp) }, opts);
    return self._env.listVars(opts).then(function(props) {
      return self._env.deleteVars(_.keys(props), opts).then(function() {
        return {
          app: opts.providerApp.name,
          props: props,
        };
      });
    });
  }
};

LibertySupport.prototype.propsDelete = function(name, otherNames) {
  otherNames = otherNames || [];
  otherNames.unshift(name);

  var opts = _.extend({ clusterName: this._getClusterForApp(this._options.providerApp) }, this._options);
  var self = this;

  return this._env.getVars(otherNames, opts).then(function(props) {
    return self._env.deleteVars(otherNames, opts).then(function(success) {
      return {
        app: opts.providerApp.name,
        props: props,
      };
    });
  });
};

LibertySupport.prototype.propsList = function(opts) {
  var self = this;

  if (opts.providerApp) {
    return list(opts, opts.providerApp).then(function(props) {
      return [ {
        app: opts.providerApp.name,
        props: props,
      } ];
    });
  } else {
    return _getAllProviderApps(opts).then(function(providerApps) {
      return Promise.map(providerApps, function(providerApp) {
        return list(opts, opts.providerApp).then(function(props) {
          return {
            app: opts.providerApp.name,
            props: props,
          };
        });
      });
    });
  }

  function list(opts, providerApp) {
    opts = _.merge({ clusterName: self._getClusterForApp(providerApp) }, opts);
    return self._env.listVars(opts);
  }
};

LibertySupport.prototype.propsGet = function(name, otherNames) {
  var opts = _.extend({ clusterName: this._getClusterForApp(this._options.providerApp) }, this._options);

  otherNames = otherNames || [];
  otherNames.unshift(name);

  return this._env.getVars(otherNames, opts).then(function(props) {
    return {
      app: opts.providerApp.name,
      props: props,
    };
  });
};

LibertySupport.prototype.propsSet = function propsSet(nameValue, otherNamesValues, options) {
  var opts = _.merge({
    clusterName: this._getClusterForApp(this._options.providerApp),
  }, this._options);

  otherNamesValues = otherNamesValues || [];
  otherNamesValues.unshift(nameValue);

  var nvHash = _(otherNamesValues).map(function(nv) {
    var idx = nv.indexOf('=');
    var hash = {};
    hash[nv.slice(0, idx)] = nv.slice(idx + 1);
    return hash;
  }).reduce(function(prev, cur) {
    prev = _.merge(prev, cur);
    return prev;
  }, {});
  return this._env.setVars(nvHash, opts).then(function() {
    return {
      app: opts.providerApp.name,
      props: nvHash,
    };
  });
};

LibertySupport.prototype.servicesStart = function(options) {
  var opts = _.merge({
    clusterName: this._getClusterForApp(this._options.providerApp),
  }, this._options);
  return this._cluster.start(opts);
};

LibertySupport.prototype.servicesStop = function(options) {
  var opts = _.merge({
    clusterName: this._getClusterForApp(this._options.providerApp),
  }, this._options);
  return this._cluster.stop(opts);
};

LibertySupport.prototype.serviceStatus = function(options) {
  var opts = _.merge({
    clusterName: this._getClusterForApp(this._options.providerApp),
  }, this._options);
  return this._cluster.getStatus(opts);
};

LibertySupport.prototype.servicesLogs = function(options) {
  return Promise.reject(new Error(g.f('Service logs are not available for API Connect Collective applications')));
};

LibertySupport.prototype._getClusterForApp = function(providerApp) {
  var clusterData = _(this._clusters).filter(function(clusterData) {
    return clusterData.guid === providerApp.id;
  }).last();

  if (clusterData) {
    providerApp.clusterName = clusterData.clusterName;
    return clusterData.clusterName;
  } else {
    throw new Error(g.f('No deployment was found for %s.', this._providerApp.name));
  }
};

function _getAllProviderApps(options) {
  var providerApps = require('../provider-apps');
  return providerApps.list({ server: options.server, org: options.providerOrg.name });
}

