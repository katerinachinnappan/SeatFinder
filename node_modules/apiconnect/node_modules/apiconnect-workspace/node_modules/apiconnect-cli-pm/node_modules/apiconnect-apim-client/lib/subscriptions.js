/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var f = require('util').format;
var reqOpts = require('./req-options');
var request = require('./request');
var validator = require('./opts-validator');

function list(options) {
  var url;
  options = _.defaults(options, {
    scope: 'catalog',
  });

  switch (options.scope) {
    case 'catalog':
      return validator(options, [ 'server', 'organization', 'catalog', 'scope' ]).then(function() {
        if (options.product) {
          url = f('/v1/orgs/%s/environments/%s/subscriptions/?product=%s',
            options.organization, options.catalog, options.product);
        } else {
          url = f('/v1/orgs/%s/environments/%s/subscriptions', options.organization, options.catalog);
        }

        options = reqOpts(_.extend({
          url: url,
          json: true,
        }, options));

        return request(options);
      });
    case 'space':
      return validator(options, [ 'server', 'organization', 'catalog', 'space', 'scope' ]).then(function() {
        if (options.product) {
          url = f('/v1/orgs/%s/environments/%s/spaces/%s/subscriptions/?product=%s',
            options.organization, options.catalog, options.space, options.product);
        } else {
          url = f('/v1/orgs/%s/environments/%s/spaces/%s/subscriptions',
            options.organization, options.catalog, options.space);
        }

        options = reqOpts(_.extend({
          url: url,
          json: true,
        }, options));

        return request(options);
      });
    case 'consumer-org':
      return validator(options, [ 'server', 'organization', 'catalog', 'application', 'scope' ]).then(function() {
        options = reqOpts(_.extend({
          url: f(
            '/v1/orgs/%s/environments/%s/subscriptions?app=%s',
            options.organization,
            options.catalog,
            options.application
          ),
          json: true,
        }, options));

        return request(options);
      });
    default:
      var err = new Error(f('Invalid scope %s, valid scopes are "catalog", "space" and "consumer-org"',
        options.scope));
      err.code = 'INVALID_SCOPE';
      return Promise.reject(err);
  }
};

function get(options) {
  options = _.defaults(options, {
    scope: 'catalog',
  });

  switch (options.scope) {
    case 'catalog':
      return validator(options, [ 'server', 'organization', 'catalog', 'scope', 'name' ]).then(function() {
        options = reqOpts(_.extend({
          url: f('/v1/orgs/%s/environments/%s/subscriptions/%s',
            options.organization, options.catalog, options.name),
          json: true,
        }, options));

        return request(options);
      });
    case 'space':
      return validator(options, [ 'server', 'organization', 'catalog', 'space', 'scope', 'name' ]).then(function() {
        options = reqOpts(_.extend({
          url: f(
            '/v1/orgs/%s/environments/%s/spaces/%s/subscriptions/%s',
            options.organization,
            options.catalog,
            options.space,
            options.name
          ),
          json: true,
        }, options));

        return request(options);
      });
    default:
      var err = new Error(f('Invalid scope %s, valid scopes are "catalog", "space" and "consumer_org"',
        options.scope));
      err.code = 'INVALID_SCOPE';
      return Promise.reject(err);
  }
};

module.exports = {
  list: list,
  get: get,
};

