/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var f = require('util').format;
var orgs = require('../orgs');
var reqOptions = require('../req-options');
var request = require('../request');
var validator = require('../opts-validator');


/**
 * @typedef ListResult
 * @param {string} type (api|product)
 * @param {string} name
 * @param {string} version
 * @param {string} organization
 */

/**
 * @typedef ListResults
 * @type Array.<ListResult>
 */

/**
 * List all draft APIs/Products.
 *
 * If api and product are omitted, they default to true. If you provide a value for one of the two
 * the other will default to false.
 *
 * @param {object} options
 * @param {string} options.type (api|product) filter the list by definition type
 * @param {string} options.organization If omitted, all organizations will be listed
 *
 * @return Promise.<ListResults>
 */
function list(options) {
  return validator(options)
    .then(function() {
      if (options.organization) {
        return Promise.resolve([ { name: options.organization } ]);
      }
      // If no organization, we need to get list of all orgs
      return orgs.list(options);
    }).then(function(organizations) {
      var apiPromise = !options.type || options.type === 'api' ?
        listOrgApis(organizations, options) : Promise.resolve([]);
      var productPromise = !options.type || options.type === 'product' ?
        listOrgProducts(organizations, options) : Promise.resolve([]);

      return Promise.all([ apiPromise, productPromise ]);
    }).then(_.flatten);
};

var listAPIDraftsUrlFormat = '/v1/apimanager/orgs/%s/apis?mode=swaggerv2';
function listOrgApis(organizations, options) {
  return Promise.map(organizations, function(organization) {
    var opts = reqOptions(_.defaults({
      method: 'GET',
      url: f(listAPIDraftsUrlFormat, organization.name),
      json: true,
    }, options));
    return request(opts).then(function(apis) {
      return apis.map(function(api) {
        return {
          type: 'api',
          name: api.info['x-ibm-name'],
          version: api.info.version,
          organization: organization.name,
        };
      });
    });
  }).then(_.flatten);
}

var listProductDraftsUrlFormat = '/v1/orgs/%s/products';
function listOrgProducts(organizations, options) {
  return Promise.map(organizations, function(organization) {
    var opts = reqOptions(_.defaults({
      method: 'GET',
      url: f(listProductDraftsUrlFormat, organization.name),
      json: true,
    }, options));
    return request(opts).then(function(products) {
      return products.map(function(product) {
        return {
          type: 'product',
          name: product.info.name,
          version: product.info.version,
          organization: organization.name,
        };
      });
    });
  }).then(_.flatten);
}

module.exports = list;

