/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var SG = require('strong-globalize');
SG.SetRootDir(__dirname);

var _ = require('lodash');
var cliLogger = require('apiconnect-cli-logger');

module.exports = {
  getTopics: require('./lib/plugin-def').getTopics,
  getVersion: require('./lib/plugin-def').getVersion,
  logs: serviceLogs,
  ls: serviceList,
  serviceStop: stopService,
  stop: stop,
  start: start,
  get: get,
};

function get(serviceName) {
  var getImpl = require('./lib/local/services-get').getImpl;
  return getImpl(serviceName, { logger: cliLogger });
};

/**
 * @typedef {Object} ServiceInfo
 * @property {String} name
 * @property {number} id
 * @property {number} port
 */

/**
 * Starts local services.
 *
 * @param {String} [projectDir] is used to resolve the app and app-gw to start. Defaults to process.cwd()
 * @param {Object} options
 * @return {Promise<Array<ServiceInfo>>}
 *
 * Reject Error if unable to start PM
 */
function start(projectDir, options) {
  options = options || {};
  var start = require('./lib/local/services-start').startImpl;
  return start(_.extend(options, { cwd: projectDir, logger: cliLogger }));
};

/**
 * Stop multiple locally running services.
 *
 * @param {Object} options
 * @param {String} options.dir Stop all services associated with provided directory.
 * @param {String} options.all Stop all services
 * @return {Promise}
 */
function stop(opts) {
  var stop = require('./lib/local/services-stop').stopImpl;
  return stop(_.extend(opts, { logger: cliLogger }));
};

/**
 * Stops a locally running service.
 *
 * @param {String} serviceName
 * @return {Promise}
 */
function stopService(serviceName) {
  var stop = require('./lib/local/services-stop').stopImpl;
  return stop({ service: serviceName, logger: cliLogger });
};


/**
 * @typedef {Object} ServiceIds
 * @property {String} name
 * @property {number} id
 */

/**
 * Returns list of all locally running services.
 * @returns {Promise<Array<ServiceIds>>}
 */
function serviceList(options) {
  options = options || {};
  var list = require('./lib/local/services-list').listImpl;
  return list(_.extend(options, { logger: cliLogger }));
};

/**
 * Gets logs for a locally running service.
 * @param serviceName {String} name of locally running service
 * @returns {Promise<LogListener>}
 */
function serviceLogs(serviceName) {
  var logs = require('./lib/local/services-logs').logsImpl;
  return logs(serviceName, { logger: cliLogger });
}

