/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var clientHelper = require('./util/client');
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var ls = require('./services-list').listImpl;
var serviceNameHelper = require('./util/name-helper');
var dp = require('../datapower');

module.exports = {
  stopFmt: stopFmt,
  stopImpl: stopImpl,
};

function stopFmt(options) {
  if (options.all && options.service) {
    return Promise.reject(new Error(g.f('Cannot provide {{--all}} and {{--service}} options concurrently.')));
  }
  var log = options.logger || logger;
  var stopping = stopImpl(options);
  return stopping.then(logResults).catch(function(err) {
    log.debug(err);
  });

  function logResults(results) {
    if (!results || results.length === 0) {
      return;
    }
    return results.forEach(function(result) {
      log.writeln(g.f('Stopped %s', result));
    });
  }; // eslint-disable-line no-unreachable
}

function stopImpl(opts) {
  logger.debug('services.stop', opts.service, opts.all, opts.dir);
  clientHelper.init(opts);
  return getStopping(opts)
    .then(function(stoppingIds) {
      var preps = _.map(stoppingIds, function(id) {
        return clientHelper.findService(id).then(dp.prepareForShutdown);
      });
      return Promise.all(preps).then(function() {
        return stoppingIds;
      });
    })
    .then(function(stopping) {
      logger.debug('services.stop stopping', stopping);
      return Promise.all(_.map(stopping, clientHelper.stopServiceImpl.bind(null)));
    }).tap(function() {
      return clientHelper.tryShutdown();
    }).then(function(res) {
      return _.filter(res, Boolean);
    });
};

function getStopping(opts) {
  if (opts.service) {
    return Promise.resolve([ opts.service ]);
  }
  if (opts.all) {
    return ls().then(function(procs) {
      return _.map(procs, function(proc) {
        return proc.id;
      });
    });
  }
  var projectDir = opts.dir || process.cwd();
  return serviceNameHelper(projectDir).then(_.values);
};

