/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-pm

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var apicLogger = require('apiconnect-cli-logger');
var clientHelper = require('./util/client');
var g = require('strong-globalize')();
var namesHelper = require('./util/name-helper');

module.exports = {
  listFmt: listFmt,
  listImpl: listImpl,
};

function listFmt(options) {
  var l = options.logger;
  return listImpl(options).then(function(services) {
    if (!services || services.length === 0) {
      l.debug(services);
      throw new Error(g.f('no results found'));
    }
    services.forEach(function(svc) {
      // If a service has been stopped it will still be returned but won't have a port. Don't log these.
      var msg;
      if (svc.port) {
        msg = g.f('Service %s running on port %s.', svc.name, svc.port);
        if (svc.env && svc.env.STRONGLOOP_DASHBOARD === 'on') {
          msg += g.f(' Access the application dashboard at http://127.0.0.1:%s/appmetrics-dash', svc.port);
        }
        l.writeln(msg);
      } else if (svc.env.DATAPOWER && !svc.error) {
        msg = g.f('Service %s is still starting.', svc.name);
        l.writeln(msg);
      } else if (svc.error) {
        msg = g.f('Service %s failed to start.', svc.name);
        l.writeln(msg);
      }
    });
  }).catch(function() {
    // Ignore err as capturing is handled by api
    l.writeln(g.f('No services defined.'));
  });
}

function listImpl(opts) {
  opts = opts || {};
  var l = opts.logger || apicLogger;
  clientHelper.init(opts);
  l.debug('services.listImpl', opts.dir);
  return clientHelper.serviceList().then(function(results) {
    if (results.length <= 0) {
      throw new Error(g.f('No services'));
    }
    if (!opts.dir) {
      return results;
    }
    // If we were given a opts.dir we need to return names that match
    var names = namesHelper(opts.dir).then(_.values);

    return Promise.all([ results, names ]).then(function(r) {
      var procs = r[0];
      var matches = r[1];

      // Return only the procs whose name is in the matches dir
      return _.filter(procs, function(proc) {
        return matches.indexOf(proc.name) >= 0;
      });
    });
  }).catch(function onPmNotFound(err) {
    l.debug(err);
    return [];
  }).finally(function(ret) {
    l.debug('services.listImpl return', ret);
    return ret;
  });
};

