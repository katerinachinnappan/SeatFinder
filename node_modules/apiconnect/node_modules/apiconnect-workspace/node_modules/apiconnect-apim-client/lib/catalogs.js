/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var orgAPI = require('./orgs');
var reqOpts = require('./req-options');
var request = require('./request');
var spaceAPI = require('./spaces');
var util = require('util');
var validator = require('./opts-validator');

/**
 * @typedef Space
 */

/**
 * @typedef Catalog
 * @param {string} id GUID of catalog
 * @param {string} orgId GUID of organization
 * @param {string} name display name (can contain spaces)
 * @param {string} shortName name of the catalog
 * @param {boolean} spaceEnabled true if the catalog has spaces enabled
 * @param {Array.<string>} spaceIds list of GUIDs
 * @param {Array.<Space>} spaces list of GUIDs
 * @param {Date} createdAt
 * @param {Date} updatedAt
 * @param {string} createdBy
 * @param {string} updatedBy
 * @param {URL} url URL with GUIDs instead of short-names.
 *
 * Other fields (not tested):
 * * apiCenter
 * * baseUrl
 * * portalType
 * * portalUrl
 * * gatewayType
 * * idp
 * * idps
 * * availableRoles
 * * metadata
 * * default
 * * autoDeploy
 * * gatewayClusterUrl
 * * restrictedDeployment
 * * invitationEnabled
 * * selfSignUpEnabled
 * * testAppEnabled
 * * testAppCredentials
 * * productDeploymentApprovalRequiredStates
 */

/**
 * @typedef Catalogs
 * @type Array.<Catalog>
 */

/**
 * Get a filtered list of all catalogs on this cloud.
 * @param {object} options
 * @param {string} options.organization Limit to catalogs that are in the provided org
 * @param {string} options.catalog Limit to catalogs that match provided catalog name
 * @return Promise.<catalogAPI>
 */
function listAll(options) {
  options = options || {};
  var optionsPromise = validator(options);
  var promiseChain = optionsPromise;

  if (options.organization) {
    promiseChain = promiseChain.then(function(options) {
      return orgAPI.get(_.defaults({
        type: 'provider',
        name: options.organization,
      }, options));
    });
  } else {
    promiseChain = promiseChain.then(function(options) {
      return orgAPI.list(_.defaults({ type: 'provider' }, options));
    });
  }

  return promiseChain.then(function(orgs) {
    if (!Array.isArray(orgs)) {
      orgs = [ orgs ];
    }

    return Promise.map(orgs, function(org) {
      return list(
        _.defaults({ organization: org.name }, optionsPromise.value())
      ).then(function(catalogs) {
        return _.map(catalogs, function(catalog) {
          catalog.orgName = org.name;
          return catalog;
        });
      });
    }).then(function(catalogs) {
      catalogs = _.flatten(catalogs);
      if (options.catalog) {
        catalogs = _.filter(catalogs, { shortName: options.catalog });
      }
      return catalogs;
    });
  });
}

function list(options) {
  options = options || {};
  return validator(options, [ 'organization' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: util.format('/v1/orgs/%s/environments', options.organization),
      json: true,
    }, options));
    return request(reqOptions).then(function(catalogs) {
      return Promise.map(catalogs, function(catalog) {
        catalog.orgName = options.organization;
        if (catalog.spaceEnabled) {
          return spaceAPI.list(_.defaults({ catalog: catalog.shortName }, options)).then(function(spaces) {
            catalog.spaces = spaces;
            return catalog;
          });
        }
        return catalog;
      });
    });
  });
}

function get(options) {
  options = options || {};
  return validator(options, [ 'organization', 'catalog' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: util.format(
        '/v1/orgs/%s/environments/%s',
        options.organization,
        options.catalog
      ),
      json: true,
    }, options));
    return request(reqOptions).then(function(catalog) {
      catalog.orgName = options.organization;
      if (catalog.spaceEnabled) {
        return spaceAPI.list(_.defaults({ catalog: catalog.shortName }, options)).then(function(spaces) {
          catalog.spaces = spaces;
          return catalog;
        });
      }
      return catalog;
    });
  });
}

/**
 * @param {object} options
 * @param {string} options.name
 * @param {string} options.displayName
 * @param {string} options.organization
 */
function create(options) {
  options = options || {};
  return validator(options, [ 'organization', 'name', 'displayName' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: util.format('/v1/orgs/%s/environments', options.organization),
      method: 'post',
      json: true,
      body: {
        name: options.displayName,
        shortName: options.name,
      },
      returnHTTPResponse: true,
    }, options));
    return request(reqOptions).then(function(res) {
      if (res.statusCode === 201) {
        return res.body;
      } else {
        var err = new Error(res.body);
        err.statusCode = res.statusCode;
        return err;
      }
    });
  });
}

/**
 * @param {string} name
 * @param {object} options
 * @param {string} options.organization
 * @param {string} options.catalog
 */
function del(options) {
  options = options || {};
  return validator(options, [ 'organization', 'catalog' ]).then(function(options) {
    var reqOptions = reqOpts(_.defaults({
      url: util.format('/v1/orgs/%s/environments/%s', options.organization, options.catalog),
      method: 'delete',
      json: true,
      returnHTTPResponse: true,
    }, options));
    return request(reqOptions).then(function(res) {
      if (res.statusCode === 204) {
        return;
      } else {
        throw Error(res.body);
      }
    });
  });
}

/**
 * @param {object} options
 * @param {string} options.organization
 * @param {string} options.catalog
 * @param {boolean} options.spaceEnabled
 */
function set(options) {
  options = options || {};
  return validator(options, [ 'organization', 'catalog' ]).then(function(options) {
    var body = {};
    if ('spaceEnabled' in options) {
      body.spaceEnabled = !!options.spaceEnabled;
    }
    if (options.name) {
      body.shortName = options.name;
    }
    if (options.displayName) {
      body.name = options.displayName;
    }
    var reqOptions = reqOpts(_.defaults({
      url: util.format('/v1/orgs/%s/environments/%s', options.organization, options.catalog),
      method: 'put',
      json: true,
      body: body,
      returnHTTPResponse: true,
    }, options));
    return request(reqOptions).then(function(res) {
      return res.body;
    });
  });
}

/**
 * @param {object} options
 * @param {string} options.organization
 * @param {string} options.catalog
 * @param {string} options.userId
 */
function transferOwner(options) {
  options = options || {};
  return validator(options, [ 'organization', 'catalog', 'userId' ]).then(function(options) {
    var body = {};
    if (options.userId) {
      body.user = options.userId;
    }
    var reqOptions = reqOpts(_.defaults({
      url: util.format('/v1/orgs/%s/environments/%s/transferOwner', options.organization, options.catalog),
      method: 'post',
      json: true,
      body: body,
      returnHTTPResponse: true,
    }, options));
    return request(reqOptions).then(function(res) {
      return res.body;
    }, function(err) {
      throw err;
    });
  });
}

module.exports = {
  listAll: listAll,
  list: list,
  get: get,
  create: create,
  delete: del,
  set: set,
  transferOwner: transferOwner,
};
