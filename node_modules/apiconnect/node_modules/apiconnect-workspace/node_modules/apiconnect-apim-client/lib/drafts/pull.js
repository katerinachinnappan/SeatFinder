/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var f = require('util').format;
var get = require('./get');
var jsyaml = require('js-yaml');
var path = require('path');
var reqOptions = require('../req-options');
var request = require('../request');
var util = require('../util');
var validator = require('../opts-validator');

/**
 * Pull API or product definitions from drafts
 *
 * @param {object} options
 * @param {string} options.organization (required)
 * @param {string} options.name (required) name of the definition to get
 * @param {string} options.version filter the definitions by version
 * @param {string} options.type (api|product) subset the list by definition type
 * @param {boolean} options.productOnly pull the product but not its referenced apis
 * @param {string} options.dir directory to pull files to. process.cwd() if omitted
 *
 * @throws NOT_FOUND, AMBIGUOUS_REQUEST
 *
 * @return Promise.<??>
 */
function pull(options) {
  return validator(options, [ 'organization', 'name' ])
    .then(get)
    .then(function(drafts) {
      options = _.defaults({}, options);
      options.dir = options.dir || process.cwd();

      var apis = drafts.apis.length;
      var products = drafts.products.length;
      if (apis === 0 && products === 0 || (options.productOnly === true && products === 0)) {
        throw new Error('not found');
      } else if (apis > 1 || products > 1 || (apis === 1 && products === 1)) {
        // More than 1 api/product or 1 of each
        throw new Error('ambiguous request');
      }

      if (apis === 1) {
        drafts = pullApi(drafts.apis[0], options);
      } else {
        drafts = pullProduct(drafts.products[0], options);
      }
      return drafts;
    });
};

function pullApi(api, options) {
  var opts = reqOptions(_.defaults({
    url: api.url,
    json: true,
    method: 'GET',
  }, options));
  return request(opts)
    .then(function(res) {
      var pullWsdlPromise = Promise.resolve();
      // If we have a wsdl file reference, we need to pull/write the wsdl file, then pull the api
      // then update the api -> wsdl reference, then write api
      if (res['x-ibm-configuration'] && res['x-ibm-configuration'].type === 'wsdl') {
        pullWsdlPromise = pullWsdl(api, options);
      }
      return Promise.all([ pullWsdlPromise, Promise.resolve(res) ]);
    }).spread(function(wsdl, api) {
      var name = api.info['x-ibm-name'];
      var version = api.info.version;
      var filename = path.resolve(options.dir, util.generateApiFileName(name, version));
      var ret = [ { type: 'api', name: name, version: version, file: filename, organization: options.organization } ];
      if (wsdl) {
        api['x-ibm-configuration']['wsdl-definition']['wsdl'] = path.basename(wsdl.file);
        ret.push(wsdl);
      }
      // We want to avoid jsyaml default line breaks that would cause gateway script issues
      return util.writeFile(filename, jsyaml.dump(api, { lineWidth: -1 }), true).return(ret);
    });
};

function pullProduct(product, options) {
  var opts = reqOptions(_.defaults({
    url: f('%s/all', product.url),
    json: true,
    method: 'GET',
  }, options));
  return request(opts).then(function(res) {
    var productDocument = res.product.document;
    productDocument.apis = {};
    // Fixup apis to point to pulled files. Do this even if we're pulling productOnly
    res.apis = res.apis.map(function(api) {
      api = api.document;
      var name = api.info['x-ibm-name'];
      var version = api.info.version;
      productDocument.apis[name] = {
        $ref: util.generateApiFileName(name, version),
      };
      return api;
    });
    var name = productDocument.info.name;
    var version = productDocument.info.version;
    var filename = path.resolve(options.dir, util.generateProductFileName(name, version));
    var ret = { type: 'product', name: name, version: version, file: filename, organization: options.organization };

    var writeProduct = util.writeFile(filename, jsyaml.dump(productDocument, { lineWidth: -1 }), true).return(ret);
    var pullApis = Promise.resolve([]);
    if (!options.productOnly || options.productOnly === false) {
      // It is stupid, but we are given the api files, but not the wsdls... and we don't have a way
      // to figure out how to get the wsdl without doing a full pull request
      pullApis = Promise.map(res.apis, _.bind(pullReferencedApi, null, _, options)).then(_.flatten);
    }
    return Promise.all([ pullApis, writeProduct ]);
  }).then(_.flatten);
}

function pullReferencedApi(api, options) {
  var opts = _.defaults({ type: 'api', name: api.info['x-ibm-name'], version: api.info.version }, options);
  return pull(opts);
}

var wsdlUrl = '/v1/apimanager/orgs/%s/apis/%s/wsdl';
function pullWsdl(api, options) {
  var url = f(wsdlUrl, options.organization, api.id);
  var opts = reqOptions(_.defaults({
    url: url,
    headers: { accept: 'application/json' },
    encoding: null,
    returnHTTPResponse: true,
  }, options));
  return request(opts).then(function(res) {
    var body = res.body;
    var name = api.info['x-ibm-name'];
    var version = api.info.version;

    var filename = util.generateApiWsdlFileName(name, version);
    // Check to see if the file we're pulling is a zip or wsdl
    if (res.headers['content-disposition'].match(/.zip"$/)) {
      filename = util.generateApiWsdlZipFileName(name, version);
    }
    filename = path.resolve(options.dir, filename);
    var ret = { type: 'wsdl', name: name, version: version, file: filename, organization: options.organization };
    return util.writeFile(filename, body, true).return(ret);
  });
}

module.exports = pull;

