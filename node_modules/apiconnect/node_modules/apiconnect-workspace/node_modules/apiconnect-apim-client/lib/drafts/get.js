/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var f = require('util').format;
var reqOptions = require('../req-options');
var request = require('../request');
var validator = require('../opts-validator');

/**
 * @typedef ApiResult
 * @param {string} info.x-ibm-name
 * @param {string} info.version
 * @param {string} info.title
 * @param {string} basepath
 * @param {string} organization
 * @param {Array<ProductResult>} related
 * @param {string} updatedAt
 * @param {string} updatedBy
 * @param {string} url
 * @param {string} id
 */

/**
 * @typedef ProductResult
 * @param {string} info.name
 * @param {string} info.version
 * @param {string} info.title
 * @param {string} basepath
 * @param {string} organization
 * @param {Array<ProductResult>} related
 * @param {string} updatedAt
 * @param {string} updatedBy
 * @param {string} createdAt
 * @param {string} createdBy
 * @param {string} url
 * @param {string} id
 * @param {Array<ApiResult>} apis
 * @param {object} visibility
 * @param {object} plans
 */

/**
 * @typedef Result
 * @param {Array<@ApiResult>} apis
 * @param {Array<@ProductResult>} products
 */

/**
 * Get information on API / product definition(s) in drafts.
 *
 * @param {object} options
 * @param {string} options.organization (required)
 * @param {string} options.name (required) name of the definition to get
 * @param {string} options.version filter the definitions by version
 * @param {string} options.type (api|product) filter the list by definition type
 *
 * @return Promise.<Result>
 */
function get(options) {
  return validator(options, [ 'name', 'organization' ])
    .then(function(options) {
      var name = options.name;
      var version = options.version;
      var noop = Promise.resolve([]);
      var type = options.type ? options.type.toLowerCase() : null;

      var apis = (!type || type === 'api') ? getApis(name, version, options) : noop;
      var products = (!type || type === 'product') ? getProducts(name, version, options) : noop;

      return Promise.all([ apis, products ])
        .spread(function(apis, products) {
          return { apis: apis, products: products, organization: options.organization };
        });
    });
}

function getProducts(name, version, options) {
  var urlSuffix = options.all ? '/all' : '?refType=alias';
  return findProducts(name, version, options)
    .then(function(products) {
      // We found [n] products, now get the full product(s) to return
      return Promise.map(products, function(product) {
        // ?refType query param to refs in name:version format
        var opts = reqOptions(_.defaults({
          url: f('%s%s', product.url, urlSuffix),
          json: true,
          method: 'GET',
        }, options));
        return request(opts);
      });
    });
};

var searchProductURLFormat = '/v1/orgs/%s/drafts/search?name=%s';
function findProducts(name, version, options) {
  var url = f(searchProductURLFormat, options.organization, name);
  if (version) {
    url = f('%s&version=%s', url, version);
  }
  var o = reqOptions(_.defaults({
    method: 'GET',
    json: true,
    url: url,
  }, options));
  return request(o).then(function(products) {
    products = _.filter(products, function(product) {
      return name === product.name
        && (!version || version === product.version);
    });
    products.forEach(function(product) {
      product.organization = options.organization;
    });
    return products;
  });
};

var searchApiURLFormat = '/v1/apimanager/orgs/%s/apis/search?name=%s';
function getApis(name, version, options) {
  var url = f(searchApiURLFormat, options.organization, name);
  if (version) {
    url = f('%s&version=%s', url, version);
  }
  var o = reqOptions(_.defaults({
    method: 'GET',
    json: true,
    url: url,
  }, options));
  return request(o)
    .then(function(apis) {
      apis = _.filter(apis, function(api) {
        return api.info['x-ibm-name'] === name
          && (!version || api.info.version === version);
      });
      apis.forEach(function(api) {
        api.organization = options.organization;
      });
      return Promise.map(apis, _.bind(getRelatedProducts, null, _, options));
    });
}

var relatedProductsURLFormat = '/v1/orgs/%s/products/search?apiId=%s';
function getRelatedProducts(api, options) {
  var org = options.organization;
  var url = f(relatedProductsURLFormat, options.organization, api.id);
  options = reqOptions(_.defaults({
    method: 'GET',
    json: true,
    url: url,
  }, options));
  options.headers.accept = 'application/json';
  return request(options)
    .then(function(related) {
      related.forEach(function(relative) {
        relative.organization = org;
      });
      api.related = related;
      return api;
    });
};

module.exports = get;

