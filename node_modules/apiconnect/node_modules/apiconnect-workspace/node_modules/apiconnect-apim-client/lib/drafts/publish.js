/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var catalogGet = require('../catalogs').get;
var codes = require('./codes');
var f = require('util').format;
var get = require('./get');
var reqOptions = require('../req-options');
var request = require('../request');
var validator = require('../opts-validator');

/**
 * Publish a product and its referenced APIs in drafts to a catalog
 *
 * @param {object} options
 * @param {string} options.catalog (required)
 * @param {string} options.organization (required)
 * @param {string} options.name (required) name of the draft
 * @param {string} options.space
 * @param {boolean} options.stage - limit the publish to staging
 * @param {string} options.version required only if the name isn't specific enough to select a single product
 *
 * @throws NOT_FOUND, AMBIGUOUS_REQUEST, CATALOG_NOT_FOUND
 *
 * @return Promise.<{staged:[], published:[]}>
 */
function publish(options) {
  var v = validator(options, [ 'catalog', 'organization', 'name' ]);
  var catalog = v.then(getCatalogId);
  var drafts = v.then(get);
  return Promise.all([ catalog, drafts ])
    .spread(function(catalogId, drafts) {
      if (drafts.products.length > 1) {
        var err = new Error();
        err.code = codes.AMBIGUOUS_PRODUCT;
        err.obj = {
          products: drafts.products,
        };
        return Promise.reject(err);
      } else if (drafts.products.length === 0) {
        err = new Error();
        err.code = codes.NOT_FOUND;
        err.obj = options;
        return Promise.reject(err);
      }
      var product = drafts.products[0];
      var stageOp = stage(product.id, catalogId, options);
      if (options.stage) {
        return stageOp.then(function(res) {
          return { staged: res };
        });
      }
      return stageOp.then(promote.bind(null, options))
        .then(function(res) {
          return { staged: stageOp.value(), published: res };
        });
    });
}

var promoteSpaceUrl = '/v1/orgs/%s/environments/%s/spaces/%s/products/%s/publish';
var promoteUrl = '/v1/orgs/%s/environments/%s/products/%s/publish';
function promote(options, stageRes) {
  var url;
  if (options.space) {
    url = f(promoteSpaceUrl, options.organization, options.catalog, options.space, stageRes.nameVersion);
  } else {
    url = f(promoteUrl, options.organization, options.catalog, stageRes.nameVersion);
  }
  var opts = reqOptions(_.defaults({
    method: 'POST',
    headers: { accept: 'application/json', 'content-type': 'application/json' },
    url: url,
    json: {},
  }, options));

  return request(opts).then(function(res) {
    res = {
      nameVersion: res.productName + ':' + res.productVersion,
      org: options.organization,
      catalog: options.catalog,
      apiVersions: res.dependents.APIVERSION,
    };
    if (options.space) {
      res.space = options.space;
    }
    return res;
  });
}

var stageUrl = '/v1/orgs/%s/environments/%s/products/%s';
var stageSpaceUrl = '/v1/orgs/%s/environments/%s/spaces/%s/products/%s';
function stage(productId, catalogId, options) {
  var url;
  if (options.space) {
    url = f(stageSpaceUrl, options.organization, catalogId, options.space, productId);
  } else {
    url = f(stageUrl, options.organization, catalogId, productId);
  }
  var opts = reqOptions(_.defaults({
    method: 'POST',
    url: url,
    json: true,
  }, options));

  return request(opts).then(function(res) {
    res = {
      nameVersion: res.productName + ':' + res.productVersion,
      org: options.organization,
      catalog: options.catalog,
    };
    if (options.space) {
      res.space = options.space;
    }
    return res;
  });
}

function getCatalogId(options) {
  return catalogGet(options)
    .then(function(res) {
      return res.id;
    }).catch(function(err) {
      var e = new Error('catalog not found');
      e.code = codes.CATALOG_NOT_FOUND;
      e.err = err;
      e.obj = options;
      return Promise.reject(e);
    });
}

module.exports = publish;

