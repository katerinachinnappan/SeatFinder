/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var codes = require('./codes');
var f = require('util').format;
var get = require('./get');
var reqOptions = require('../req-options');
var request = require('../request');
var validator = require('../opts-validator');

/**
 * @typedef ApiResult
 * @param {object} info
 * ....
 */

/**
 * @typedef ProductResult
 * @param {object} info
 * ....
 */

/**
 * @typedef Result
 * @param <ProductResult> product - optional
 * @param <Array<ApiResult>> apis - optional
 * @param <string> organization
 */

/**
 * Delete an API / product definition(s) in drafts.
 *
 * @param {object} options
 * @param {string} options.organization (required)
 * @param {string} options.name (required) name of the definition to get
 * @param {string} options.version filter the definitions by version
 * @param {string} options.type (api|product) filter the list by definition type
 * @param {boolean} options.productOnly delete only product
 *
 * @throws AMBIGUOUS_REQUEST, NOT_FOUND, PRODUCT_ONLY_NO_PRODUCT
 *
 * @return Promise.<Array<Result>>
 */
function del(options) {
  return validator(options, [ 'name', 'organization' ])
    .then(get)
    .then(function(res) {
      var apis = res.apis;
      var products = res.products;
      if (apis.length === 1 && products.length === 0) {
        return deleteAPI(apis[0], options);
      }
      if (products.length === 1 && apis.length === 0) {
        return deleteProduct(products[0], options);
      }
      if (apis.length === 0 && products.length === 0) {
        var err = new Error('not found');
        err.code = codes.NOT_FOUND;
        err.obj = options;

        return Promise.reject(err);
      }
      err = new Error('ambiguous request');
      err.code = codes.AMBIGUOUS_REQUEST;
      err.obj = {
        apis: apis,
        products: products,
      };
      throw err;
    });
};

var deleteApiUrl = '/v1/apimanager/orgs/%s/apis/%s';
function deleteAPI(api, options) {
  if (options.productOnly) {
    var err = new Error('The productOnly option requires a product to delete.');
    err.code = codes.PRODUCT_ONLY_NO_PRODUCT;
    err.obj = options;

    return Promise.reject(err);
  }
  var url = f(deleteApiUrl, options.organization, api.id);
  var o = reqOptions(_.defaults({
    method: 'DELETE',
    json: true,
    url: url,
    headers: { 'content-type': 'application/json' },
  }, options));
  var ret = {
    apis: [ api ],
    organization: options.organization,
  };
  return request(o).return(ret);
};

var deleteProductUrl = '/v1/orgs/%s/products/%s?%s';
var cascadeParam = 'cascade=true&refType=alias';
function deleteProduct(product, options) {
  var cascade = options.productOnly === true ? '' : cascadeParam;
  var url = f(deleteProductUrl, options.organization, product.id, cascade);
  var o = reqOptions(_.defaults({
    method: 'DELETE',
    json: true,
    url: url,
    headers: { 'content-type': 'application/json' },
  }, options));
  return request(o)
    .then(function(res) {
      res.organization = options.organization;
      return res;
    });
};

module.exports = del;

