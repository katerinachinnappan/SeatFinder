/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client

'use strict';

var _ = require('lodash');
var util = require('util');
var reqOpts = require('./req-options');
var request = require('./request');
var validator = require('./opts-validator');

function list(options) {
  options = options || {};

  return validator(options, [ 'organization' ]).then(function(options) {
    options = reqOpts(_.defaults({
      url: util.format('/v1/sg/orgs/%s/gateways', options.organization),
      json: true,
    }, options));

    return request(options);
  });
}

function get(options) {
  options = options || {};

  return validator(options, [ 'organization', 'gateway' ]).then(function(options) {
    options = reqOpts(_.defaults({
      url: util.format('/v1/sg/orgs/%s/gateways/%s', options.organization, options.gateway),
      json: true,
    }, options));

    return request(options);
  });
}

function create(options) {
  options = options || {};

  return validator(options, [ 'organization', 'name' ]).then(function(options) {
    options = reqOpts(_.defaults({
      url: util.format('/v1/sg/orgs/%s/gateways', options.organization),
      method: 'post',
      json: true,
      body: {
        desc: options.name,
      },
      returnHTTPResponse: true,
    }, options));

    return request(options).then(function(res) {
      if (res.statusCode === 201) {
        return res.body;
      } else {
        throw Error(res.body);
      }
    });
  });
}

function del(options) {
  options = options || {};

  return validator(options, [ 'organization', 'gateway' ]).then(function(options) {
    options = reqOpts(_.defaults({
      url: util.format('/v1/sg/orgs/%s/gateways/%s', options.organization, options.gateway),
      method: 'delete',
      json: true,
      returnHTTPResponse: true,
    }, options));

    return request(options).then(function(res) {
      if (res.statusCode === 204) {
        return;
      } else {
        throw Error(res.body);
      }
    });
  });
}

function set(options) {
  options = options || {};

  return validator(options, [ 'organization', 'gateway' ]).then(function(options) {
    var body = {};

    if (options.hasOwnProperty('status')) {
      body.enabled = options.status === 'enabled';
    }

    if (options.hasOwnProperty('name')) {
      body.desc = options.name;
    }

    options = reqOpts(_.defaults({
      url: util.format('/v1/sg/orgs/%s/gateways/%s', options.organization, options.gateway),
      method: 'put',
      json: true,
      body: body,
    }, options));

    return request(options);
  });
}

module.exports = {
  list: list,
  get: get,
  create: create,
  delete: del,
  set: set,
};

