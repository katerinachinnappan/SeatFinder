// Copyright IBM Corp. 2016. All Rights Reserved.
// Node module: apiconnect-collective-controller-api
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var debug = require('debug')('test');
var fs = require('fs');
var path = require('path');
var strongLibertyJmx = require('apiconnect-collective-jmx');
var serverCommand = require('../lib/server-command');
var tap = require('tap');

tap.test('Test server command', function(t) {

  var jmxServerCommand = strongLibertyJmx.serverCommand;
  var jmx = {
    Endpoint: function Endpoint() {
      return {
        request: function(req, options, callback) {
          var data = {
            value: {
              someData: 'hello',
            },
          };
          var rsp = {
            statusCode: 200,
            body: data,
          };
          process.nextTick(callback.bind(null, null, rsp, data));
        },
      };
    },
  };

  var serverCommandOptions = {
    hostName: 'myhost.com',
    wlpnUserDir: '/path/to/userDir',
    serverName: 'member1',
    host: 'localhost',
    port: '9443',
    user: 'admin',
    password: 'password',
    autoAcceptCertificates: true,
  };

  t.test('testing send request', function(t) {
    serverCommandOptions.jmx = jmx;
    serverCommand.sendRequest(serverCommandOptions,
      jmxServerCommand.SERVER_COMMAND_OPERATIONS.startServer,
      jmxServerCommand.getServerOperation, function(err, retData) {
        t.ifError(err);
        t.equal(retData.someData, 'hello');
        t.end();
      });
  });

  t.test('testing start server', function(t) {
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'ServerCommands%2Ctype%3DServerCommands/operations/startServer');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'hello',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.start(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing stop server', function(t) {
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'ServerCommands%2Ctype%3DServerCommands/operations/stopServer');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'hello',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.stop(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing status of server', function(t) {
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'ServerCommands%2Ctype%3DServerCommands/operations/' +
              'getServerStatus');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'hello',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.status(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing list of server', function(t) {
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/getDescendantData');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                '/a/b/c/d/e/f/g/h': null, '/i/j/k/l/m/n/o/p': null,
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.list(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      var pathToJson = path.resolve(__dirname, 'server-command-test.json');
      var expectedObject = JSON.parse(fs.readFileSync(pathToJson));
      t.similar(retData, expectedObject);
      t.end();
    });
  });

  t.test('testing getData', function(t) {
    serverCommandOptions.path = '/set/path';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/getData');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'I was wondering',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.getData(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing setData', function(t) {
    serverCommandOptions.path = '/set/path';
    serverCommandOptions.data = 'setme=free';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/setData');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'hello, this is me',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.setData(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing getClusterData', function(t) {
    serverCommandOptions.key = 'some_key';
    serverCommandOptions.clusterName = 'testCluster';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/getData');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'I was wondering',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.getClusterData(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing setClusterData', function(t) {
    serverCommandOptions.key = 'some_key';
    serverCommandOptions.clusterName = 'testCluster';
    serverCommandOptions.data = 'random data';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                someData: 'hello, this is me',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.setClusterData(serverCommandOptions, function(err, retData) {
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing listClusterData', function(t) {
    serverCommandOptions.clusterName = 'testCluster';
    delete serverCommandOptions.key;
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/getDescendantData');
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                '/sys.wlpn.internal/cluster/apic.testCluster/env': null,
                '/sys.wlpn.internal/cluster/apic.testCluster/env/testKey':
                  'hi',
                '/sys.wlpn.internal/cluster/apic.testCluster/env/test2':
                  'some_val',
                '/sys.wlpn.internal/cluster/apic.testCluster/env/test3':
                  'some_val',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.listClusterData(serverCommandOptions, function(err, retData) {
      var expectedData = {
        testKey: 'hi',
        test2: 'some_val',
        test3: 'some_val',
      };
      t.same(retData, expectedData, 'expected and returned data should match');
      t.ifError(err);
      t.end();
    });
  });
  t.test('testing setIhsInfo', function(t) {
    var expect = require('./set-ihs-info.json');
    serverCommandOptions.ihsIp = '1.2.3.4';
    serverCommandOptions.ihsPort = '8888';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            debug('req %j', req);
            t.same(req, /delete/.test(req.path) ? expect.del : expect.create);
            t.equal(req.verb, 'POST');
            var rsp = {
              statusCode: 200,
              body: {},
            };
            return callback(null, rsp, {});
          },
        };
      },
    };

    serverCommand.setIhsInfo(serverCommandOptions, function(err, data) {
      t.same(data, 'The data is successfully set in the path.');
      t.ifError(err);
      t.end();
    });
  });

  t.test('testing listIhsInfo', function(t) {
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            var expect = require('./list-ihs-info.json');
            debug('req: %j', req);
            t.same(req, expect);
            t.equal(req.verb, 'POST');
            var data = {
              value: {
                '/sys.wlpn.internal/ihs': null,
                '/sys.wlpn.internal/ihs/1.2.3.4': '8888',
                '/sys.wlpn.internal/ihs/5.6.7.8': '9999',
              },
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.listIhsInfo(serverCommandOptions, function(err, list) {
      t.ifError(err);
      var expect = {
        '1.2.3.4': '8888',
        '5.6.7.8': '9999',
      };
      t.same(list, expect);
      t.end();
    });
  });

  t.test('testing deleteClusterData', function(t) {
    serverCommandOptions.clusterName = 'testCluster';
    serverCommandOptions.key = 'key';
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/delete');
            t.equal(req.verb, 'POST');
            var data = {
              value: true,
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.deleteClusterData(serverCommandOptions,
      function(err, retData) {
        var expectedData = true;
        t.same(retData, expectedData,
          'expected and returned data should match');
        t.ifError(err);
        t.end();
      });
  });

  t.test('testing clearClusterData', function(t) {
    serverCommandOptions.clusterName = 'testCluster';
    delete serverCommandOptions.key;
    serverCommandOptions.jmx = {
      Endpoint: function Endpoint() {
        return {
          request: function(req, options, callback) {
            t.equal(req.path, '/IBMJMXConnectorREST/mbeans/' +
              'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
              'CollectiveRepository%2Ctype%3DCollectiveRepository/operations' +
              '/delete');
            t.equal(req.verb, 'POST');
            var data = {
              value: true,
            };
            var rsp = {
              statusCode: 200,
              body: data,
            };
            return callback(null, rsp, data);
          },
        };
      },
    };

    serverCommand.clearClusterData(serverCommandOptions,
      function(err, retData) {
        var expectedData = true;
        t.same(retData, expectedData,
          'expected and returned data should match');
        t.ifError(err);
        t.end();
      });
  });

  t.end();
});
