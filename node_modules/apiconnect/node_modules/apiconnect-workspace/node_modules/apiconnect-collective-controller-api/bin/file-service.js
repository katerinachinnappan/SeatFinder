#!/usr/bin/env node
// Copyright IBM Corp. 2016. All Rights Reserved.
// Node module: apiconnect-collective-controller-api
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

// This file is created for our internal testing purposes.

var Parser = require('posix-getopt').BasicParser;
var VERSION = require('../package.json').version;
var basename = require('path').basename;
var fs = require('fs');

var optind = 1;
var $0 = basename(process.argv[optind++]);
var command = process.argv[optind++];

var commands = {
  deploy: require('../lib/file-service').deploy,
  download: require('../lib/file-service').download,
  upload: require('../lib/file-service').upload,
  uploadPackage: require('../lib/file-service').uploadPackage,
  uploadScalingPolicy: require('../lib/file-service').uploadScalingPolicy,
  uploadDeployRules: require('../lib/file-service').uploadDeployRules,
  version: version,
};

if (!command || command === 'help') {
  printHelp($0, console.error);
  return exit(1);
}

var commandFn = commands[command];

if (!commandFn) {
  console.error('Unknown action: %s', command);
  printHelp($0, console.error);
  return exit(1);
}

var serverCommandParser = new Parser([
  ':',
  'A(autoAcceptCertificates)',
  'C:(configFile)',
  'H:(host)',
  'N:(instances)',
  'P:(port)',
  'd:(appDir)',
  'f:(srcFile)',
  'k:(keystorePassword)',
  'n:(appPackage)',
  'o:(outputFile)',
  'p:(password)',
  's:(serverName)',
  'u:(username)',
  'c:(clusterName)',
].join(''), process.argv, optind);

var option;
var args = {};

while ((option = serverCommandParser.getopt()) !== undefined) {
  switch (option.option) {
    case 'A': args.autoAcceptCertificates = true; break;
    case 'C': args.configFile = option.optarg; break;
    case 'H': args.host = option.optarg; break;
    case 'N': args.instances = option.optarg; break;
    case 'P': args.port = option.optarg; break;
    case 'd': args.appDir = option.optarg; break;
    case 'f': args.srcFile = option.optarg; break;
    case 'k': args.keystorePassword = option.optarg; break;
    case 'n': args.appPackage = option.optarg; break;
    case 'o': args.outputFile = option.optarg; break;
    case 'p': args.password = option.optarg; break;
    case 's': args.serverName = option.optarg; break;
    case 'u': args.username = option.optarg; break;
    case 'c': args.clusterName = option.optarg; break;
    default:
      console.error('Invalid usage at ' + option.optopt);
      return exit(1);
  }
}

commandFn(args, function(err, result) {
  if (err) {
    if (err.message) {
      console.error('Error: %s', err.message);
    }
    return exit(1);
  }
  if (result) {
    console.log('%s', JSON.stringify(result));
  }
  return exit(0);
});

function version() {
  console.log('%s', VERSION);
  return exit(0);
}

function exit(code) {
  return setImmediate(process.exit, code);
}

function printHelp($0, prn) {
  var USAGE = fs.readFileSync(require.resolve('./file-service.txt'), 'utf-8')
    .replace(/%MAIN%/g, $0)
    .trim();
  prn(USAGE);
}
