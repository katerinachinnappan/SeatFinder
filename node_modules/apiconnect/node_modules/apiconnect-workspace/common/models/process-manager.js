/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-workspace

var loopback = require('loopback');
var apicPm = require('apiconnect-cli-pm');
var lbWorkspace = require('loopback-workspace');
var path = require('path');
var debug = require('debug')('apiconnect-workspace:ProcessManager');

module.exports = function(ProcessManager) {
  var workspace = lbWorkspace.models.Workspace;

  ['start', 'restart'].map(function(fn) {
    ProcessManager[fn] = function(cb) {
      workspace.getWorkspace(function(err, projectDir) {
        if (err) return cb(err);

        debug(fn, projectDir, apicPm[fn]);
        apicPm.start(projectDir)
          .then(function(resp) {
            debug(fn, resp);
            cb(null, resp);
          }, function(err) {
            debug('failed', fn, err);
            cb(err);
          });
      });
    };

    loopback.remoteMethod(ProcessManager[fn], {
      http: {verb: 'post', path: '/' + fn},
      returns: {arg: 'status', type: 'object'}
    });
  });

  ProcessManager.stop = function(cb) {
    workspace.getWorkspace(function(err, projectDir) {
      if (err) return cb(err);

      debug('stop', projectDir);
      apicPm.stop({dir: projectDir})
        .then(function(resp) {
          debug('stop', resp);
          cb(null, resp);
        });
    });
  };

  loopback.remoteMethod(ProcessManager.stop, {
    http: {verb: 'post', path: '/stop'},
    returns: {arg: 'status', type: 'object'}
  });

  ProcessManager.processList = function(cb) {
    workspace.getWorkspace(function(err, projectDir) {
      if (err) return cb(err);

      var appName = path.basename(projectDir);
      var options = {
        dir: projectDir
      };

      debug('ls', appName, options);
      apicPm.ls(options).then(function(processes) {
        cb(null, processes);
      });
    });
  };

  loopback.remoteMethod(ProcessManager.processList, {
    http: {verb: 'get', path: '/list'},
    returns: {arg: 'processes', type: 'array'}
  });

  ProcessManager.logs = function(service, cb) {
    debug('logs', service);
    apicPm.logs(service).then(function(resp) {
      resp.get(cb);
    });
  };

  loopback.remoteMethod(ProcessManager.logs, {
    accepts: [{arg: 'service', type: 'string'}],
    http: {verb: 'get', path: '/logs'},
    returns: {arg: 'logs', type: 'string'}
  });
};

