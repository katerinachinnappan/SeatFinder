/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-workspace

var PassThrough = require('stream').PassThrough;
var apicLoopback = require('apiconnect-cli-loopback');
var debug = require('debug')('apiconnect-workspace:project');
var lbWorkspace = require('loopback-workspace');
var loopback = require('loopback');
var path = require('path');

module.exports = function(Project) {
  var workspace = lbWorkspace.models.Workspace;

  Project.createFromTemplate = function(templateName, name, basePath, loopbackVersion, cb) {
    var stream = new PassThrough({ objectMode: true });
    var writeable = true;

    stream.destroy = function() {
      stream.removeAllListeners('error');
      stream.removeAllListeners('end');
      writeable = false;
      stream = null;
    };

    stream.on('error', function() {
      writeable = false;
    });

    stream.on('end', function() {
      writeable = false;
    });

    process.nextTick(function() {
      cb(null, stream);
    });

    apicLoopback.createFromTemplate({
      name: name,
      template: templateName,
      loopbackVersion: loopbackVersion,
      dir: path.join(basePath, name),
      outstream: stream,
      errstream: stream,
      npmLogPipe: true,
      npmLogLevel: 'http',
    }).then(function(projectDir) {
      stream.write({ projectDir: projectDir, done: true });
    }).catch(function(err) {
      stream.write({ error: (err && err.message) || err || 'Something failed', done: true });
    }).finally(function() {
      stream.end();
    });
  };

  Project.remoteMethod('createFromTemplate', {
    description: 'Create loopback project from template.',
    accessType: 'READ',
    http: [
      { verb: 'post', path: '/createFromTemplate' },
      { verb: 'get', path: '/createFromTemplate' },
    ],
    accepts: [
      { arg: 'templateName', type: 'string' },
      { arg: 'name', type: 'string' },
      { arg: 'basePath', type: 'string' },
      { arg: 'loopbackVersion', type: 'string' }
    ],
    returns: {
      arg: 'changes',
      type: 'ReadableStream',
      json: true,
    },
  });

  Project.addDependency = function(moduleName, projectPath, cb) {
    var stream = new PassThrough({ objectMode: true });
    var writeable = true;

    stream.destroy = function() {
      stream.removeAllListeners('error');
      stream.removeAllListeners('end');
      writeable = false;
      stream = null;
    };

    stream.on('error', function() {
      writeable = false;
    });

    stream.on('end', function() {
      writeable = false;
    });

    process.nextTick(function() {
      cb(null, stream);
    });

    apicLoopback.npmInstall({
      type: 'add',
      module: moduleName,
      dir: path.resolve(projectPath),
      outstream: stream,
      errstream: stream,
      npmLogPipe: true,
      npmLogLevel: 'http',
    }).then(function(projectDir) {
      stream.write({ projectDir: projectDir, done: true });
    }).catch(function(err) {
      stream.write({ error: (err && err.message) || err || 'Something failed', done: true });
    }).finally(function() {
      stream.end();
    });
  };

  Project.remoteMethod('addDependency', {
    description: 'Add a dependency to a loopback project.',
    accessType: 'READ',
    http: [
      { verb: 'post', path: '/addDependency' },
      { verb: 'get', path: '/addDependency' },
    ],
    accepts: [
      { arg: 'moduleName', type: 'string' },
      { arg: 'projectPath', type: 'string' },
    ],
    returns: {
      arg: 'changes',
      type: 'ReadableStream',
      json: true,
    },
  });

  Project.getAvailableTemplates = function(cb) {
    apicLoopback.getTemplateList().then(function(templates) {
      cb(null, templates);
    }).catch(cb);
  };

  Project.remoteMethod('getAvailableTemplates', {
    http: { verb: 'get', path: '/templates' },
    returns: { arg: 'templates', type: 'array' },
  });

  Project.exportSwagger = function (cb) {
    workspace.getWorkspace(function(err, projectDir) {
      if (err) return cb(err);

      apicLoopback.genApiAndProduct(projectDir)
        .then(function() {
          debug('export swagger succeed');
          cb(null, projectDir);
        })
        .catch(function(err) {
          debug('export swagger failed:', err);
          cb(err);
        });
    });
  };

  Project.remoteMethod('exportSwagger', {
    http: {verb: 'post', path: '/export-swagger'},
    returns: {arg: 'result', type: 'string'}
  });
};

