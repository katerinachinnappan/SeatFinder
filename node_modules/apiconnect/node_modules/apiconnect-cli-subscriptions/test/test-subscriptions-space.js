/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-apim-client
'use strict';

var f = require('util').format;
var testSupport = require('apiconnect-cli-test-support');
var nock = require('nock');
var path = require('path');

var moduleRoot = path.resolve(__dirname, '..');
var apic = testSupport.apic(moduleRoot);
var auth = testSupport.auth(apic);
var conf = testSupport.config;
var logger = testSupport.logger;
var test = testSupport.stackerTest;

var testCatalog = 'hspace';
var testSpace = 'sp1';
var testOrg = 'climbon';
var subscriptionName = 'subscr_apimgmt_test_app_climb-on_c3';
var product = 'climb-on';
var prodVersion = 'climb-on:1.0.0';
var prodVersionPlan = 'climb-on:1.0.0:default';

function startMockServer(server, organization, catalog, space, prod, subscriptionId) {
  nock('https://' + server)
    .get('/v1/orgs/' + organization + '/environments/' + catalog + '/spaces/' + space + '/subscriptions')
    .reply(200, [
      {
        application: {
          name: 'apimgmt_test_app',
          appName: 'APIMGMT_TEST_APP',
          appId: '57ea9f3ee4b08413031e3b80',
          appDescription: 'Test application',
          clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
          enabled: true,
          state: 'ACTIVE',
          testApp: true,
          allowToFeatureApp: false,
          orgId: '57ea9f3be4b08413031e3b60',
          appCredentials: [
            {
              id: '57ea9f3ee4b08413031e3b81',
              clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
              description: null,
            },
          ],
        },
        product: {
          id: '57eaba05e4b08413031e3de4',
          name: 'climb-on',
          title: 'Climb On',
          version: '1.0.0',
          state: 'published',
        },
        plan: {
          id: 'climb-on:1.0.0:default',
          name: 'default',
          title: 'Default Plan',
        },
        spaces: [
          {
            id: '57eab9d1e4b08413031e3dd9',
            name: 'sp1',
            title: 'sp1',
          },
        ],
        id: '57eabd15e4b08413031e3ee4',
        name: 'subscr_apimgmt_test_app_climb-on_c3',
        approved: true,
        createdAt: '2016-09-27T18:40:21.274+0000',
        updatedAt: '2016-09-27T18:40:21.274+0000',
      },
    ])
    .get('/v1/orgs/' + organization + '/environments/' + catalog + '/spaces/' +
      space + '/subscriptions/?product=' + prod)
    .reply(200, [
      {
        application: {
          name: 'apimgmt_test_app',
          appName: 'APIMGMT_TEST_APP',
          appId: '57ea9f3ee4b08413031e3b80',
          appDescription: 'Test application',
          clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
          enabled: true,
          state: 'ACTIVE',
          testApp: true,
          allowToFeatureApp: false,
          orgId: '57ea9f3be4b08413031e3b60',
          appCredentials: [
            {
              id: '57ea9f3ee4b08413031e3b81',
              clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
              description: null,
            },
          ],
        },
        product: {
          id: '57eaba05e4b08413031e3de4',
          name: 'climb-on',
          title: 'Climb On',
          version: '1.0.0',
          state: 'published',
        },
        plan: {
          id: 'climb-on:1.0.0:default',
          name: 'default',
          title: 'Default Plan',
        },
        spaces: [
          {
            id: '57eab9d1e4b08413031e3dd9',
            name: 'sp1',
            title: 'sp1',
          },
        ],
        id: '57eabd15e4b08413031e3ee4',
        name: 'subscr_apimgmt_test_app_climb-on_c3',
        approved: true,
        createdAt: '2016-09-27T18:40:21.274+0000',
        updatedAt: '2016-09-27T18:40:21.274+0000',
      },
    ])
    .get('/v1/orgs/' + organization + '/environments/' + catalog + '/spaces/' +
      space + '/subscriptions/' + subscriptionId)
    .reply(200, {
      application: {
        name: 'apimgmt_test_app',
        appName: 'APIMGMT_TEST_APP',
        appId: '57ea9f3ee4b08413031e3b80',
        appDescription: 'Test application',
        clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
        enabled: true,
        state: 'ACTIVE',
        testApp: true,
        allowToFeatureApp: false,
        orgId: '57ea9f3be4b08413031e3b60',
        appCredentials: [
          {
            id: '57ea9f3ee4b08413031e3b81',
            clientId: '47604d0b-4a2d-4c10-aaa2-4959e0a479ae',
            description: null,
          },
        ],
      },
      product: {
        id: '57eaba05e4b08413031e3de4',
        name: 'climb-on',
        title: 'Climb On',
        version: '1.0.0',
        state: 'published',
      },
      plan: {
        id: 'climb-on:1.0.0:default',
        name: 'default',
        title: 'Default Plan',
      },
      spaces: [
        {
          id: '57eab9d1e4b08413031e3dd9',
          name: 'sp1',
          title: 'sp1',
        },
      ],
      id: '57eabd15e4b08413031e3ee4',
      name: 'subscr_apimgmt_test_app_climb-on_c3',
      approved: true,
      createdAt: '2016-09-27T18:40:21.274+0000',
      updatedAt: '2016-09-27T18:40:21.274+0000',
    });
}

test('setup', function(t) {
  return auth.login();
});

test('subscriptions', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace);
  logger.clear();
  return apic(f('subscriptions --scope space --space %s -c %s -o %s -s %s',
    testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output.length, 1);
      t.equals(output[0],
        f('%s in APIMGMT_TEST_APP for climb-on:1.0.0:default in climbon:hspace:sp1', subscriptionName));
    });
});

test('subscriptions:list', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace);
  logger.clear();
  return apic(f('subscriptions:list --scope space --space %s -c %s -o %s -s %s',
    testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output.length, 1);
      t.equals(output[0],
        f('%s in APIMGMT_TEST_APP for climb-on:1.0.0:default in climbon:hspace:sp1', subscriptionName));
    });
});

test('subscriptions:list using product', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, product);
  logger.clear();
  return apic(f('subscriptions:list -p %s --scope space --space %s -c %s -o %s -s %s',
    product, testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output.length, 1);
      t.equals(output[0],
        f('%s in APIMGMT_TEST_APP for climb-on:1.0.0:default in climbon:hspace:sp1', subscriptionName));
    });
});

test('subscriptions:list using product & version', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, prodVersion);
  logger.clear();
  return apic(f('subscriptions:list -p %s --scope space --space %s -c %s -o %s -s %s',
    prodVersion, testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output.length, 1);
      t.equals(output[0],
        f('%s in APIMGMT_TEST_APP for climb-on:1.0.0:default in climbon:hspace:sp1', subscriptionName));
    });
});

test('subscriptions:list using product & version & plan', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, prodVersionPlan);
  logger.clear();
  return apic(f('subscriptions:list -p %s --scope space --space %s -c %s -o %s -s %s',
    prodVersionPlan, testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output.length, 1);
      t.equals(output[0],
        f('%s in APIMGMT_TEST_APP for climb-on:1.0.0:default in climbon:hspace:sp1', subscriptionName));
    });
});

test('negative: subscriptions:list [no catalog]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace);
  logger.clear();
  return apic(f('subscriptions:list --scope space --space %s -o %s -s %s',
    testSpace, testOrg, conf.getServer()))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --catalog option is required.');
    });
});

test('negative: subscriptions:list [no org]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace);
  logger.clear();
  return apic(f('subscriptions:list --scope space --space %s -c %s -s %s',
    testSpace, testCatalog, conf.getServer()))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --organization option is required.');
    });
});

test('negative: subscriptions:list [no server]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace);
  logger.clear();
  return apic(f('subscriptions:list --scope space --space %s -c %s -o %s',
    testSpace, testCatalog, testOrg))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --server option is required.');
    });
});

test('subscriptions:get', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, null, subscriptionName);
  logger.clear();
  return apic(f('subscriptions:get %s --scope space --space %s -c %s -o %s -s %s',
    subscriptionName, testSpace, testCatalog, testOrg, conf.getServer()))
    .then(function() {
      var output = logger.values();
      t.equals(output[0], f('name: %s', subscriptionName));
      t.equals(output[1], 'app: APIMGMT_TEST_APP');
      t.equals(output[2], 'product: climb-on');
      t.equals(output[3], 'space: sp1');
      t.equals(output[4], 'catalog: hspace');
      t.equals(output[5], 'organization: climbon');
    });
});

test('negative: subscriptions:get [no catalog]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, null, subscriptionName);
  logger.clear();
  return apic(f('subscriptions:get %s --scope space --space %s -o %s -s %s',
    subscriptionName, testSpace, testOrg, conf.getServer()))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --catalog option is required.');
    });
});

test('negative: subscriptions:get [no org]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, null, subscriptionName);
  logger.clear();
  return apic(f('subscriptions:get %s --scope space --space %s -c %s -s %s',
    subscriptionName, testSpace, testCatalog, conf.getServer()))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --organization option is required.');
    });
});

test('negative: subscriptions:get [no server]', function(t) {
  startMockServer(conf.getServer(), testOrg, testCatalog, testSpace, null, subscriptionName);
  logger.clear();
  return apic(f('subscriptions:get %s --scope space --space %s -c %s -o %s',
    subscriptionName, testSpace, testCatalog, testOrg))
    .then(t.fail)
    .catch(function(err) {
      t.ok(err);
      t.equals(err.message, 'The --server option is required.');
    });
});

