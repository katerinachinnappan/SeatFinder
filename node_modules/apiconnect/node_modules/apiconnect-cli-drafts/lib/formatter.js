/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-drafts

var _ = require('lodash');
var f = require('util').format;
var g = require('strong-globalize')();
var logger = require('apiconnect-cli-logger');
var path = require('path');

function clear(results) {
  results.forEach(function(result) {
    var nv = f('%s:%s', result.name, result.version);
    var org = result.organization;
    // ideally type would be in lower!
    if (result.type === 'api' || result.type === 'API') {
      logger.writeln(g.f('Deleted %s {{API}} definition from %s:{{drafts}}', nv, org));
    } else if (result.type === 'product') {
      logger.writeln(g.f('Deleted %s product definition from %s:{{drafts}}', nv, org));
    }
  });
};

function del(result) {
  if (result.product) {
    logger.writeln(g.f('Deleted %s:%s product definition from %s:{{drafts}}',
      result.product.info.name, result.product.info.version, result.organization));
  }
  if (result.apis) {
    result.apis.forEach(function(api) {
      logger.writeln(g.f('Deleted %s:%s {{API}} definition from %s:{{drafts}}',
        api.info['x-ibm-name'], api.info.version, result.organization));
    });
  }
};

function get(result) {
  result.apis.forEach(formatGetApi.bind(null, result.organization));
  result.products.forEach(formatGetProducts.bind(null, result.organization));
}

function formatGetApi(organization, api) {
  logger.writeln(g.f('type: {{API}}'));
  logger.writeln(g.f('name: %s', api.info['x-ibm-name']));
  logger.writeln(g.f('version: %s', api.info.version));
  logger.writeln(g.f('title: %s', api.info.title));
  logger.writeln(g.f('basepath: %s', api.basePath));
  var relatives = api.related.map(function(relative) {
    return f('%s:%s', relative.info.name, relative.info.version);
  });
  logger.writeln(g.f('products: %s', relatives.join(' ')));
  logger.writeln(g.f('organization: %s', organization));
}

function formatGetProducts(organization, product) {
  logger.writeln(g.f('type: {{Product}}'));
  logger.writeln(g.f('name: %s', product.info.name));
  logger.writeln(g.f('version: %s', product.info.version));
  logger.writeln(g.f('title: %s', product.info.title));
  var relatives = _.values(product.apis).map(function(api) {
    return api.name;
  });
  logger.writeln(g.f('apis: %s', relatives.join(' ')));
  logger.writeln(g.f('organization: %s', organization));
}

function list(results) {
  results.forEach(function(result) {
    var type = result.type;
    var name = result.name;
    var version = result.version;
    var org = result.organization;
    if (type === 'api') {
      type = 'API';
    }
    logger.writeln(g.f('%s %s definition in %s:{{drafts}}', f('%s:%s', name, version), type, org));
  });
};

function publish(result) {
  stage(result);
  if (result.published) {
    var nameVersion = result.published.nameVersion;
    var org = result.published.org;
    var catalog = result.published.catalog;
    var space = result.published.space;
    if (space) {
      catalog = f('%s:%s', catalog, space);
    }
    logger.writeln(g.f('Published %s to %s:%s', nameVersion, org, catalog));
    // need to format stage and publish
    result.published.apiVersions.forEach(function(api) {
      var invokeUrl = '';// TODO: Not implemented on the backend yet.
      logger.writeln(g.f('[%s %s:%s] %s', nameVersion, api.apiName, api.apiVersion, invokeUrl));
    });
  }
}

function pull(result) {
  result.forEach(function(res) {
    if (res.type === 'api') {
      logger.writeln(g.f('Pulled %s:%s {{API}} definition from %s:{{drafts}} [%s]',
        res.name, res.version, res.organization, path.basename(res.file)));
    } else if (res.type === 'wsdl') {
      logger.writeln(g.f('Pulled %s:%s {{API}} {{WSDL}} definition from %s:{{drafts}} [%s]',
        res.name, res.version, res.organization, path.basename(res.file)));
    } else {
      logger.writeln(g.f('Pulled %s:%s product definition from %s:{{drafts}} [%s]',
        res.name, res.version, res.organization, path.basename(res.file)));
    }
  });
};

function push(results) {
  results.forEach(function(res) {
    if (res.api === true) {
      logger.writeln(g.f('Pushed %s {{API}} definition to %s:{{drafts}} [%s:%s]',
        path.basename(res.filename), res.org, res.name, res.version));
    } else {
      logger.writeln(g.f('Pushed %s product definition to %s:{{drafts}} [%s:%s]',
        path.basename(res.filename), res.org, res.name, res.version));
    }
  });
};

function stage(result) {
  if (result.staged) {
    var staged = result.staged;
    var nameVersion = staged.nameVersion;
    var org = staged.org;
    var catalog = staged.catalog;
    var space = staged.space;
    if (space) {
      catalog = f('%s:%s', catalog, space);
    }
    logger.writeln(g.f('Staged %s to %s:%s', nameVersion, org, catalog));
  }
};

module.exports = {
  clear: clear,
  delete: del,
  get: get,
  list: list,
  publish: publish,
  pull: pull,
  push: push,
  stage: stage,
};

