/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-mgmt-lite-datapower

'use strict';

const Promise = require('bluebird');
const docker = require('./lib/docker');
const pm = require('./lib/pmclient');
const api = require('./lib/server-api');
const logger = require('./common/logger');
const cluster = require('cluster');
const getIPAddress = require('./lib/get-host-ip-address');

if (!process.env.PORT) {
  throw new Error('env PORT must be set');
}
if (!process.env.STRONG_PM_URL) {
  logger.warn('env STRONG_PM_URL must be set');
}
if (!process.env.PROJECT_NAME) {
  throw new Error('env PROJECT_NAME must be set');
}
if (!process.env.PROJECT_DIR) {
  throw new Error('env PROJECT_DIR must be set');
}

pm.defaults(process.env.STRONG_PM_URL, process.env.PORT);

let project = process.env.PROJECT_NAME;

process.env.APICONNECT_MGMT_LITE_PORT_9443 = `${process.env.PORT}:9443`;
process.env.APICONNECT_MGMT_LITE_PROJECT_DIR = process.env.PROJECT_DIR;
process.env.APICONNECT_MGMT_LITE_DOCKER_TAG = require('./package.json').version;

const mainStart = () => {
  logger.log(`Starting DataPower API Gateway on port "${process.env.PORT}"`);
  logger.log(`Loading project "${project}" from "${process.env.PROJECT_DIR}"`);

  let result = null;

  return docker.initialize()
    .then(() => {
      let url = process.env.TARGET_URL;
      if (url) {
        process.env.TARGET_URL =
          url.replace(/^(http|https):\/\/(.*):(.*)/, (match, s, h, p) => {
            return s + '://' + getIPAddress() + ':' + p;
          });
      }
    })
    .then(() => docker.compose.up(project))
    .then(() => docker.details(project))
    .then(details => {
      result = details;
      return api.start(details)
        .then(pm.updatePort({clear: true}))
        .then(() => docker.logs(project));
    })
    .then(logstream => {
      let regex = /DataPower API Connect Gateway is on-line/;
      return new Promise((resolve, reject) => {
        let timeout = setTimeout(() => {
          let err = new Error('Timed out waiting for the gateway to configure');
          reject(err);
        }, 1000 * 60 * 10);
        logstream.on('data', data => {
          let str = data.message;
          console.log(str);
          if (regex.test(str)) {
            clearTimeout(timeout);
            resolve();
          }
        });
      });
    })
    .then(() => result);
};

const mainWait = () => new Promise((resolve, reject) => {
  process.on('SIGINT', resolve);
  process.on('SIGHUP', resolve);
  process.on('SIGTERM', resolve);
  process.removeAllListeners('disconnect');
  process.on('disconnect', resolve);
  process.on('message', msg => {
    if (msg.cmd === 'CLUSTER_CONTROL_shutdown')
      resolve(msg);
  });
});

const shutdown = (msg) => {
  logger.log(`Stopping DataPower API Gateway for project "${project}"`);
  let promise = docker.compose.downDetached(project);
  if (msg && msg.cmd && msg.cmd === 'CLUSTER_CONTROL_shutdown') {
    process.removeAllListeners('message');
    promise = promise.then(() => {
      return new Promise(resolve => {
        process.on('message', msg => {
          if (msg.cmd === 'CLUSTER_CONTROL_shutdown_gracefully') {
            resolve();
          }
        });
      });
    });
  }
  return promise;
};

mainWait()
  .then(shutdown)
  .then(api.stop)
  .then(() => {
    // disconnect to indicate intensional exit
    if (cluster.isWorker) cluster.worker.disconnect();
    process.exit(0);
  });

mainStart()
  .then(() => {
    if (process.env.STRONG_PM_URL) {
      return pm.updatePort();
    }
  })
  .catch(err => {
    logger.error(err.message && err.message.trim() || err);
    return shutdown().then(() => {
      // disconnect to indicate intensional exit
      if (cluster.isWorker) cluster.worker.disconnect();
      process.exit(1);
    });
  });
