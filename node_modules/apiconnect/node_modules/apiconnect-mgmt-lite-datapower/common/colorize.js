/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

const ESCAPES = {
  reset: '0',

  bold: '1',
  dim: '2',
  italic: '3',
  underline: '4',
  inverse: '7',
  hidden: '8',
  strikethrough: '9',

  black: '30',
  red: '31',
  green: '32',
  yellow: '33',
  blue: '34',
  magenta: '35',
  cyan: '36',
  white: '37',
  gray: '90',
  grey: '90',

  bgBlack: '40',
  bgRed: '41',
  bgGreen: '42',
  bgYellow: '43',
  bgBlue: '44',
  bgMagenta: '45',
  bgCyan: '46',
  bgWhite: '47',
};

function colorize (str) {
  let colors = [];
  let saved = false;

  function clone (color) {
    let cloned = colorize(str);
    colors.forEach(c => {
      cloned = cloned[c];
    });
    return cloned[color];
  }

  function colorizer (newstr) {
    let codes = colors.map(c => ESCAPES[c]);
    return `\x1b[${codes.join(';')}m${newstr || str || ''}\x1b[0m`;
  }

  Object.defineProperty(colorizer, 'save', {
    value: function () {
      saved = true;
      return colorizer;
    }
  });

  for (let color of Object.keys(ESCAPES)) {
    Object.defineProperty(colorizer, color, {
      get: function () {
        if (saved)
          return clone(color);
        colors.push(color);
        return colorizer;
      }
    });
  }

  return colorizer;
};

const colorizeDebug = colorize().bold.save();
colorize.debug = str => colorizeDebug(str);

const colorizeInfo = colorize().blue.bold.save();
colorize.info = str => colorizeInfo(str);
colorize.notice = str => colorizeInfo(str);

const colorizeWarn = colorize().magenta.bold.save();
colorize.warn = str => colorizeWarn(str);

const colorizeError = colorize().red.bold.save();
colorize.error = str => colorizeError(str);

const colorizeCritical = colorize().bgRed.bold.save();
colorize.critical = str => colorizeCritical(str);

module.exports = colorize;

