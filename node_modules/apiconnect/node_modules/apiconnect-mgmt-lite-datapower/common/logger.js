/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-mgmt-lite-datapower

'use strict';

const format = require('util').format;
const colorize = require('./colorize');
const ll = require('./log-level');

const LOG_LEVELS = ll.LOG_LEVELS;
let LOG_LEVEL  = ll.LOG_LEVEL;

const LOG_TIMESTAMP = process.env.LOG_TIMESTAMP === 'true' || process.env.LOG_TIMESTAMP === '1';
const LOG_ANSI_STYLES = process.env.LOG_ANSI_STYLES === 'true' || process.env.LOG_ANSI_STYLES === '1';

function copyargs () {
  const arglen = arguments.length;
  const argarr = new Array(arglen);
  for (let i = 0; i < arglen; i++) {
    argarr[i] = arguments[i];
  }
  return argarr;
}

const timestamp = () => (new Date()).toISOString().replace(/[-:]/g, '');

const prefix = LOG_TIMESTAMP === true ?
  level => [timestamp(), `[apim-lite][${level}]`] :
  level => [`[apim-lite][${level}]`];

const style = LOG_ANSI_STYLES === true ?
  (level, msg) => colorize[level](msg) :
  (level, msg) => msg;

function log (level, msgargs) {
  if (LOG_LEVELS[level] >= LOG_LEVEL) {
    let args = prefix(level).concat(msgargs);
    let msg  = format.apply(null, args);
    console.log(style(level, msg));
  }
}

const logger = {
  debug: function () {
    let args = copyargs.apply(null, arguments);
    log('debug', args);
  },
  log: function () {
    let args = copyargs.apply(null, arguments);
    log('info', args);
  },
  warn: function () {
    let args = copyargs.apply(null, arguments);
    log('warn', args);
  },
  error: function () {
    let args = copyargs.apply(null, arguments);
    log('error', args);
  }
};

module.exports = logger;

