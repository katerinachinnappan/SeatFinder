/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

let Promise  = require('bluebird');
let fs       = Promise.promisifyAll(require('fs'));
let Path     = require('path');
let YAML     = require('js-yaml');
let logger   = require('./logger');

function Config(configDir) {
  this.localConfigPath = Path.resolve(configDir, '.apiconnect/config');
  this.config = {};
}

Config.prototype.listConfigs = function () {
  return [this.localConfigPath];
};

Config.prototype.genOAuthRedirectUri = function () {
  const APIC_DEV_HOSTIP = process.env.IBM_APICONNECT_APIC_DEV_HOSTIP;
  let uri = this.config['oauth-redirect-uri'] || 'https://localhost/oauth-redirect-uri';
  if (APIC_DEV_HOSTIP)
    uri = uri.replace('$(catalog.apic-dev.hostip)', APIC_DEV_HOSTIP);
  return uri;
};

Config.prototype.getOAuthClientType = function () {
  let type = this.config['oauth-client-type'] || 'confidential';
  if (type !== 'confidential' && type !== 'public') {
    logger.debug(`Invalid OAuth client type in configuration: "${type}"`,
                 'Valid options are "confidential" (default) and "public".');
    logger.debug('Using default OAuth client type, "confidential", instead.');
    type = 'confidential';
  }
  return type;
};

Config.prototype.useExperimental = function () {
  return this.config['datapower-api-gateway-experimental'] === 'true';
};

const attemptLoadConfig = configPath => fs.readFileAsync(configPath, 'utf8')
  .then(data => {
    try {
      return YAML.safeLoad(data || '', { json: true });
    }
    catch (err) {
      logger.debug('Config file', configPath, 'could not be parsed:', err);
      return null;
    }
  })
  .catch(err => {
    if (err.code === 'ENOENT') {
      logger.debug(`Config file ${configPath} does not exist`);
    } else {
      logger.debug('Config file', configPath, 'could not be loaded:', err);
    }
  });

Config.prototype.load = function () {
  // we should be using 'apiconnect-config' but i cannot
  // force myself to install its 100s of dependencies
  return attemptLoadConfig(this.localConfigPath)
    .then(config => {
      this.config = config || {};
      if (this.config['oauth-redirect-uri']) {
        logger.log('Using OAuth Redirect URI:', this.config['oauth-redirect-uri']);
      }
      return this;
    });
};

module.exports = Config;
