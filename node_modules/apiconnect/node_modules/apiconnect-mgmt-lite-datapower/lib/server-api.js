/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

const Promise = require('bluebird');
const Path = require('path');
const fs = require('fs');
const http = require('http');
const express = require('express');
const bodyParser = require('body-parser');
const docker = require('./docker');
const request = require('request').defaults({ strictSSL: false });

let app = express();
let containerNames = [];

function waitUntilShutdown() {
  return docker.listByName(containerNames)
    .then(result => {
      if (result.length > 0) {
        return Promise.delay(1000).then(waitUntilShutdown);
      }
    });
}

app.get('/api/prepare-for-shutdown', (req, res) => {
  process.emit('message', { cmd: 'CLUSTER_CONTROL_shutdown' });
  waitUntilShutdown()
    .then(() => res.sendStatus(200))
    .then(() => process.emit('message', {cmd: 'CLUSTER_CONTROL_shutdown_gracefully'}));
});

let server = null;
exports.start = (details) => new Promise((resolve, reject) => {
  let host = docker.config().DOCKER_HOST[0];
  containerNames = details.containers.map(d => d.Names[0]);
  app.get('/api/apis', (req, res) => {
    request.get(`https://${host}:${details.port2443}/v1/catalogs/1/apis`).pipe(res);
  });
  server = http.createServer(app);
  server.listen(0, (err) => {
    if (err) reject(err);
  });
  server.on('listening', () => {
    let dotds = {
      snapshot: process.env.PROJECT_DIR,
      host: server.address().address,
      port: server.address().port,
      datapower: true
    };
    if (dotds.host === '::') {
      dotds.host = '127.0.0.1';
    }
    let file = Path.resolve(process.env.PROJECT_DIR, '.datastore');
    fs.writeFileSync(file, JSON.stringify(dotds));
    resolve(server);
  });
});

exports.stop = () => {
  containerNames = [];
  try {
    let file = Path.resolve(process.env.PROJECT_DIR, '.datastore');
    fs.unlinkSync(file);
  } catch (e) {}
  if (server) {
    server.close();
    server = null;
  }
};

