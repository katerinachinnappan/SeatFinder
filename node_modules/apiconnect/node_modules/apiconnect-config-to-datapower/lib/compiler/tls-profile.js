/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-config-to-datapower

'use strict';
const _ = require('lodash');
const dpciphers = require('./ciphers');
const coname = require('./coname');

module.exports = exports = function(tlsProfile, options) {
  let _name = coname.tlsProfile(options, tlsProfile.name);
  function SSLClientProfile() {
    this.id = tlsProfile.id;
    this._name = _name;
    this.protocols = tlsProfile.protocols.map(p =>
      p.replace(/TLSv1([12]?)/, function(match, g1) {
        return `TLSv1d${g1 || '0'}`;
      })).join('+');

    this.ciphers = dpciphers.defaults();
    this.trustStores = [];
    tlsProfile.certs.forEach(c => {
      switch (c['cert-type']) {
        case 'PUBLIC':
          this.publicKeyCert = new Certificate(c);
          break;
        case 'CLIENT':
          this.trustStores.push(new Certificate(c));
          break;
      }
    });
    if (tlsProfile['private-key']) {
      this.privateKey = new PrivateKey(tlsProfile['private-key']);
    }
    this.mutualAuth =
      tlsProfile['mutual-auth'] && this.trustStores.length > 0 ?  true : false;
    this.useSNI = true;
    if (tlsProfile['features']) {
      // Use SNI if tlsProfile['features'] does not have 'DISABLE_SNI'
      this.useSNI = tlsProfile['features'].indexOf('DISABLE_SNI') === -1;
    }
  }

  function PrivateKey(k) {
    this._name = `${_name}-key`;
    this.url = `cert:///${this._name}.pem`;
    this.key = k;
  }

  let certCount = 0;
  function Certificate(c) {
    this._name = `${_name}-ca-${certCount++}`;
    this.url = `cert:///${this._name}.pem`;
    this.id = c['cert-id'];
    this.type = c['cert-type'];
    this.name = c.name;
    this.cert = c.cert;
  }

  return new SSLClientProfile();
};
