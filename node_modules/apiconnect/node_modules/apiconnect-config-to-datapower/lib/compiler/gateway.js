/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

// Node module: apiconnect-config-to-datapower

'use strict';

module.exports = exports = (options) => {
  function APIGateway() {
    this._name = options.gatewayName;
    this.collections = (options.collections || []).map(c => {
      return {_name: c};
    });

    (options.protocols || []).forEach(p => {
      let m = p.match(/^http(s)?$/i);

      if (m) {
        if (m[1]) {
          this.fshHttps = new HttpsFrontSideHandler();
        } else {
          this.fshHttp = new HttpFrontSideHandler();
        }
      }
    });
  }

  function HttpFrontSideHandler() {
    this.port = (options.http && options.http.port) || 2090;
    this._name = `${options.gatewayName}_http_${this.port}`;
  }

  function HttpsFrontSideHandler() {
    let prefix = `${options.gatewayName}_https`;

    if (!options.https || !options.https.key || !options.https.cert) {
      throw new Error('Key/cert not provided for the https front side handler');
    }

    this.port = (options.https && options.https.port) || 2091;
    this._name = `${prefix}_${this.port}`;

    this.cert = {
      _name: `${prefix}_cert`,
      url: `cert:///${prefix}_cert.pem`,
      password: options.https.cert.password && {
        _name: `${prefix}_cert_passwd`,
        password: options.https.cert.password,
      },
      ignoreExpiration: options.https.cert.ignoreExpiration,
      cert: options.https.cert.data,
    };

    this.key = {
      _name: `${prefix}_key`,
      url: `cert:///${prefix}_key.pem`,
      password: options.https.key.password && {
        _name: `${prefix}_key_passwd`,
        password: options.https.key.password,
      },
      key: options.https.key.data,
    };

    this.idcred = {
      _name: `${prefix}_idcred`,
    };

    this.sslServer = {
      _name: `${prefix}_server`,
    };
  }

  return new APIGateway();
};
