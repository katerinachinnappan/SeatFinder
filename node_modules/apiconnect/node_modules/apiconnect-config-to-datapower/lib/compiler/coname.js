/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

// Node module: apiconnect-config-to-datapower

'use strict';

const crypto = require('crypto');

function hash(options, data) {
  data = data ?
    `${options.catalog.organization.name}:${options.catalog.name}:${data}` :
    `${options.catalog.organization.name}:${options.catalog.name}`;

  return crypto.createHash('md5').update(data).digest('hex');
};

exports.collection = function(options) {
  return `collection_${hash(options)}`;
};

exports.api = function(options, swagger) {
  let code = hash(options, `${swagger.info.name}:${swagger.info.version}`);
  return `api_${code}`;
};

exports.assembly = function(options, swagger) {
  let code = hash(options, `${swagger.info.name}:${swagger.info.version}`);
  return `assembly_${code}`;
};

exports.path = function(options, swagger, path) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:${path}`);
  return `path_${code}`;
};

exports.plan = function(options, product, planName) {
  let code = hash(options,
    `${product.info.name}:${product.info.version}:${planName}`);
  return `plan_${code}`;
};

exports.operation = function(options, swagger, path, method) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:${path}:${method}`);
  return `op_${code}`;
};

exports.rule = function(options, swagger, type, index) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:${type}:${index}`);
  return `rule_${code}`;
};

exports.action = function(options, swagger, ruleType, actionType, index) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:` +
    `${ruleType}:${actionType}:${index}`);
  return `action_${code}`;
};

exports.password = function(options, swagger, index) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:${index}`);
  return `password_${code}`;
};

exports.subscription = function(options, subscriber) {
  return `sub_${hash(options, subscriber.id)}`;
};

exports.operationRateLimit = function(options, swagger, operation) {
  let code = hash(options, `${swagger.info.name}:${swagger.info.version}:\
${operation.path}:${operation.method}`);
  return `oprl_${code}`;
};

exports.tlsProfile = function(options, name) {
  return `tlsp-${name}`;
};

exports.registry = function(options, name) {
  return `reg-${name}`;
};

exports.securityDefinition = function(options, swagger, name) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:${name}`);
  return `secd_${code}`;
};

exports.securityRequirement = function(options, swagger, index) {
  let code = hash(options,
    `${swagger.info.name}:${swagger.info.version}:secr-${index}`);
  return `secr_${code}`;
};

exports.oauthProviderSettings = function(options, providerName) {
  return `oauthp_${hash(options, providerName)}`;
};
