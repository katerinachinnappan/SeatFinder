#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

// Node module: apiconnect-config-to-datapower


'use strict';

const Promise = require('bluebird');
const apic2dp = require('../');
const fs = require('fs');
const path = require('path');
const loader = require('apiconnect-project');
const util = require('util');

const ROOT_DIR = path.resolve(
  process.argv[2] ||
  process.env.CONFIG_DIR ||
  process.cwd());

function listLeafDirs(dirName) {
  let stat = fs.statSync(dirName);
  if (!stat.isDirectory())
    return;
  var dirs = [];
  fs.readdirSync(dirName).forEach((f) => {
    let d = path.resolve(dirName, f);
    if (fs.statSync(d).isDirectory() && !f.match(/^\./)) {
      dirs.push(d);
    }
  });
  if (dirs.length == 0) {
    return [dirName];
  } else {
    let result = [];
    dirs.forEach((d) => {
      let b = listLeafDirs(d);
      result = result.concat(b);
    });
    return result;
  }
}

let projectLoaders = listLeafDirs(ROOT_DIR).map(d => loader.loadProject(d));

Promise
  .map(projectLoaders, project => project.map(obj => {
    if (obj.type === 'swagger') {
      return apic2dp.compileSwagger(obj.data);
    } else if (obj.type === 'product') {
      return apic2dp.compileProduct(obj.data);
    } else if (obj.data &&
        obj.data.ciphers &&
        Array.isArray(obj.data.ciphers)) {
      return apic2dp.compileTLSProfile(obj.data);
    }
  }))
  .then(projects => {
    let cfg = projects.map(p => p.join('\n')).join('\n');
    console.log('top; configure terminal\n\n', cfg);
  })
  .catch(err => {
    console.error(err);
  });

