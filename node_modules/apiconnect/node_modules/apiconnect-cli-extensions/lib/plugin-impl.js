#!/usr/bin/env node
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-extensions


var ApicCliUtil = require('apiconnect-cli-util');
var Promise = require('bluebird');
var apimExtensions = require('apiconnect-apim-client').extensions;
var f = require('util').format;
var fmt = require('./formatter');
var util = require('./util/util');

var checkForOrgOrAllOrgAndCatalogOrCatalog = ApicCliUtil.Util.checkForOrgOrAllOrgAndCatalogOrCatalog;
var checkForOrgOrCatalog = ApicCliUtil.Util.checkForOrgOrCatalog;

function extensionsList(options) {
  checkForOrgOrAllOrgAndCatalogOrCatalog(options);

  return apimExtensions.listAll(options)
    .then(fmt.listFormatter);
};

function extensionsGet(nameVersion, options) {
  checkForOrgOrCatalog(options);

  options.extensionName = util.getName(nameVersion);
  options.extensionVersion = util.getVersion(nameVersion);

  return apimExtensions.get(options).then(function(result) {
    fmt.getFormatter(options.catalog, options.organization, result);
  });
};

function extensionsPull(nameVersion, options) {
  checkForOrgOrCatalog(options);

  options.extensionName = util.getName(nameVersion);
  options.extensionVersion = util.getVersion(nameVersion);

  return apimExtensions.pull(options).then(function(result) {
    fmt.pullFormatter(options.catalog, options.organization, result);
  });
};

function extensionsPublish(fileName, options) {
  checkForOrgOrCatalog(options);

  options.fileName = fileName;
  return apimExtensions.publish(options).then(function(result) {
    fmt.publishFormatter(options.fileName, options.catalog, options.organization, result);
  });
};

function extensionsDelete(nameVersion, options) {
  checkForOrgOrCatalog(options);

  options.extensionName = util.getName(nameVersion);
  options.extensionVersion = util.getVersion(nameVersion);

  return apimExtensions.remove(options).then(function(result) {
    fmt.deleteFormatter(options.extensionName, options.extensionVersion, options.catalog, options.organization);
  });
};

function extensionsClone(options) {
  checkForOrgOrCatalog(options);

  return apimExtensions.list(options).then(function(results) {
    return Promise.map(results, function(extension) {
      return extensionsPull(f('%s:%s', extension.name, extension.version), options);
    }, { concurrency: 1 });
  });
};

module.exports = {
  extensionsDelete: extensionsDelete,
  extensionsGet: extensionsGet,
  extensionsPull: extensionsPull,
  extensionsPublish: extensionsPublish,
  extensionsList: extensionsList,
  extensionsClone: extensionsClone,
};

