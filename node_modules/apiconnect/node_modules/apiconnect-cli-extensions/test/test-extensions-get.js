/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-extensions
/*eslint max-len: ["error", 180]*/

'use strict';
var testSupport = require('apiconnect-cli-test-support');

var path = require('path');
var moduleRoot = path.resolve(__dirname, '..');
var apic = testSupport.apic(moduleRoot);
var auth = testSupport.auth(apic);
var conf = testSupport.config;
var f = require('util').format;
var logger = testSupport.logger;
var test = testSupport.stackerTest;

test('Test apic extensions:get command', function(t) {
  var server = conf.getServer();
  var org = conf.getOrgList()[0].name;
  var catalog = conf.getCatalogList()[0].name;
  var extension = path.resolve(__dirname, 'fixtures', 've.yaml');
  var nameVersion = 'banking:1.0.0';

  var extOutput = {
    name: 'banking',
    version: '1.0.0',
    title: 'Banking services',
    catalog: catalog,
    organization: org,
  };

  function validateOutput(t, expected) {
    var output = logger.values();
    t.equals(output.length, 5);
    t.equals(output[0], f('name: %s', expected.name));
    t.equals(output[1], f('version: %s', expected.version));
    t.equals(output[2], f('title: %s', expected.title));
    t.equals(output[3], f('catalog: %s', expected.catalog));
    t.equals(output[4], f('organization: %s', expected.organization));
    return;
  }

  function clear() {
    return apic('config:clear --local --global');
  }

  function setOrg() {
    return apic('config:set --global org=apic-org://' + server + '/orgs/' + org);
  }

  function setCatalog() {
    return apic('config:set --global catalog=apic-catalog://' + server + '/orgs/' + org + '/catalogs/' + catalog);
  }

  function esc(str) {
    return str.replace(/[\\]/g, '\\\\');
  }

  // Must login manually
  t.test('setup', function(t) {
    return auth.login()
      .then(clear);
  });

  // no config
  t.test('extensions:get ' + nameVersion + ' --server ' + server + ' --organization ' + org + ' --catalog ' + catalog + ' # No config', function(t) {
    return apic('extensions:publish ' + esc(extension) + ' --server ' + server + ' --organization ' + org + ' --catalog ' + catalog)
      .then(logger.clear)
      .then(apic.bind(null, 'extensions:get ' + nameVersion + ' --server ' + server + ' --organization ' + org + ' --catalog ' + catalog))
      .then(validateOutput.bind(null, t, extOutput))
      .then(clear);
  });

  // no config short options
  t.test('extensions:get ' + nameVersion + ' -s ' + server + ' -o ' + org
    + ' -c ' + catalog + ' # No config', function(t) {
    return apic('extensions:get ' + nameVersion + ' -s ' + server + ' -o ' + org + ' -c ' + catalog)
      .then(validateOutput.bind(null, t, extOutput))
      .then(clear);
  });

  // with config
  t.test('extensions:get ' + nameVersion + ' --server ' + server + ' # config', function(t) {
    return setCatalog()
      .then(setOrg)
      .then(logger.clear)
      .then(apic.bind(null, 'extensions:get ' + nameVersion + ' --server ' + server))
      .then(validateOutput.bind(null, t, extOutput))
      .then(clear);
  });

  // Cleanup
  t.test('extensions:delete banking:1.0.0 --server ' + server + ' --organization ' + org + ' --catalog ' + catalog, function(t) {
    return apic('extensions:delete ' + nameVersion + ' --server ' + server + ' --organization ' + org + ' --catalog ' + catalog)
      .then(logger.clear)
      .then(clear);
  });

  t.end();
});

