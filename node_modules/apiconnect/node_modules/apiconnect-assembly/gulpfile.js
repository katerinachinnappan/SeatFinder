/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

var connectLivereload = require('connect-livereload');
var del = require('del');
var express = require('express');
var gulp = require('gulp');
var gulpAngularTemplateCache = require('gulp-angular-templatecache');
var gulpCleanCss = require('gulp-clean-css');
var gulpConcat = require('gulp-concat');
var gulpConcatCss = require('gulp-concat-css');
var gulpHtmlmin = require('gulp-htmlmin');
var gulpJshint = require('gulp-jshint');
var gulpLivereload = require('gulp-livereload');
var gulpRework = require('gulp-rework');
var gulpSass = require('gulp-sass');
var gulpUglify = require('gulp-uglify');
var jshintStylish = require('jshint-stylish');
var reworkPluginUrl = require('rework-plugin-url');
var KarmaServer = require('karma').Server;
var yaml = require('gulp-yaml');


/******************************************************************************/

// JSHint testing
gulp.task('jshint', function () {
  return gulp.src(['**/*.js','!**/dist/**/*.js','!**/src/ace/theme-atom_dark.js']) // Ignore built files - App Connect build requirement (same as this repo's .jshintignore file which isn't picked up)
    // Note that some API Connect files will be ignored thanks to .jshintignore.
    .pipe(gulpJshint())
    .pipe(gulpJshint.reporter(jshintStylish))
    .pipe(gulpJshint.reporter("fail"));
});

gulp.task('test-fixtures',function() {
  gulp.src('tests/fixtures/yaml/*.yaml')
    .pipe(yaml({ safe: true }))
    .pipe(gulp.dest('tests/fixtures/yaml/'));
});

gulp.task('karma-test', function(done){
  new KarmaServer({
    configFile: __dirname + '/karma.conf.js',
    singleRun: true
  }, done).start();
});


gulp.task('test', ['jshint', 'test-fixtures', 'karma-test']);

/******************************************************************************/

gulp.task('clean-dist-css', function() {
  return del.sync(['dist/css/*']);
});

gulp.task('compile-css', ['clean-dist-css'], function() {
  return gulp.src([
    // Ordering is significant
    'src/sass/assembly.scss',
    'src/sass/mapper.scss'
  ])
    .pipe(gulpSass().on('error', gulpSass.logError))

    /*
      Enable CSS in the `appconnect-floweditor` module to find dependencies in
      sibling modules in the same directory. See material.scss for an example.
    */
    .pipe(gulpRework(reworkPluginUrl(function(url) {
      var prefix = '/node_modules/';
      if(url.substring(0, prefix.length) === prefix) {
        return '../../../' + url.substring(prefix.length);
      }
      return url;
    })))
    .pipe(gulpConcatCss('apiconnect-assembly.css', {rebaseUrls: false}))
    .pipe(gulp.dest('dist/css/'));
});

gulp.task('compile-css-font', ['clean-dist-css'], function() {
  return gulp.src([
    'src/sass/material.scss'
  ])
    .pipe(gulpSass().on('error', gulpSass.logError))
    .pipe(gulpRework(reworkPluginUrl(function(url) {
      var prefix = '/node_modules/';
      if(url.substring(0, prefix.length) === prefix) {
        return '../../../' + url.substring(prefix.length);
      }
      return url;
    })))
    .pipe(gulpConcatCss('apiconnect-assembly-font.css', {rebaseUrls: false}))
    .pipe(gulp.dest('dist/css/'));
});

// Create minified CSS file
gulp.task('minify-css', ['compile-css'], function() {
  return gulp.src(['dist/css/apiconnect-assembly.css'])
    .pipe(gulpConcatCss('apiconnect-assembly.min.css', {rebaseUrls: false}))
    .pipe(gulpCleanCss())
    .pipe(gulp.dest('dist/css/'));
});

// Create minified CSS file
gulp.task('minify-css-font', ['compile-css-font'], function() {
  return gulp.src(['dist/css/apiconnect-assembly-font.css'])
    .pipe(gulpConcatCss('apiconnect-assembly-font.min.css', {rebaseUrls: false}))
    .pipe(gulpCleanCss())
    .pipe(gulp.dest('dist/css/'));
});

gulp.task('css', ['minify-css', 'minify-css-font']);

/******************************************************************************/

// Delete and recreate image files
gulp.task('clean-images', function() {
  return del.sync(['dist/images/*']);
});

gulp.task('copy-images', ['clean-images'], function () {
  return gulp.src([
    'src/images/**/*'
  ])
    .pipe(gulp.dest('dist/images/'));
});

gulp.task('images', ['copy-images']);

/******************************************************************************/

// Delete JavaScript files
gulp.task('clean-js', function() {
  return del.sync(['dist/js/*']);
});

// We need to cache those templates in a separate JS file temporarily
gulp.task('template-js', ['clean-js'], function() {
  return gulp.src('src/html/**/*.html')
    .pipe(gulpHtmlmin({
      // <https://github.com/kangax/html-minifier>
      collapseWhitespace: true, // collapse whitespace
      conservativeCollapse: false, // don't even leave a single space gap
      decodeEntities: true,
      removeComments: true
    }))
    .pipe(gulpAngularTemplateCache({
      filename: "apiconnect-assembly-templates.js",
      module: "apiconnect-assembly",
      root: "src/html"
    }))
    .pipe(gulp.dest('.tmp'));
});

// Create built JavaScript
gulp.task('concat-js', ['template-js'], function() {
  return gulp.src([
    // We need to concatenate these in the correct order or face compilation errors
    'src/ace/theme-atom_dark.js',
    'src/js/assembly/AssemblerController.js', // Must precede other Angular stuff!
    'src/js/assembly/DialogControllers.js',
    'src/js/assembly/AssemblerDirectives.js',
    'src/js/assembly/AssemblerFilters.js',
    'src/js/assembly/AssemblerInfoController.js',
    'src/js/assembly/AssemblerTestController.js',
    'src/js/assembly/AssemblyServices.js',
    'src/js/assembly/SchemaServices.js',
    'src/js/assembly/MapperController.js',
    'src/js/assembly/ConditionController.js',
    'src/js/assembly/ExpressionServices.js',
    'src/js/assembly/RecursionHelper.js',
    'src/js/filters/TranslateFilters.js',
    'src/js/mapper-schema/json-schema-view.js',
    'src/nls/localization.js',
    '.tmp/apiconnect-assembly-templates.js'
  ])
    .pipe(gulpConcat('apiconnect-assembly.js'))
    .pipe(gulp.dest('dist/js/'));
});

// Create minified JavaScript
gulp.task('minify-js', ['concat-js'], function() {
  return gulp.src(['dist/js/apiconnect-assembly.js'])
    .pipe(gulpUglify())
    .pipe(gulpConcat('apiconnect-assembly.min.js'))
    .pipe(gulp.dest('dist/js/'));
});

// And finally ditch that .tmp directory
gulp.task('del-tmp-js', ['minify-js'], function() {
  return del.sync(['.tmp']);
});

gulp.task('js', ['del-tmp-js']);

/******************************************************************************/

// This just compiles the Sass to CSS and does the minimum amount of work to
// make it usable.
gulp.task('minibuild', ['compile-css', 'copy-images']);

gulp.task('build', ['test', 'css', 'images', 'js']);

gulp.task('default', ['build']);

/******************************************************************************/

// Serve tasks.

var distPort = 3000;
var livereloadPort = 35279;

// "serve" task only builds the Sass into CSS and moves a few images around.
// Otherwise it serves as many of the raw source files as possible.

// Very little work is needed to build the demo. Just compile a CSS file
gulp.task('build-demo-css', function() {
  return gulp.src(['src/sass/general.scss'])
    .pipe(gulpSass().on('error', gulpSass.logError))
    .pipe(gulpConcatCss('app.css', {rebaseUrls: false}))
    .pipe(gulp.dest('demo'));
});

gulp.task('build-demo-js', function() {
  return gulp.src(['src/js/assembly/PolicyFactory.js'])
    .pipe(gulp.dest('demo'));
});

// TODO: both "src/sass/general.scss" and "src/js/assembly/PolicyFactory.js"
// should be considered part of the demo, not part of the source code of the
// assembly editor. They should be moved to a different location and served
// as such.

gulp.task('build-demo', ['minibuild', 'build-demo-css', 'build-demo-js']);

gulp.task('notify-reload', ['build-demo'], function() {
  gulpLivereload.reload();
});

// This Gulp task runs the minibuild and serves the built CSS and the source
// for everything else.
gulp.task('serve', ['build-demo'], function () {
  var app = express();
  app.use(connectLivereload({port: livereloadPort}));
  app.use('/',                                      express.static('demo'));
  app.use('/node_modules',                          express.static('node_modules'));
  app.use('/node_modules/apiconnect-assembly/dist', express.static('dist')); // CSS, images
  app.use('/src/ace',                               express.static('src/ace'));
  app.use('/src/html',                              express.static('src/html'));
  app.use('/src/js',                                express.static('src/js'));
  app.use('/src/nls',                               express.static('src/nls'));
  var server = app.listen(distPort, function() {
    console.log('Express server listening on port ' + server.address().port);
  });
  gulpLivereload.listen({port: livereloadPort});

  // Any time anything changes (except the CSS), rebuild the CSS and reload the
  // page.
  gulp.watch([
    'demo/**/*',
    'src/ace/**/*',
    'src/html/**/*',
    'src/images/**/*',
    'src/js/**/*',
    'src/nls/**/*',
    'src/sass/**/*'
  ], ['notify-reload']);
});

////////////////////////////////////////////////////////////////////////////////

// "serve-dist" task performs a full build and serves the built JavaScript.

// TODO: really, this task should just run the "build-demo" task above, then
// take the resulting HTML, CSS, JavaScript and so on and act on it to generate
// the "demo-dist" directory.

gulp.task('build-demo-dist-css', function() {
  return gulp.src(['src/sass/general.scss'])
    .pipe(gulpSass().on('error', gulpSass.logError))
    .pipe(gulpConcatCss('app.css', {rebaseUrls: false}))
    .pipe(gulp.dest('demo-dist'));
});

gulp.task('build-demo-dist-js', function() {
  return gulp.src(['src/js/assembly/PolicyFactory.js'])
    .pipe(gulp.dest('demo-dist'));
});

gulp.task('build-demo-dist', ['build', 'build-demo-dist-css', 'build-demo-dist-js']);

gulp.task('notify-reload-dist', ['build-demo-dist'], function() {
  gulpLivereload.reload();
});

gulp.task('serve-dist', ['build-demo-dist'], function () {
  var app = express();
  app.use(connectLivereload({port: livereloadPort}));
  app.use('/',                                      express.static('demo-dist'));
  app.use('/node_modules',                          express.static('node_modules'));
  app.use('/node_modules/apiconnect-assembly/dist', express.static('dist'));

  app.listen(distPort, function () {
    console.log('Express server listening on port ' + distPort);
  });
  gulpLivereload.listen({port: livereloadPort});

  // Any time anything changes (except the CSS), rebuild everything and reload.
  gulp.watch([
    'demo-dist/**/*',
    'src/ace/**/*',
    'src/html/**/*',
    'src/images/**/*',
    'src/js/**/*',
    'src/nls/**/*',
    'src/sass/**/*'
  ], ['notify-reload-dist']);
});

