// Copyright IBM Corp. 2015,2017. All Rights Reserved.
// Node module: apiconnect-collective-jmx
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var Encoder = require('./encoder');
var Payload = require('./payload');
var assert = require('assert');
var crypto = require('crypto');
var encode = require('../util/encode-liberty-path');
var jmxTypes = require('./encoder').types;
var mandatory = require('../util/mandatory');

var ROUTING_INFO_PATH = '/sys.was.collectives/local';
var ENDPOINT_MBEAN = 'EndpointRoutingInfo';
var APPLICATION_MBEAN = 'ApplicationRoutingInfoMBean';
var COLLECTIVE_MBEAN_PATH = '/IBMJMXConnectorREST/mbeans/' +
  'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
  'CollectiveRepository%2Ctype%3DCollectiveRepository/operations';

// router client attribute enum
var attributes = {
  State: 'State',
  RoutingInfo: 'RoutingInfo',
  HttpPort: 'HttpPort',
  HttpsPort: 'HttpsPort',
  Host: 'Host',
  PersistentTimeout: 'PersistentTimeout',
  WaitForContinue: 'WaitForContinue',
  ConnectTimeout: 'ConnectTimeout',
  WsIoTimeout: 'WsIoTimeout',
  IoTimeout: 'IoTimeout',
  WsIdleTimeout: 'WsIdleTimeout',
  ExtendedHandshake: 'ExtendedHandshake',
  CloneSeparator: 'CloneSeparator',
  CookieName: 'CookieName',
  CloneID: 'CloneID',
};

// router client attribute dataType
var attributeDataTypes = {
  State: 'java.lang.String',
  RoutingInfo: 'java.lang.String',
  HttpPort: 'java.lang.Integer',
  HttpsPort: 'java.lang.Integer',
  Host: 'java.lang.String',
  PersistentTimeout: 'java.lang.Long',
  WaitForContinue: 'java.lang.Boolean',
  ConnectTimeout: 'java.lang.Long',
  WsIoTimeout: 'java.lang.Long',
  IoTimeout: 'java.lang.Long',
  WsIdleTimeout: 'java.lang.Long',
  ExtendedHandshake: 'java.lang.Boolean',
  CloneSeparator: 'java.lang.String',
  CookieName: 'java.lang.String',
  CloneID: 'java.lang.String',
};

// collective repository operation type enum
var COLLECTIVE_REPOSITORY_OPERATIONS = {
  create: 'create',
  setData: 'setData',
  delete: 'delete',
};

/**
 * JMX operations for configuring application and endpoint routing information.
 * @class RouterClient
 */
module.exports = RouterClient;

function RouterClient() {}

RouterClient.attributes = attributes;
RouterClient.attributeDataTypes = attributeDataTypes;
RouterClient.COLLECTIVE_MBEAN_PATH = COLLECTIVE_MBEAN_PATH;
RouterClient.COLLECTIVE_REPOSITORY_OPERATIONS =
  COLLECTIVE_REPOSITORY_OPERATIONS;

/**
 * Sets the application routing information. The application routing info
 * is the address which is mapped to the user application. This URL includes
 * context root, as well as virtual host address and vHost port. The router
 * client redirects the request to this application if it finds the requested
 * url the address which is set by this method.
 * @param {object} options - The options object.
 * @param {string} options.host - The host on which the server is running.
 * @param {string} options.userDir - The user directory in which the server
 * is set up.
 * @param {string} options.server - The server name associated to the server.
 * @param {string} options.applicationName - The application name.
 * @param {string} options.contextRoot - The context root if routing by
 * context root (the value is / if not).
 * @param {string} options.vHost - The virtual host address if routing by
 * virtual host (the value is * unless otherwise).
 * @param {string} options.vHostPort - The virtual host port if routing by
 * virtual host (the value is * unless otherwise)
 * @param {string} operation - The operation to set/delete/create a value in
 * the collective repository of the controller.
 */
RouterClient.SetApplicationRoutingInfo = function(options, operation) {
  mandatory(options.host, 'missing host');
  mandatory(options.userDir, 'missing userDir');
  mandatory(options.server, 'missing server');
  mandatory(options.applicationName, 'missing applicationName');
  mandatory(operation, 'missing operation');
  assert(COLLECTIVE_REPOSITORY_OPERATIONS[operation],
    operation + ' is not a valid collective repository operation');

  var encoder = new Encoder();
  var tuple = [
    'feature=collectiveMember',
    'type=' + APPLICATION_MBEAN,
    'name=' + options.applicationName,
  ].join(',');

  var mbeanResource = [
    ROUTING_INFO_PATH,
    'hosts',
    options.host.toLowerCase(),
    'userdirs',
    encode(options.userDir),
    'servers',
    options.server,
    'sys.mbeans',
    'WebSphere:' + tuple,
    'attributes',
    attributes.RoutingInfo,
  ].join('/');

  encoder.addString(mbeanResource);

  if (operation !== COLLECTIVE_REPOSITORY_OPERATIONS.delete) {
    mandatory(options.contextRoot, 'missing contextRoot');
    mandatory(options.vHost, 'missing vHost');
    mandatory(options.vHostPort, 'missing vHostPort');
    var attributesObj = {
      ContextRoot: options.contextRoot,
      FileServingEnabled: true,
      SessionAffinityCookie: null,
      ServletMappings: [
        {
          type: 'uri',
          name: '\/uri\/\\\/*',
        },
      ],
      vhost: {
        name: '\/vHost\/' + options.vHost + ':' + options.vHostPort,
        type: 'vHost',
        props: {
          port: Number(options.vHostPort),
        },
      },
    };

    if (options.vHost && options.vHost !== '*') {
      attributesObj.vhost.props.host = options.vHost;
    }

    var routingInfo = {
      name: options.applicationName,
      webModules: [
        {
          moduleName: options.applicationName,
          digest: crypto.createHash('md5')
            .update((JSON.stringify(attributesObj))).digest('hex'),
          attributes: attributesObj,
        },
      ],
    };
    encoder.addSimpleValue(JSON.stringify(routingInfo),
      attributeDataTypes.RoutingInfo, jmxTypes.JavaObject);
  }
  return new Payload([COLLECTIVE_MBEAN_PATH, operation].join('/'),
    'POST', encoder.encodeJson());
};

/**
 * Sets the application routing information. The application routing info
 * is the address which is mapped to the user application. This URL includes
 * context root, as well as virtual host address and vHost port. The router
 * client redirects the request to this application if it finds the requested
 * url the address which is set by this method.
 * @param {object} options - The options object.
 * @param {string} options.host - The host on which the server is running.
 * @param {string} options.userDir - The user directory in which the server
 * is set up.
 * @param {string} options.server - The server name associated to the server.
 * @param {string} options.applicationName - The application name.
 * @param {string} operation - The operation to set/delete/create a value in
 * the collective repository of the controller.
 */
RouterClient.SetApplicationState = function(options, operation) {
  mandatory(options.host, 'missing host');
  mandatory(options.userDir, 'missing userDir');
  mandatory(options.server, 'missing server');
  mandatory(options.applicationName, 'missing applicationName');
  mandatory(operation, 'missing n');
  assert(COLLECTIVE_REPOSITORY_OPERATIONS[operation],
    operation + ' is not a valid collective repository operation');

  var encoder = new Encoder();
  var tuple = [
    'service=com.ibm.websphere.application.ApplicationMBean',
    'name=' + options.applicationName,
  ].join(',');

  var mbeanResource = [
    ROUTING_INFO_PATH,
    'hosts',
    options.host.toLowerCase(),
    'userdirs',
    encode(options.userDir),
    'servers',
    options.server,
    'sys.mbeans',
    'WebSphere:' + tuple,
    'attributes',
    attributes.State,
  ].join('/');

  encoder.addString(mbeanResource);
  if (operation !== COLLECTIVE_REPOSITORY_OPERATIONS.delete) {
    mandatory(options.attributeValue, 'missing attributeValue');
    mandatory(options.attributeType, 'missing attributeType');
    encoder.addSimpleValue(options.attributeValue.toString(),
      options.attributeType, jmxTypes.JavaObject);
  }
  return new Payload([COLLECTIVE_MBEAN_PATH, operation].join('/'),
    'POST', encoder.encodeJson());
};

/**
 * Sets the end point routing information. This information includes the
 * address and port that application is running. There are 12 attributes values
 * which are sent to the controller. these attributes are defined in enum
 * called attributes which includes host, workport, etc.
 * @param {object} options - The options object.
 * @param {string} options.host - The host on which the server is running.
 * @param {string} options.userDir - The user directory in which the server
 * is set up.
 * @param {string} options.server - The server name associated to the server.
 * @param {string} options.attribute - The attribute type to be set.
 * @param {string} options.attributeValue - The attribute value to be set.
 * @param {string} operation - The operation to set/delete/create a value in
 * the collective repository of the controller.
 */
RouterClient.SetEndPointRoutingInfo = function(options, operation) {
  assert(attributes[options.attribute], options.attribute,
    ' is not a valid attribute');
  mandatory(options.host, 'missing host');
  mandatory(options.userDir, 'missing userDir');
  mandatory(options.server, 'missing server');
  assert(COLLECTIVE_REPOSITORY_OPERATIONS[operation],
    operation + ' is not a valid collective repository operation');

  var encoder = new Encoder();
  var sysMBean = 'WebSphere:';
  var sessionManagerAttributes = [
    attributes.CloneSeparator,
    attributes.CookieName,
    attributes.CloneID,
  ];
  if (sessionManagerAttributes.indexOf(options.attribute) >= 0) {
    sysMBean = sysMBean + 'name=com.ibm.ws.jmx.mbeans.sessionManagerMBean';
  } else {
    sysMBean = sysMBean + [
      'feature=collectiveMember',
      'type=' + ENDPOINT_MBEAN,
      'name=EndpointRoutingInfo',
    ].join(',');
  }
  var mbeanResource = [
    ROUTING_INFO_PATH,
    'hosts',
    options.host.toLowerCase(),
    'userdirs',
    encode(options.userDir),
    'servers', options.server,
    'sys.mbeans',
    sysMBean,
    'attributes',
    options.attribute,
  ].join('/');

  encoder.addString(mbeanResource);
  if (operation !== COLLECTIVE_REPOSITORY_OPERATIONS.delete) {
    mandatory(options.attributeValue, 'missing attributeValue');
    mandatory(options.attributeType, 'missing attributeType');
    encoder.addSimpleValue(options.attributeValue.toString(),
      options.attributeType, jmxTypes.JavaObject);
  }
  return new Payload([COLLECTIVE_MBEAN_PATH, operation].join('/'),
    'POST', encoder.encodeJson());
};
