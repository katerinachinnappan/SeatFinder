// Copyright IBM Corp. 2015,2017. All Rights Reserved.
// Node module: apiconnect-collective-jmx
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var assert = require('assert');
/** Holds onto the in-memory representation of a JMX-encoded payload
 * as it's being built via the add functions defined on the prototype.
 * When your representation is complete, call the `encodeJson` function
 * to get the final result.
 *
 * Example:
 * ```js
 * var encoder = new Encoder();
 * encoder.addString('foo');
 * encoder.addInteger(2);
 * var result = encoder.encodeJson(); // Tada!
 * ```
 */
module.exports = Encoder;

/**
  * @constructor
  */
function Encoder() {
  this.clearPayload();
};

/**
 * The list of pre-defined Java types available for use in JMX payloads.
 * @see Types
 */
Encoder.types = require('./types');

/**
 * Clear the payload contained within the JMX object (if you want to reuse it).
 */
Encoder.prototype.clearPayload = function() {
  this.payload = {
    params: [],
    signature: [],
  };
};

/**
 * Prepare a JMX object in JSON based on the existing payload in this object.
 * @returns {{params: Array, signature: Array}|*|{}}
 */
Encoder.prototype.encodeJson = function() {
  return this.payload || {};
};

Encoder.prototype.toJson = Encoder.prototype.encodeJson;

// Payload encoding functions

/**
 * Add a boolean to the JMX payload.
 * @param {boolean} val
 */
Encoder.prototype.addBoolean = function(val) {
  this.addSimpleValue(val, Encoder.types.Boolean, 'boolean');
};

/**
 * Add a string to the JMX payload.
 * @param {string} val
 */

Encoder.prototype.addString = function(val) {
  this.addSimpleValue(val, Encoder.types.String);
};

/**
 * Add an integer to the JMX payload.
 * @param {number} val
 */
Encoder.prototype.addInteger = function(val) {
  this.addSimpleValue(val, Encoder.types.Integer);
};

/**
 * Add a double to the JMX payload.
 * @param {number} val
 */

Encoder.prototype.addDouble = function(val) {
  this.addSimpleValue(val, Encoder.types.Double);
};

/**
 * Add a list to the JMX object (Java's ArrayList in JSON form).
 * @param arr - The array of objects to add to the payload. All items must
 * be of the same type!
 * @param type - The Java data-type of the values within the array.
 */
Encoder.prototype.addList = function(arr, type) {
  var arrayList = {
    value: [],
    type: {
      className: Encoder.types.ArrayList,
      items: [],
    },
  };

  for (var item in arr) {
    arrayList.value.push(arr[item]);
    arrayList.type.items.push(type);
  }

  this.payload.params.push(arrayList);
  this.payload.signature.push(Encoder.types.List);
};

/**
 * Add an array to the JMX object (different than List/ArrayList, requires
 * special string annotations for type).
 * @param arr - The array of objects to add to the payload. All items must
 * be of the same type!
 * @param type - The Java data-type of the values within the array.
 */
Encoder.prototype.addArray = function(arr, type) {
  var typeString = ['[L', type, ';'].join('');
  var array = {
    value: [],
    type: typeString,
  };

  for (var item in arr) {
    array.value.push(arr[item]);
  }

  this.payload.params.push(array);
  this.payload.signature.push(typeString);
};

/**
 * Add a Map (HashMap) to the JMX payload.
 * @param {*} map - The JSON object that acts as your map.
 * @param {string} keyType - The Java type of the keys.
 * @param {string} valueType - The Java type of the values.
 * @param {boolean} [isComplexKey=false] - Whether or not the Java data type of
 * the keys are complex or simple. Defaults to false (simple).
 */
Encoder.prototype.addMap = function(map, keyType, valueType, isComplexKey) {
  // Default to true if unspecified (most keys are simple).
  var hashMap = {};
  if (map) {
    var keys = Object.keys(map);
    hashMap = {
      value: {},
      type: {
        className: Encoder.types.HashMap,
        simpleKey: !isComplexKey,
        entries: [],
      },
    };

    for (var i = 0; i < keys.length; i++) {
      hashMap.value[keys[i]] = (map[keys[i]] !== undefined ?
                                map[keys[i]] : null);
      if (isComplexKey) {
        hashMap.type.entries.push({
          keyType: keyType,
          value: valueType,
        });
      } else {
        hashMap.type.entries.push({
          key: keys[i],
          keyType: keyType,
          value: valueType,
        });
      }
    }

  } else {
    hashMap = {
      value: null, // Push an empty value collection when no map is given.
      type: {
        className: Encoder.types.HashMap,
      },
    };
  }
  this.payload.signature.push(Encoder.types.Map);
  this.payload.params.push(hashMap);
  return hashMap;
};

/**
 * Add a Map (HashMap) to the JMX payload.
 * @param {*} hashMap - The JSON object that acts as your map.
 * @param {string} value - The value to be put in the map
 * @param {string} key - The key for the value in the map
 * @param {string} keyType - The Java type of the keys.
 * @param {string} valueType - The Java type of the values.
 * @param {boolean} [isComplexKey=false] - Whether or not the Java data type of
 * the keys are complex or simple. Defaults to false (simple).
 */
Encoder.prototype.addEntryToMap = function(hashMap, value, key, keyType,
                                           valueType, isComplexKey) {
  assert(hashMap);
  assert(value);
  assert(key);
  assert(keyType);
  assert(valueType);
  hashMap.value[key] = value;
  if (isComplexKey) {
    hashMap.type.entries.push({
      keyType: keyType,
      value: valueType,
    });
  } else {
    hashMap.type.entries.push({
      key: key,
      keyType: keyType,
      value: valueType,
    });
  }
};

/**
 * Add a simple value to the JMX payload; does not support complex data types!
 * @param {*} val - The value to insert into the payload.
 * @param {string} type - The Java data-type of the value.
 * @param {string=} baseType - The baseType of the object
 * (only added to signature!)
 */
Encoder.prototype.addSimpleValue = function(val, type, baseType) {
  var item = (val) ? {
    value: val,
    type: type,
  } : {
    value: null,
  };
  this.payload.params.push(item);

  var itemType = baseType || type;
  this.payload.signature.push(itemType);
};
