// Copyright IBM Corp. 2016,2017. All Rights Reserved.
// Node module: apiconnect-collective-jmx
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var Encoder = require('./encoder');
var Payload = require('./payload');
var assert = require('assert');
var jmxTypes = require('./encoder').types;
var mandatory = require('../util/mandatory');

/**
 * JMX commands for starting and stopping Liberty Collective server instances,
 * as well as retrieving their current state.
 */
module.exports = ServerCommand;
function ServerCommand() {}

ServerCommand.SERVER_COMMAND_PATH =
  '/IBMJMXConnectorREST/mbeans/WebSphere%3Afeature%3' +
  'DcollectiveController%2Cname%3DServerCommands%2Ctype%3DServerCommands/' +
  'operations';

ServerCommand.COLLECTIVE_PATH = '/sys.was.collectives/local';

ServerCommand.COLLECTIVE_MBEAN_PATH =
  '/IBMJMXConnectorREST/mbeans/' +
  'WebSphere%3Afeature%3DcollectiveController%2Cname%3D' +
  'CollectiveRepository%2Ctype%3DCollectiveRepository/operations';

ServerCommand.SERVER_COMMAND_OPERATIONS = {
  startServer: 'startServer',
  getServerStatus: 'getServerStatus',
  stopServer: 'stopServer',
};

// FIX the docs after finished.
/**
 * returns the server start stop status commands.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The host on which the server is running.
 * @param {string} options.serverName - The host on which the server is running.
 * @param {string} options.wlpnUserDir - The user directory in which the server
 * is set up.
 * @param {string} operation - The operation to set/delete/create a value in
 * the collective repository of the controller.
 */
ServerCommand.getServerOperation = function(options, operation) {
  mandatory(options.hostName, 'hostName is required');
  mandatory(options.wlpnUserDir, 'wlpnUserDir is required');
  mandatory(options.serverName, 'serverName is required');
  mandatory(operation, 'operation is required');
  assert(
    ServerCommand.SERVER_COMMAND_OPERATIONS[operation],
    operation + ' is not a valid collective repository operation'
  );

  var encoder = new Encoder();
  encoder.addString(mandatory(options.hostName), 'missing hostName)');
  encoder.addString(mandatory(options.wlpnUserDir), 'missing wlpnUserDir)');
  encoder.addString(mandatory(options.serverName), 'missing serverName)');
  encoder.addString('');
  return new Payload(
    [ServerCommand.SERVER_COMMAND_PATH, operation].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

/**
 * returns the list of registered servers under a node in the collective.
 * @param {object} options.absolutePath - ... FIXME
 */
ServerCommand.getServerList = function(options) {
  var encoder = new Encoder();
  var mbeanResource = [ServerCommand.COLLECTIVE_PATH, 'hosts'];
  encoder.addString(mbeanResource.join('/'));
  encoder.addBoolean(options.absolutePath ? 'true' : 'false');
  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, 'getChildren'].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

/**
 * returns the list of registered servers under a node in the collective. FIXME
 */
// FIXME(sam) this function should be called getCollectiveHostsDescendantData
ServerCommand.getDescendantData = function() {
  var mbeanResource = [ServerCommand.COLLECTIVE_PATH, 'hosts'];
  return ServerCommand.getSubTree({ path: mbeanResource.join('/') });
};

/**
 * returns the list of registered servers under a node in the collective. FIXME
 * @param {object} options.path - Path ... FIXME
 */
// FIXME(sam) this function should be called getDescendantData
ServerCommand.getSubTree = function(options) {
  var encoder = new Encoder();
  encoder.addString(options.path);
  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, 'getDescendantData'].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

/**
 * returns the server start stop status commands.
 * @param {object} options - The options object.
 * @param {string} operation - The operation to set/delete/create a value in
 * the collective repository of the controller.
 */
ServerCommand.getSetDataInRegistry = function(options, operation) {
  var operations = {
    getData: 'getData',
    setData: 'setData',
    delete: 'delete',
    create: 'create',
  };
  assert(operations[operation], 'The operation does not exist.');
  var encoder = new Encoder();
  encoder.addString(options.path);
  if (operation === 'setData' || operation === 'create') {
    encoder.addSimpleValue(options.data, jmxTypes.String, jmxTypes.JavaObject);
  }
  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, operation].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

ServerCommand.createDataInRegistry = function(options) {
  var encoder = new Encoder();

  encoder.addString(options.path);
  encoder.addSimpleValue(null, null, jmxTypes.JavaObject);
  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, 'create'].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

/**
 * Returns a JMX payload representing a list of variables the Liberty
 * server should generate values for.
 * @param {object} options - The options object.
 * @param {string} options.host - The target host.
 * @param {Array<string>} options.list - The list of variables the server
 * should generate values for.
 * @returns {Payload}
 */
ServerCommand.allocateDeployVariables = function(options) {
  var encoder = new Encoder();
  assert(options, 'You must provide an object with a `host` value!');
  assert(options.host, 'You must specify the hostname of the machine!');
  encoder.addString(options.host);
  // The type is always string for the list of variables.
  encoder.addArray(options.list, Encoder.types.String);

  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, 'allocateDeployVariables'].join('/'),
    'POST',
    encoder.encodeJson()
  );
};

/**
 * Returns a JMX payload representing a list of variables the Liberty server
 * should release for reuse.
 * @param {object} options - The options object.
 * @param {string} options.host - The target host.
 * @param {object} options.hash - The hash (key-value-pair) of variables the
 * server should generate values for.
 * @param {string} type - The type of the map values. Defaults to Integer
 * (value most likely to be auto-generated/released).
 * @returns {Payload}
 */
ServerCommand.releaseDeployVariables = function(options) {
  var encoder = new Encoder();
  assert(options, 'You must provide an object with a `host` value!');
  assert(options.host, 'You must specify the hostname of the machine!');
  encoder.addString(options.host);
  // The type is always string for the list of variables.
  var type = options.type || Encoder.types.Integer;
  encoder.addMap(options.hash, Encoder.types.String, type);

  return new Payload(
    [ServerCommand.COLLECTIVE_MBEAN_PATH, 'releaseDeployVariables'].join('/'),
    'POST',
    encoder.encodeJson()
  );
};
