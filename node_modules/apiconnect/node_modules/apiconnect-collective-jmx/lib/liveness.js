// Copyright IBM Corp. 2015,2017. All Rights Reserved.
// Node module: apiconnect-collective-jmx
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var Encoder = require('./encoder');
var Payload = require('./payload');
var encode = require('../util/encode-liberty-path');
var jmxTypes = require('./encoder').types;
var mandatory = require('../util/mandatory');
var url = require('url');

// MBeans
var LIVENESS_REGISTRATION_MBEAN = '/IBMJMXConnectorREST/mbeans/' +
  'WebSphere%3Afeature%3DcollectiveController%2Cname%3DCollectiveRepository' +
  '%2Ctype%3DCollectiveRepository/operations/';

var COLLECTIVE_PATH = '/sys.was.collectives/local';

exports.LIVENESS_REGISTRATION_MBEAN = LIVENESS_REGISTRATION_MBEAN;

exports.Register = function(options) {
  var encoder = new Encoder();

  var memberData = {
    'liberty.host': mandatory(options.hostName.toLowerCase()),
    'liberty.userdir': mandatory(options.userDir),
    'liberty.servername': mandatory(options.serverName),
  };

  // Liberty will convert \\ to / when we join a collective
  // Liberty requires an encoded string for userDir
  memberData['liberty.userdir'] =
    memberData['liberty.userdir'].replace(/\\/gi, '/');
  memberData['liberty.userdir'] =
    encodeURIComponent(memberData['liberty.userdir']);

  var heartBeatInterval = String(mandatory(options.heartBeatInterval,
    'missing heartBeatInterval'));

  encoder.addSimpleValue(heartBeatInterval, jmxTypes.Integer, 'int');
  encoder.addMap(mandatory(memberData),
    jmxTypes.String, jmxTypes.String);
  return new Payload(url.resolve(LIVENESS_REGISTRATION_MBEAN,
      'registerMember'),
    'POST', encoder.encodeJson());
};

exports.Unregister = function(options) {
  var encoder = new Encoder();
  encoder.addString(mandatory(options.memberId, 'missing memberId'));
  return new Payload(url.resolve(LIVENESS_REGISTRATION_MBEAN,
      'deregisterMember'),
    'POST', encoder.encodeJson());
};

exports.HeartBeat = function(options) {
  var encoder = new Encoder();
  encoder.addString(mandatory(options.memberId, 'missing memberId'));
  if (options.newHeartBeatInterval) {
    var newHeartBeatInterval = options.newHeartBeatInterval;
    encoder.addSimpleValue(newHeartBeatInterval, jmxTypes.Integer, 'int');
  }
  return new Payload(url.resolve(LIVENESS_REGISTRATION_MBEAN, 'sendHeartBeat'),
    'POST', encoder.encodeJson());
};

exports.updateStatus = function(options) {
  mandatory(options.hostName, 'missing hostName');
  mandatory(options.wlpnUserDir, 'missing wlpnUserDir');
  mandatory(options.serverName, 'missing serverName');
  mandatory(options.status, 'missing status');

  var mbeanResource = buildFullResourceKey(
    options.hostName.toLowerCase(),
    options.wlpnUserDir,
    options.serverName,
    'sys.status');
  var encoder = new Encoder();
  encoder.addString(mandatory(mbeanResource, 'missing mbeanResource'));
  encoder.addSimpleValue(options.status.toString(),
    jmxTypes.String, jmxTypes.JavaObject);
  return new Payload(url.resolve(LIVENESS_REGISTRATION_MBEAN,
    'setData'),
    'POST', encoder.encodeJson());
};

exports.setJmxAuthInfo = function(options) {
  mandatory(options.hostName, 'missing hostName');
  mandatory(options.wlpnUserDir, 'missing wlpnUserDir');
  mandatory(options.serverName, 'missing serverName');
  mandatory(options.jmxHost, 'missing jmxHost');
  mandatory(options.jmxPort, 'missing jmxPort');

  var encoder = new Encoder();

  var mbeanResource = buildFullResourceKey(
    options.hostName.toLowerCase(),
    options.wlpnUserDir,
    options.serverName,
    'sys.jmx.auth.info');
  encoder.addString(mbeanResource);

  var info = {
    jmxHost: options.jmxHost,
    jmxPort: String(options.jmxPort),
  };
  encoder.addMap(info, jmxTypes.String, jmxTypes.String);
  encoder.payload.signature.pop(); // remove Map
  encoder.payload.signature.push(jmxTypes.JavaObject);

  var method = options.create ? 'create' : 'setData';
  return new Payload(
    url.resolve(LIVENESS_REGISTRATION_MBEAN, method),
    'POST',
    encoder.encodeJson());
};

function buildFullResourceKey(hostName, userDir, serverName, key) {
  var parts = [
    COLLECTIVE_PATH,
    'hosts',
    encode(hostName),
    'userdirs',
    encode(userDir),
    'servers',
    encode(serverName),
    encode(key),
  ];
  return parts.join('/');
}
