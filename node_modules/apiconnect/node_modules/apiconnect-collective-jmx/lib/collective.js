// Copyright IBM Corp. 2015,2017. All Rights Reserved.
// Node module: apiconnect-collective-jmx
// US Government Users Restricted Rights - Use, duplication or disclosure
// restricted by GSA ADP Schedule Contract with IBM Corp.

'use strict';

var Encoder = require('./encoder');
var Payload = require('./payload');
var assert = require('assert');
var jmxTypes = require('./encoder').types;
var mandatory = require('../util/mandatory');
var url = require('url');

// MBeans
var COLLECTIVE_REGISTRATION_MBEAN = '/IBMJMXConnectorREST/mbeans/' +
  'WebSphere%3Afeature%3DcollectiveController%2Cname%3DCollectiveRegistration' +
  '%2Ctype%3DCollectiveRegistration/operations/';

/**
 *
 * Operations for registering and unregistering host machines,
 * as well as joining and removing applications from a collective.
 * @class Collective
 */
module.exports = Collective;

function Collective() {};

/**
 * The path string for collective registration operations on a Liberty JMX
 * collective controller.
 */
Collective.COLLECTIVE_REGISTRATION_MBEAN = COLLECTIVE_REGISTRATION_MBEAN;

/**
 * Generates the JMX command to join a member server to a collective.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The hostname of the member.
 * @param {string} options.wlpUserDir - The path on the host to the 'usr'
 * folder that contains the member.
 * @param {string} options.serverName - The name of the member to join to the
 * collective.
 * @param {string} options.wlpInstallDir - The directory of the wlp
 * installation.
 * @param {string} options.keystorePassword - The password for the
 * certificates generated as a part of the collective join operation.
 * @param {object=} options.certProperties - An options object for changing the
 * behaviours of certificate generation.
 * @param {object} options.hostAuthInfo - An options object for defining
 * properties used by the collective to remotely access the host machine of the
 * member.
 * @param {string=} options.rpcHost - The Host address of the remote server
 * @param {string=} options.rpcUser - The username of an account
 * @param {string=} options.rpcUserHome - The UserHome directory of rpcUser
 * that can run RPC commands against the host. Does not apply if SSH is used.
 * @param {string=} options.rpcPort - The RPC port of the member
 * host. Does not apply if SSH is used.
 * @param {string=} options.rpcUserPassword - The password for the
 * user account running RPC commands. Does not apply if SSH is used.
 * @param {string=} options.hostAuthInfo.sudoUser - On systems where "sudo" is
 * available, this will be the username of a sudoer for elevating SSH commands.
 * Only applies to SSH.
 * @param {string=} options.sudoPassword - The password for the
 * sudoer. Only applies to SSH.
 * @param {string=} options.sshPublicKeyPath - The path to the SSH
 * public key.
 * @param {string=} options.sshPrivateKeyPath - The path to the SSH
 * private key.
 * @param {string=} options.sshPrivateKeyPassword - The password
 * for the SSH private key.
 * @param {boolean=} options.useHostCredentials - Tells the member
 * to inherit its credentials configuration from the host's configuration
 * (requires the host to already have been registered with the collective).
 * @param {Array=} options.hostReadList - The list of locations
 * on the host with allowed read access.
 * @param {Array=} options.hostWriteList - The list of locations
 * on the host with allowed write access.
 */
Collective.Join = function(options) {
  assert(options);

  var certProperties = {};

  if (options.serverIdentityCertificateValidity) {
    certProperties.serverIdentityCertificateValidity =
      options.serverIdentityCertificateValidity;
  }

  var hostAuthInfo = {
    collectiveMemberType: 'Node.js',
  };

  if (options.useSudo) {
    options.useSudo = options.useSudo.toString();
    hostAuthInfo.sudoUserPassword = mandatory(options.sudoUserPassword,
      'missing sudoUserPassword');
    hostAuthInfo.sudoUser = mandatory(options.sudoUser, 'missing sudoUser');
  }

  var encoder = new Encoder();
  encoder.addString(mandatory(options.hostName), 'missing hostName)');
  encoder.addString(mandatory(options.wlpUserDir), 'missing wlpUserDir)');
  encoder.addString(mandatory(options.serverName), 'missing serverName)');
  encoder.addString(mandatory(options.wlpInstallDir), 'missing wlpInstallDir)');
  encoder.addString(mandatory(options.keystorePassword),
    'missing keystorePassword)');
  encoder.addMap(certProperties, jmxTypes.String, jmxTypes.Integer);
  var hashMap = encoder.addMap(hostAuthInfo, jmxTypes.String, jmxTypes.String);
  encoder.addEntryToMap(hashMap, 'true', 'useHostCredentials',
                         jmxTypes.String, jmxTypes.Boolean);
  if (options.useSudo) {
    encoder.addEntryToMap(hashMap, options.useSudo, 'useSudo', jmxTypes.String,
                           jmxTypes.Boolean);
  }
  return new Payload(url.resolve(COLLECTIVE_REGISTRATION_MBEAN, 'join'),
    'POST', encoder.encodeJson());
};

/**
 * Generates the JMX command to remove a member server from a collective.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The hostname of the member.
 * @param {string} options.wlpUserDir - The path on the host to the 'usr'
 * folder that contains the member.
 * @param {string} options.serverName - The name of the member to join to the
 * collective.
 */
Collective.Remove = function(options) {
  var encoder = new Encoder();
  encoder.addString(mandatory(options.hostName, 'missing hostName'));
  encoder.addString(mandatory(options.wlpUserDir, 'missing wlpUserDir'));
  encoder.addString(mandatory(options.serverName, 'missing serverName'));
  return new Payload(url.resolve(COLLECTIVE_REGISTRATION_MBEAN, 'remove'),
    'POST', encoder.encodeJson());
};

/**
 * Generates the JMX command to register a host in a collective.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The hostname of the member.
 * @param {string=} options.rpcHost - The Host address of the remote server
 * @param {string=} options.rpcUser - The username of an account
 * @param {string=} options.rpcUserHome - The UserHome directory of rpcUser
 * that can run RPC commands against the host. Does not apply if SSH is used.
 * @param {string=} options.rpcPort - The RPC port of the member
 * host. Does not apply if SSH is used.
 * @param {string=} options.rpcUserPassword - The password for the
 * user account running RPC commands. Does not apply if SSH is used.
 * * @param {string=} options.sshPrivateKeyPath - The path to the SSH
 * private key.
 * @param {string=} options.sshPrivateKeyPassword - The password
 * for the SSH private key.
 */
Collective.registerHost = function(options) {
  var encoder = prepareRegisterHostEncoder(options);
  return new Payload(url.resolve(COLLECTIVE_REGISTRATION_MBEAN,
    'registerHost'), 'POST', encoder.encodeJson());
};

/**
 * Generates the JMX command to unregister a host.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The hostname of the member.
 */
Collective.unregisterHost = function(options) {
  assert(options);
  var encoder = new Encoder();
  encoder.addString(mandatory(options.hostName, 'missing hostName'));
  return new Payload(url.resolve(COLLECTIVE_REGISTRATION_MBEAN,
    'unregisterHost'), 'POST', encoder.encodeJson());
};

/**
 * Generates the JMX command to update a host info.
 * @param {object} options - The options object.
 * @param {string} options.hostName - The hostname of the member.
 * @param {string=} options.rpcHost - The Host address of the remote server
 * @param {string=} options.rpcUser - The username of an account
 * @param {string=} options.rpcUserHome - The UserHome directory of rpcUser
 * that can run RPC commands against the host. Does not apply if SSH is used.
 * @param {string=} options.rpcPort - The RPC port of the member
 * host. Does not apply if SSH is used.
 * @param {string=} options.rpcUserPassword - The password for the
 * user account running RPC commands. Does not apply if SSH is used.
 * * @param {string=} options.sshPrivateKeyPath - The path to the SSH
 * private key.
 * @param {string=} options.sshPrivateKeyPassword - The password
 * for the SSH private key.
 */
Collective.updateHost = function(options) {
  var encoder = prepareRegisterHostEncoder(options);
  return new Payload(url.resolve(COLLECTIVE_REGISTRATION_MBEAN,
    'updateHost'), 'POST', encoder.encodeJson());
};

function prepareRegisterHostEncoder(options) {
  assert(options);
  var encoder = new Encoder();
  var hostAuthInfo = {
    rpcHost: mandatory(options.rpcHost),
    rpcUser: mandatory(options.rpcUser),
    collectiveMemberType: 'Node.js',
  };

  if (options.sshPrivateKey) {
    hostAuthInfo.sshPrivateKey = options.sshPrivateKey;
    if (options.sshPrivateKeyPassword) {
      hostAuthInfo.sshPrivateKeyPassword = options.sshPrivateKeyPassword;
    }
  } else {
    // if ssh is not provided JMX mandates rpcPassword to be provided.
    hostAuthInfo.rpcUserPassword = mandatory(options.rpcUserPassword,
      'rpcUserPassword should be provided');
  }

  encoder.addString(mandatory(options.hostName, 'missing hostName'));
  var hashMap = encoder.addMap(hostAuthInfo, jmxTypes.String, jmxTypes.String);
  encoder.addEntryToMap(hashMap, mandatory(options.rpcPort,
    'rpcPort is missing'), 'rpcPort', jmxTypes.String, jmxTypes.Integer);
  return encoder;
}
