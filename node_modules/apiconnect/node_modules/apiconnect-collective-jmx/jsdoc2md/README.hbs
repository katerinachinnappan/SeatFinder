# apiconnect-collective-jmx

## Overview
The apiconnect-collective-jmx library provides helper functions for
communicating with a WAS Liberty Collective, as well as JMX encoding tools to
allow creation of custom JMX messages.

## Usage
Install by running `npm i --save apiconnect-collective-jmx`.

## Pre-defined Modules
This toolkit comes with a collection of modules and functions for
performing operations against a collective.

#### Example
```js
var jmx = require('apiconnect-collective-jmx');
var path = require('path');
var payload = jmx.collective.registerHost({
  rpcHost: 'someHost',
  rpcUser: 'someUser',
  sshPrivateKey: path.resolve('path', 'to', 'key_rsa');
});
```

For a full list, see the [API Reference](#api-reference).

## Make your own JMX requests
If there are no helper libraries defined for the JMX calls you'd like
to make, then you have the option of defining your own using the same
common modules used throughout this toolkit.

### Simple Example
Using the Encoder, Payload and Endpoint objects, you can construct a JMX
payload with the Encoder, target the REST resource with the Payload and then
send the request to a specific server with Endpoint!

```js
var jmx = require('apiconnect-collective-jmx');
var Encoder = jmx.Encoder;
var Payload = jmx.Payload;
var Endpoint = jmx.Endpoint;
var url = require('url');

// Make an encoder instance.
var encoder = new Encoder();

// Add parameters in order!
// Pretend we're calling an endpoint that takes a title (string), a size (int)
// and whether or not it's available (boolean).
encoder.addString('foo');
encoder.addNumber(2);
encoder.addBoolean(true);
// Send a JMX payload to {host:port}/targetResource!
var payload = new Payload('/targetResource', 'POST', encoder.encodeJson());

// Can also take a 3rd options param!
var controller = new Endpoint('localhost', '9443');

// Give it the payload, options and a callback!
controller.request(payload, {}, function(err, response) {
  if (err) console.error('oh noes!');
  else {
    console.log('Made a new widget!');
    console.log(response);
  }
});

```

## Advanced Usage

### Types
Here are the Java types available on the Encoder's `types` object:
- JavaObject (java.lang.Object)
- String (java.lang.String)
- Integer (java.lang.Integer)
- Double (java.lang.Double)
- Boolean (java.lang.Boolean)
- HashMap (java.util.HashMap)
- ArrayList (java.util.ArrayList)

Using these static type definitions will simplify your usage, and
help avoid typos within Java types on your payloads.
See the examples below for usage of the `Encoder.types` collection.

### Add an Array

```js
var names = ['foo', 'bar' ];
var encoder = new Encoder();
encoder.addArray(names, encoder.types.String);
```

### Add a Map

```js
var map = {
  'foo': 2,
  'bar': 3,
};
var encoder = new Encoder();
encoder.addMap(map, encoder.types.String, encoder.types.Integer);
```

### Add a Custom Value
Using the encoder doesn't limit you to the predefined types! In fact, you
can create your own custom entries with the `addSimpleValue` function.

If you know the expected Java type at the target API level, you can specify
it as a string!

```js
var widgetInstance = getMagicWidget();
var encoder = new Encoder();

encoder.addSimpleValue(widgetInstance, 'com.foobar.Widget', 'java.lang.Object');
```

# API Reference
{{#module name="apiconnect-collective-jmx"}}
{{>main~}}
{{/module}}
