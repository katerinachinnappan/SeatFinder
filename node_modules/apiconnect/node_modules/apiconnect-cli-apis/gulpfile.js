/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-apis

var gulp = require('gulp');
var gutil = require('gulp-util');
var jshint = require('gulp-jshint');
var mocha = require('gulp-mocha');
var exit = require('gulp-exit');
var istanbul = require('gulp-istanbul');

var paths = {
  tests: 'test/*.js',
  sources: [ '**/*.js', '*.js', '!node_modules/**' ],
  yamls: [ '**/*.yaml', '**/*.yml', '!node_modules/**' ],
};

gulp.task('lint', function() {
  return gulp.src(paths.sources)
      .pipe(jshint({ laxcomma: true }))
      .pipe(jshint.reporter('default'));
});
/**
 * Run the mocha tests
 */
gulp.task('tests', function() {
  return gulp.src(paths.tests, { read: false })
      .pipe(mocha({ reporter: 'spec' }))
      .pipe(exit())
      .on('error', gutil.log);
});

gulp.task('watch', function() {
  gulp.watch(paths.sources, [ 'lint', 'tests' ]);
});

var cleaner = function(stream) {
  stream.listeners('error').forEach(function(item) {
    if (item.name === 'onerror') {
      this.removeListener('error', item);
    }
    console.log('removed listener (' + item.name + ') for error');
  }, stream);
};

var continueOnError = function(stream) {
  return stream
      .on('error', function() {})
      .on('newListener', function() {
        cleaner(this);
      });
};

gulp.task('coverage', function() {
  return gulp.src([ 'lib/**/*.js' ])
      .pipe(istanbul({ includeUntested: true })) // Covering files
      .pipe(istanbul.hookRequire()) // Force `require` to return covered files
      .on('finish', function() {
        gulp.src(paths.tests)
            .pipe(continueOnError(mocha({ reporter: 'spec' })))
            .pipe(istanbul.writeReports()) // Creating the reports after tests ran
            .on('error', gutil.log);
      });
});

gulp.task('default', [ 'lint', 'tests' ]);

