/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-auth

var Promise = require('bluebird');
var debug = require('debug')('apiconnect-cli-version-checker');
var g = require('strong-globalize')();
var serverMeta = require('apiconnect-cli-util').serverMeta;
var util = require('./util');

function VersionCheckAgent(cmd, options) {
  this._cmd = cmd || {};
  this._cmdOptions = options || {};
}

VersionCheckAgent.prototype.start = function() {
  return this.checkVersion();
};

VersionCheckAgent.prototype.checkVersion = function() {
  // Favor command options over configuration!
  var server = this._cmdOptions.server;
  var log = this._cmdOptions.log;
  var pkgInfo = this._cmdOptions.pkgInfo;

  if (!server) {
    // skip the check if server is not available
    return Promise.resolve();
  }
  // get the metadata
  var serverConfig = {
    host: server,
    data: {},
  };
  return serverMeta.getMetadata(serverConfig, { forceRefresh: true })
    .catch(function(err) {
      // error getting metadata, log and skip check
      log.info(err);
    }).then(function(meta) {
      debug(meta);
      if (!meta) {
        return Promise.resolve();
      }
      var version_minimum = meta.minimumVersion();
      var version_recommended = meta.recommendedVersion();
      var name = pkgInfo.name;
      var version = pkgInfo.version;
      var productName = pkgInfo['product-name'] || 'API Connect';

      if (version && version_minimum) {
        if (util.compareVersion(version, version_minimum) < 0) {
          // error and reject
          var errorMsg = g.f('%s Toolkit version %s+ is required.' +
            ' Update your Toolkit version by entering {{\'npm install -g %s\'}}.',
            productName, version_minimum, name);
          var err = new Error(errorMsg);
          return Promise.reject(err);
        }
      }

      if (version && version_recommended) {
        if (util.compareVersion(version, version_recommended) < 0) {
          log.warn(g.f('A critical update to the %s Toolkit is available.' +
            ' Update to version %s by entering {{\'npm install -g %s\'}}.',
            productName, version_recommended, name));
          // warn but resolve
          return Promise.resolve();
        }
      }
      return Promise.resolve();
    });
};

module.exports = VersionCheckAgent;

