/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-plugins

var Promise = require('bluebird');
var _ = require('lodash');
var d = require('debug')('apiconnect:lib:plugins');
var fsExtra = require('fs-extra');
var g = require('strong-globalize')();
var l = require('apiconnect-cli-logger');
var path = require('path');
var pluginLoader = require('./plugin-loader');
var readFile = Promise.promisify(require('fs').readFile);

module.exports = {
  name: 'plugins',
  version: require('../package.json').version,
  path: __filename,
  isBuiltin: true,
  topics: [ {
    name: 'plugins',
    commands: [
      {
        command: 'install <plugin>',
        options: [ '-r, --registry [URL]' ],
        helpInfo: function() {
          return g.f('apic_plugins_install_help.txt');
        },
        action: installPlugin,
        aliases: [],
      }, {
        command: 'uninstall <plugin>',
        options: [],
        helpInfo: function() {
          return g.f('apic_plugins_uninstall_help.txt');
        },
        action: uninstallPlugin,
        aliases: [],
      }, {
        command: 'list',
        options: [],
        helpInfo: function() {
          return g.f('apic_plugins_list_help.txt');
        },
        action: listPlugins,
        aliases: [ 'plugins' ],
      },
    ],
  } ],
};

function installPlugin(pluginUri, options) {
  d('installPlugin %s', pluginUri);
  return resolveRegistry(pluginUri, options).then(function(reg) {
    return pluginLoader.installPlugin(pluginUri, reg);
  }).catch(function(err) {
    l.error(g.f('Unable to install plugin from %s: %s', pluginUri, err.message));
    throw err;
  });
}

function resolveRegistry(dir, options) {
  return new Promise(function(resolve, reject) {
    if (options.registry) {
      d('resolveRegistry options.registry : %s', options.registry);
      return setImmediate(resolve, options.registry);
    }
    return readFile(path.resolve(dir, '.npmrc'), 'utf8').then(function(data) {
      d('resolveRegistry .npmrc : %s', dir);
      var res;
      data.toString().split('/n').forEach(function(line) {
        var entry = line.split('=');
        if (entry && entry.length === 2 && entry[0] === 'registry') {
          if (res) {
            // Incorrect-ish .npmrc file as there are multiple registries defined
            d('resolveRegistry found multiple registry entries. using first %s', res);
            return;
          }
          d('resolveRegistry %/.npmrc => %s', dir, res);
          res = entry[1].trim();
        }
      });
      return resolve(res);
    }).catch(function(err) {
      d('resolveRegistry err', err);
      return resolve();
    });
  });
}

function uninstallPlugin(pluginName, options) {
  return pluginLoader.loadPlugins().then(function(plugins) {
    var pluginInfo = _(plugins).find({ name: pluginName });
    var err;
    if (!pluginInfo) {
      err = g.f('Plugin %s is not installed', pluginName);
      throw new Error(err);
    }
    if (pluginInfo.isBuiltin) {
      err = g.f('Cannot remove built-in plugin: %s', pluginName);
      throw new Error(err);
    }
    fsExtra.removeSync(pluginInfo.path);
    return;
  });
}

function listPlugins(options) {
  return pluginLoader.loadPlugins().then(function(plugins) {
    _(plugins)
      .orderBy([ 'name', 'version' ], [ 'asc', 'desc' ])
      .each(function(plugin) {
        printVer(plugin, 1);
      });
  });
}

function printVer(pkg, indent) {
  for (var i = 0; i < indent; i++) {
    l.write(' ');
  }
  if (pkg.gitHead) {
    l.writeln('%s %s (%s)', pkg.name, pkg.version, pkg.gitHead);
  } else {
    l.writeln('%s %s', pkg.name, pkg.version);
  }
  if (pkg.deps) {
    pkg.deps.forEach(function(dep) {
      printVer(dep, indent + 1);
    });
  }
}

module.exports.listPlugins = listPlugins;

