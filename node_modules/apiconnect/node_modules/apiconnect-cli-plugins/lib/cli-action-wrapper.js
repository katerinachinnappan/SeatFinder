/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect

var Command = require('commander').Command;
var _ = require('lodash');
var apicConfig = require('apiconnect-config');
var util = require('./util');

function actionWrapper(cmd, components, cmdOptions) {
  return function() {
    var args = Array.apply(null, arguments);

    // options not always the last object but are an instance of Command
    var options = _.find(args, function(arg) {
      return arg instanceof Command;
    });

    // copy  options into
    _.assign(options, cmdOptions);

    options.apicConfig = apicConfig.loadConfig();
    options.components = components;
    options.componentMap = _.reduce(components, function(map, c) {
      map[c.name] = c.ctor;
      return map;
    }, {});

    options.logger.debug('invoking %s', cmd.fullName);

    // CLI Analytics
    if (cmdOptions.enableAnalytics && options.componentMap['analytics-agent']) {
      var AnalyticsAgent = options.componentMap['analytics-agent'];
      var analyticsAgent = options.analyticsAgent = new AnalyticsAgent(cmdOptions);
      var cmdProperties = {
        pluginName: cmd.pluginName,
        pluginGitHead: cmd.pluginGitHead,
        pluginVersion: cmd.pluginVersion,
      };
      analyticsAgent.start().then(function() {
        if (typeof cmd.analytics === 'function') {
          return cmd.analytics.apply(this, args);
        } else {
          options.logger.debug('No analytics function for %s', cmd.fullName);
          return {};
        }
      }).then(function(extraProperties) {
        _.assign(cmdProperties, extraProperties);
        options.logger.debug('cmdProperties: %j', cmdProperties);
        analyticsAgent.logCommand(cmd.fullName, _filterOptions(options), cmdProperties);
      });
    }

    // fill in defaults for options & check required params
    _(cmd.options).each(function(cmdOpt) {
      if (typeof cmdOpt === 'object') {
        cmdOpt.optName = _.camelCase(cmdOpt.name);
        if (!options[cmdOpt.optName]) {
          if (cmdOpt.default) {
            // if populated by default value, mark it as defaulted
            options[cmdOpt.optName] = util.getOptionDefault(cmdOpt, options.apicConfig);
          }
        }

        // if required, ensure that value was passed in or default was picked up
        if (!options[cmdOpt.optName] && cmdOpt.required) {
          util.getMissingOptionError(cmdOpt);
        }
      }
    });

    var promiseChain = util.checkExtraArgs(cmd, options);

    // Check if the version meets the minimum and recommended version
    if (cmdOptions.enableVersionCheck && options.componentMap['version-check-agent']) {
      var VersionCheckAgent = options.componentMap['version-check-agent'];
      var versionCheckAgent = options.versionCheckAgent = new VersionCheckAgent(cmd, options);
      promiseChain = promiseChain.then(function() {
        return versionCheckAgent.start();
      });
    }
    // If loginRequired is set in cmd, ensure we are logged in.
    if (cmd.loginRequired || cmd.loginOptional) {
      var AuthAgent = options.componentMap['auth-agent'];
      var authAgent = options.authAgent = new AuthAgent(cmd, options);

      promiseChain = promiseChain.then(function() {
        return authAgent.start().then(function() {
          return authAgent.checkLogin();
        }).then(function(creds) {
          options.creds = {};
          _.assign(options.creds, authAgent.getCredentials());
        });
      });
    }

    promiseChain = promiseChain.then(function() {
      return cmd.action.apply(this, args);
    });

    options.parent.actionPromise = promiseChain.finally(function() {
      if (analyticsAgent) {
        return analyticsAgent.flush();
      }
    });
  };
}

function _filterOptions(options) {
  return _(options).keys().filter(function(o) {
    return !o.match(/^_/) && [
      'analyticsAgent',
      'apicConfig',
      'commands',
      'componentMap',
      'components',
      'description',
      'isBuiltin',
      'logger',
      'missingArgument',
      'optionMissingArgument',
      'options',
      'outputHelp',
      'parent',
      'topic',
      'unknownOption',
    ].indexOf(o) === -1 && !!options[o];
  }).value();
}

module.exports = actionWrapper;

