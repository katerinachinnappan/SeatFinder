/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect

var Promise = require('bluebird');
var _ = require('lodash');
var debug = require('debug')('apiconnect:license');
var fs = require('fs');
var getConfigDir = require('./util').getConfigDir;
var logger = require('apiconnect-cli-logger');
var path = require('path');
var userConfirmed = require('../lib/user-confirmation');

var CONFIG_DIR = getConfigDir();
var LICENSE_ACCEPTED = path.join(CONFIG_DIR, '.license-accepted');

function licenseAgreed() {
  var data = {
    stamp: confirmationStamp(LICENSE_ACCEPTED),
  };

  var p;
  if (data.stamp && data.stamp < Date.now()) {
    debug('License was accepted on %s', data.stamp);
    p = Promise.resolve(initGlobalize());
  } else {
    initGlobalize();
    p = userConfirmed().then(function() {
      data.stamp = recordConfirmation(CONFIG_DIR, LICENSE_ACCEPTED);
    }).catch(function() {
      return logger.exit(1);
    });
  }

  return p.then(function cleanupArgs() {
    var acceptLicenseIdx = _.indexOf(process.argv, '--accept-license');
    if (acceptLicenseIdx !== -1) {
      process.argv.splice(acceptLicenseIdx, 1);
    }
  });
}
module.exports = licenseAgreed;

function initGlobalize() {
  // TODO globalization initialization here
}

function confirmationStamp(confirmationFile) {
  var stamp = null;
  try {
    stamp = fs.readFileSync(confirmationFile, 'utf8');
    stamp = parseInt(stamp, 10);
  } catch (e) {
    debug('confirmationStamp err: ' + e);
    return null;
  }
  return stamp;
}

function recordConfirmation(confirmationDir, confirmationFile) {
  var stamp = Date.now();
  try {
    fs.writeFileSync(confirmationFile, stamp.toString(), 'utf8');
  } catch (e) {
    debug('recordConfirmation err: ' + e);
    return null;
  }
  return stamp;
}

