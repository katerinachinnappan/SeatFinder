/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect

var Promise = require('bluebird');
var checkLicense = require('./license');
var checkAnalytics = require('./tracking-agreement');
var config = require('apiconnect-config').loadConfig();
var fs = require('fs');

/**
 * Builds a cli command
 *
 * @param {object} [options]
 *  cwd - working directry of main command
 *  pkg - path to package.json
 *  lic - path to licence file, if exist, the file will be
 *        used to check for license
 *  al - path to analytics license file, if exist, the file
 *       will be used to check for analytics agreement
 */
function cli(opts) {

  var cliPlugins = require('../index');
  var loadPlugins = cliPlugins.pluginLoader.loadPlugins;
  var buildCli = cliPlugins.buildCli;
  var chain = [];
  var promisesChain = sequence.bind(null, chain);

  cliPlugins.init(opts.cwd);

  if (opts.lic) {
    chain.push(checkLicense);
  }
  if (opts.al) {
    chain.push(checkAnalytics.bind(null, opts.al));
  }

  return checkOpts(opts)
    .then(promisesChain)
    .then(function() {
      // We don't want to pass the results onto loadPlugins
      return loadPlugins();
    })
    .then(function(plugins) {
      var pkg = require(opts.pkg);
      var cmdOptions = {
        typeDescriminators: opts.typeDescriminators,
      };
      if (opts.al) {
        cmdOptions.agreements = opts.agreements || {};
        cmdOptions.agreements.analytics = opts.al;
        cmdOptions.enableAnalytics = config.getOne('enable-analytics');
      };
      var cmd = buildCli(pkg, plugins, cmdOptions);
      return cmd(process.argv);
    });
};

function checkOpts(opts) {
  var paths = [];
  if (opts.pkg) {
    paths.push(opts.pkg);
  }
  if (opts.lic) {
    paths.push(opts.lic);
  }
  if (opts.al) {
    paths.push(opts.al);
  }
  return Promise.try(function() {
    for (var i = 0; i < paths.length; i++) {
      fs.accessSync(paths[i]);
    }
    return;
  });
}

function sequence(tasks) {
  var current = Promise.cast();
  var results = [];
  for (var k = 0; k < tasks.length; ++k) {
    results.push(current = current.then(tasks[k]));
  }
  return Promise.all(results);
}

module.exports = cli;

