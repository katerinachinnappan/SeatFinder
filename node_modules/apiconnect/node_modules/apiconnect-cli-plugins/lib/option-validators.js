/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
var _ = require('lodash');
var f = require('sprintf-js').sprintf;
var fs = require('fs');

exports.getValidator = function(option) {
  var regex, err;

  switch (option.type) {
    case 'name':
      regex = /^[A-Za-z0-9_\-]+$/;
      err = 'The value of --%(option.name)s is invalid; it must only contain a-z, A-Z, 0-9, - and _.%(fail)s';
      return validator.bind(null, option, regex, err);
    case 'name-list':
      regex = /^[A-Za-z0-9_\-]+([ ][A-Za-z0-9_\-]+)*$/;
      err = 'The value of --%(option.name)s is invalid; it must only contain a-z, A-Z, 0-9, - and _.%(fail)s';
      return validator.bind(null, option, regex, err);
    case 'name-version':
      regex = /^[A-Za-z0-9_\-]+[:][A-Za-z0-9_\-\. ]+$/;
      err = 'The value of --%(option.name)s is invalid; it must include NAME:VERSION and only contain a-z, A-Z,' +
        ' 0-9, :, - and _.%(fail)s';
      return validator.bind(null, option, regex, err);
    case 'name-optversion':
      regex = /^[A-Za-z0-9_\-]+([:][A-Za-z0-9_\-\. ]+)?$/;
      err = 'The value of --%(option.name)s is invalid; it must only contain a-z, A-Z, 0-9, :, - and _.%(fail)s';
      return validator.bind(null, option, regex, err);
    case 'file':
      err = 'The value of --%(option.name)s is invalid; it must be a valid file path.%(fail)s';
      return pathValidator.bind(null, option, err);
    case 'dir':
      err = 'The value of --%(option.name)s is invalid; it must be a valid directory path.%(fail)s';
      return pathValidator.bind(null, option, err);
    case 'enum':
      err = 'The value of --%(option.name)s is invalid; it must be one of %(csValues)s, or %(lastValue)s.';
      return enumValidator.bind(null, option, err);
    default:
      return function(value) {
        return value;
      };
  }
};

function enumValidator(option, err, val) {
  if (option.values.indexOf(val) === -1) {
    throw new Error(f(err, {
      option: option,
      csValues: option.values.slice(0, -1).join(', '),
      lastValue: option.values.slice(-1),
    }));
  }
  return val;
}

function pathValidator(option, err, val) {
  if (option.nary) {
    // Note: we want to split on space except when escaped (`\ `). However, Node doesnt support regex lookbehind.
    // This is a work-around in order to allow `\ ` escape seq.
    // Note: there is a possible edge case here due to `\` being an path sep on windows
    val = val.replace('\\ ', '\u0000');
    val = _.map(val.split(' '), function(v) {
      return v.replace('\u0000', ' ');
    });
    if (option.mustExist) {
      _.each(val, statFile);
    }
  } else {
    statFile(val);
  }
  return val;

  function statFile(v) {
    var s;
    try {
      s = fs.statSync(v);
    } catch (err) {
      throw new Error(f('Unable to open %s', v));
    }
    if ((option.type === 'file' && !s.isFile()) || (option.type === 'dir' && !s.isDirectory())) {
      throw new Error(f(err, { option: option, fail: ' ' + v }));
    }
  }
}

function validator(option, regex, err, val) {
  if (option.nary) {
    // Note: we want to split on space except when escaped (`\ `). However, Node doesnt support regex lookbehind.
    // This is a work-around in order to allow `\ ` escape seq.
    val = val.replace('\\ ', '\u0000');
    val = _.map(val.split(' '), function(v) {
      return v.replace('\u0000', ' ');
    });

    var failed = _.filter(val, function(v) {
      return !v.match(regex);
    });
    if (failed.length > 0) {
      throw new Error(f(err, {
        option: option,
        fail: ' (' + failed.join(', ') + ')',
      }));
    }
  } else if (!val.match(regex)) {
    throw new Error(f(err, {
      option: option,
      fail: '',
    }));
  }
  return val;
}

