/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
// Node module: apiconnect-cli-util

/*eslint brace-style: 0, max-len: 0*/

var util = require('util');

/**
 * Default Constructor that creates a server error
 *
 * @param statusCode
 * @param body
 * @constructor
 */
function ServerError(statusCode, body) {
  try {
    if (statusCode === 502 || statusCode === 503 || statusCode === 504) {
      this.body = body;
      this.message = body;
    }
    else {
      this.body = body && typeof body === 'string' ? JSON.parse(body) : body;
      if (!this.body.message && body) {
        this.message = body;
      }
      else {
        this.message = this.body.message;
      }
    }
  }
  catch (error) {
    console.error(error);
    this.message = this.body;
  }
  this.statusCode = statusCode;
}

util.inherits(ServerError, Error);
/**
 * Return the stringified format of the error.
 *
 */
ServerError.prototype.toString = function() {
  var prop;
  var i;
  var e;
  if (this.body && this.body.errors) {
    for (i = 0; i < this.body.errors.length; i++) {
      e = this.body.errors[i];
      for (prop in e) {
        return e[prop];
      }
    }
  }
  var error;
  try {
    error = typeof this.body === 'string' ?
      this.body : JSON.stringify(this.body);
    return error;
  }
  catch (ex) {
    error = this.body;
  }

  if (this.message) {
    return this.message;
  }

  if (this.body && this.body.message) {
    return this.body.message;
  }
  if (!error) {
    return this.body;
  }
  if (error.message) {
    return error.message;
  }
  if (error.error) {
    if (typeof error.error === 'object') {
      var str = '';
      for (prop in error.error) {
        str += prop + ': ' + error.error[prop];
        str += ' -- ';
      }
      //str += '\n';
      return str;
    }
    else {
      for (i = 0; i < error.error.length; i++) {
        e = error.error[i];
        for (prop in e) { //jshint ignore:line
          return e[prop];
        }
      }
    }
  }

  return this.body;
};

module.exports = ServerError;

