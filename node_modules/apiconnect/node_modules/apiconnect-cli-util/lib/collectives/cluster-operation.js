/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var clusterApi = Promise.promisifyAll(require('apiconnect-collective-controller-api').cluster);
var f = require('util').format;
var request = require('request-promise');

module.exports = Cluster;

/**
 * @typedef ClusterOption
 * @param {String} clusterName The cluster name
 * @param {String} host The controller host.
 * @param {String} port The controller port.
 * @param {String} user The controller administrative user.
 * @param {String} password The controller administrative user's password.
 */

/**
 * @param {ClusterOption} options
 */
function Cluster(options) {
  this._clusterApi = (options && options.clusterApi) || clusterApi;
  this._clusterUri = {
    host: options.host,
    port: options.port,
    username: options.user,
    password: options.password,
    autoAcceptCertificates: true,
  };
};

Cluster.prototype.list = function(options) {
  options = options || {};
  var opts = _.merge({}, options, this._clusterUri);
  return this._clusterApi.listClusterNamesAsync(opts);
};

Cluster.prototype.getStatus = function(options) {
  options = options || {};
  var opts = _.merge({}, options, this._clusterUri);
  return request({
    url: f(
      'https://%s:%s/ibm/api/collective/v1/clusters/%s',
      opts.host, opts.port, 'apic.' + opts.clusterName
    ),
    auth: {
      user: opts.username,
      pass: opts.password,
      sendImmediately: true,
    },
    strictSSL: false,
    json: true,
  }).then(function(res) {
    switch (res.state) {
      case 'STOPPED': return 'offline';
      case 'STARTED': return 'online';
      default: return 'partially online';
    }
  });
};

/**
 * Starts or restarts the given cluster.
  * @param {ClusterOption} options
 */
Cluster.prototype.start = function(options) {
  var self = this;
  options = options || {};
  return this.getStatus(options).then(function(status) {
    var opts = _.merge({}, options, self._clusterUri);
    if (status === 'offline') {
      return self._clusterApi.startClusterAsync(
        _.pick(opts, [ 'clusterName', 'host', 'port', 'username', 'password', 'autoAcceptCertificates' ])
      );
    } else {
      return self._clusterApi.stopClusterAsync(
        _.pick(opts, [ 'clusterName', 'host', 'port', 'username', 'password', 'autoAcceptCertificates' ])
      ).then(function() {
        return self._clusterApi.startClusterAsync(
          _.pick(opts, [ 'clusterName', 'host', 'port', 'username', 'password', 'autoAcceptCertificates' ])
        );
      });
    }
  });
};

/**
 * Stops the given cluster.
 * @param {ClusterOption} options
 */
Cluster.prototype.stop = function(options) {
  var self = this;
  options = options || {};
  return this.getStatus(options).then(function(status) {
    if (status !== 'offline') {
      var opts = _.merge({}, options, self._clusterUri);
      return self._clusterApi.stopClusterAsync(
        _.pick(opts, [ 'clusterName', 'host', 'port', 'username', 'password', 'autoAcceptCertificates' ])
      );
    }
  });
};

/**
 * Restarts the given cluster.
 * @param {ClusterOption} options
 */
Cluster.prototype.restart = Cluster.prototype.start;

