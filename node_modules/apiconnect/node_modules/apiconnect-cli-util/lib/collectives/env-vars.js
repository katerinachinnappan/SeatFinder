/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2016, 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var g = require('strong-globalize')();
var server = Promise.promisifyAll(require('apiconnect-collective-controller-api').server);

var CLUSTER_NODE = '/sys.wlpn.internal/cluster/';

module.exports = Environment;

/**
 * @typedef ClusterOption
 * @param {String} clusterName The cluster name
 * @param {String} host The controller host.
 * @param {String} port The controller port.
 * @param {String} user The controller administrative user.
 * @param {String} password The controller administrative user's password.
 */

/**
 * @param {ClusterOption} options
 */
function Environment(options) {
  options = options || {};
  this._clusterUri = {
    host: options.host,
    port: options.port,
    user: options.user,
    password: options.password,
    clusterName: options.clusterName,
    autoAcceptCertificates: true,
  };
  this._server = (options && options.server) || server;
};

/**
 * Get environment variables for an application cluster.
 * @param {Array<String>} names - Array of names to retrieve.
 * @param {ClusterOption} options
 * @returns {object} - A hash object of keys and values.
 */
Environment.prototype.getVars = function(names, options) {
  var self = this;
  return Promise.map(names, function(key) {
    var opts = _.merge({}, options, self._clusterUri, { key: key });
    return self._server.getClusterDataAsync(opts).catch(function() {
      return null;
    });
  }).then(function(results) {
    return _.omitBy(_.zipObject(names, results), _.isNull);
  });
};

/**
 * Get environment variables for an application cluster.
 * @param {Object} nameValues
 * @param {ClusterOption} options
 * @returns {object} - A hash object of keys and values.
 */
Environment.prototype.setVars = function(nameValues, options) {
  var self = this;
  return Promise.map(_.keys(nameValues), function(name) {
    var opts = _.merge({}, options, self._clusterUri, { key: name, data: nameValues[name] });
    return self._server.setClusterDataAsync(opts);
  });
};

/**
 * Delete environment variable for an application cluster.
 * @param {Array<string>} names - The variable names.
 * @param {ClusterOption} options
 */
Environment.prototype.deleteVars = function(names, options) {
  var self = this;
  return Promise.map(names, function(key) {
    var opts = _.merge({}, options, self._clusterUri, { key: key });
    return self._server.deleteClusterDataAsync(opts);
  });
};

/**
 * Delete ALL environment variables for an application cluster.
 * @param {ClusterOption} options
 */
Environment.prototype.clearVars = function(options) {
  return Promise.reject(g.f('Not implemented!'));
};

/**
 * List environment variables for an application cluster.
 * @param {ClusterOption} options
 * @returns {object} - A hash object of keys and values.
 */
Environment.prototype.listVars = function(options) {
  // FIX me refactor jmx and move this line to jmx component for encapsulation.
  var path = [ CLUSTER_NODE, this._clusterUri.clusterName, 'env' ].join('/');
  var opts = _.merge({}, options, this._clusterUri, { path: path });
  return this._server.listClusterDataAsync(opts);
};

