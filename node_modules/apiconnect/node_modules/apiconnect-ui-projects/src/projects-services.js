/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';


module.exports = [
  '$http',
  '$log',
  '$q',
  '$localStorage',
  '$modal',
  '$rootScope',
  'Workspace',
  function ProjectsServices(
  $http,
  $log,
  $q,
  $localStorage,
  $modal,
  $rootScope,
  Workspace
){
  var svc = {};

  svc.openAddNewOpenApiProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-openapi-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddOpenApiProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.openAddNewLoopbackProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-loopback-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddLoopbackProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.openAddExistingProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.showProjectSettings = function($event, $scope){
    // defaults
    var controller =  'OpenApiSettingsController';
    var templateOpenApi = require('./partials/openapi-project-settings.html');
    var templateLoopback = require('./partials/loopback-project-settings.html');
    var template = templateOpenApi;

    // override defaults if loopback project
    if ($scope.activeProject.projectType === 'loopback'){
      controller =  'LoopbackSettingsController';
      template = templateLoopback;
    }

    $modal.open({
      template: template,
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: controller,
      size: 'md',
      scope: $scope
    });
  };

  svc.getProjects = function(){
    return $http.get('/project-list/Projects');
  };

  svc.addProject = function(data){
    var project = data;

    return $http.post('/project-list/Projects', project)
      .then(function(result){
        $localStorage.setItem('activeProject', result.data);
        return result;
      });
  };

  svc.updateProject = function(data){
    var project = data;

    return $http.put('/project-list/Projects/'+project.id, project)
      .then(function(result){
        $localStorage.setItem('activeProject', result.data);

        return result;
      });
  };

  svc.deleteProject = function(project){
    return $http['delete']('/project-list/Projects/'+project.id)
      .then(function(result){
        return $localStorage.removeItem('activeProject');
      });
  };

  svc.setProjectEnvironment = function(project){
    var def = $q.defer();

    if ( !project.path ) {
      def.reject(new Error('no project path defined'));
    } else {
      Workspace.loadWorkspace({ path: project.path }, function(){
        $localStorage.setItem('activeProject', project);
        def.resolve(project);
      });
    }

    return def.promise;
  };

  svc.getWorkspaceEnvironment = function(){
    return Workspace.getWorkspace().$promise
      .then(function(result){
        if ( result.path === 'undefined' ) {
          delete result.path;
        }

        return result;
      });
  };

  svc.getDuplicateProjects = function($scope, newObj){
    if (!Object.keys(newObj).length || !$scope.projects.length) return;

    // get duplicate project if exists
    var duplicateProjects = $scope.projects.filter(function(project) {
      return project.displayName === newObj.displayName ||
        project.path === newObj.path ||
        project.name === newObj.name;
    });

    $scope.duplicateProject = Boolean(duplicateProjects.length) && duplicateProjects.shift();
  };

  // global events
  $rootScope.$on('event:projects:addNewOpenApiProject', svc.openAddNewOpenApiProject.bind(svc));
  $rootScope.$on('event:projects:openAddNewLoopbackProject', svc.openAddNewLoopbackProject.bind(svc));
  $rootScope.$on('event:projects:openAddExistingProject', svc.openAddExistingProject.bind(svc));
  $rootScope.$on('event:projects:showProjectSettings', svc.showProjectSettings.bind(svc));

  return svc;
}];

