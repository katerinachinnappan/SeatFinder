/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$mdSidenav',
  '$localStorage',
  'ProjectsServices',
  'ConfigServices',
  '$modalInstance',
  function AddProjectController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $mdSidenav,
  $localStorage,
  ProjectsServices,
  ConfigServices,
  $modalInstance
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = { show: true, flow: 'add-existing' };
  $scope.isSubmittingProject = false;

  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);


  $scope.addProject = function(form){
    if ( form.$invalid ) {
      return;
    }

    $scope.isSubmittingProject = true;

    //inspect path to figure out what type of project it is
    ConfigServices.inspectPath($scope.newProject.path)
      .then(function(result){
        var project = result;

        //add projectType and type to newProject object
        $scope.newProject.type = project.type;
        $scope.newProject.projectType = project.projectType;
        $scope.newProject.name = project.name;

        ProjectsServices.addProject($scope.newProject)
          .then(ProjectsServices.getProjects)
          .then(function(result){
            var activeProject = $localStorage.getItem('activeProject');

            $rootScope.projects = result.data;

            return ProjectsServices.setProjectEnvironment(activeProject)
              .then(function(project){
                $rootScope.activeProject = project;
                $rootScope.workspaceDir = project;
                $modalInstance.close();
              });
          })
          .then(function(){
            $scope.isSubmittingProject = false;

            $mdSidenav('mainNav').close();

            $rootScope.$emit('event:track', 'project', 'addExistingProject');

            if ($state.current.name === 'apis') {
              return $state.reload();
            }

            $state.go('apis');
          })
          .catch(function(err){
            $scope.isSubmittingProject = false;
            $rootScope.$emit('event:showError', {
              responseText: 'Creating a new project has failed.'
            });
          });
      });
  };

  $scope.cancelAddProject = function(){
    $modalInstance.close();
  };

  $scope.updatePath = function(path){
    $scope.newProject.path = path;
  };

  $scope.updateName = function(file){
    $scope.newProject.name = file.name;
  };

  $scope.openFilepicker = function(){
    $scope.projectsFilepicker.show = true;
  }
}];

