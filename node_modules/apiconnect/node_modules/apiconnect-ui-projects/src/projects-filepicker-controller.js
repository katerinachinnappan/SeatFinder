/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$rootScope',
  'FileServices',
  'ConfigServices',
  function ProjectsFilepickerController(
  $scope,
  $rootScope,
  FileServices,
  ConfigServices
) {
  'use strict';

  $scope.root = $scope;
  $scope.currentNode = null;
  $scope.selectedFile = null;
  $scope.selectedCrumb = null;
  $scope.files = {};


  getInitialFiles();


  function getInitialFiles(){
    // start at root directory
    FileServices.getListByPath({path: '/'})
      .then(function(items){
        appendNodes(items);
        FileServices.getListByPath({path: $rootScope.workspaceDir.path})
          .then(function(items){
            var parents = items.parents;
            parents = parents.slice(1, parents.length);

            async.eachSeries(parents, function(parent, cb){
              FileServices.getListByPath({path: parent.path})
                .then(function(items){
                  appendNodes(items);
                  cb(null);
                });
            }, function(err){
              $scope.selectNode(null, { path: parents[parents.length-1].path});
            });
          })
      });
  }

  $scope.cancelFilepicker = function() {
    $scope.projectsFilepicker.show = false;
  };

  $scope.addPathToProject = function() {
    $scope.updatePath({path: $scope.selectedFile.path});

    if ($scope.updateName){

      if ($scope.selectedFile.isLoopback){
        // lookup app name for loopback apps
        ConfigServices.inspectPath($scope.selectedFile.path)
          .then(function(result) {
            $scope.selectedFile.name = result.name;
            $scope.updateName({file: $scope.selectedFile});
            $scope.projectsFilepicker.show = false;
          });
      } else {
        $scope.updateName({file: $scope.selectedFile});
        $scope.projectsFilepicker.show = false;
      }
    }
  };

  $scope.selectNode = function($event, node, toggle) {
    if ($event) {
      $event.preventDefault();
    }

    $scope.selectedFile = node;

    // toggle node-tree open/close flag
    if (toggle && node.files && node.files.files){
      node.files.files.isOpen = !node.files.files.isOpen;
    }
  };

  $scope.selectItem = function($event, item) {
    $event.preventDefault();
    $scope.selectedFile = item;
  };

  $scope.getFiles = function(item) {
    FileServices.getListByPath({path: item.path})
      .then(appendNodes);
  };

  function findNode(node, match) {
    if (node.path === match.path) {
      return node;
    } else if (node.files && node.files.files) {
      var result = null;

      for (var i=0, l=node.files.files.length; i<l; i++){
        result = findNode(node.files.files[i], match);

        if (result) {
          break;
        }
      }

      return result;
    }

    return null;
  }

  function appendNodes(items) {
    // only show directories in file picker and skip dirs that start with a dot
    items.files = items.files.filter(function(file){
      return file.type === 'directory' && file.name.indexOf('.') !== 0;
    });

    items.cwd.link = false;
    $scope.currentNode = findNode($scope.files, items.cwd);

    if ($scope.currentNode){
      $scope.currentNode.files = items;
      //set node-tree to open by default
      $scope.currentNode.files.files.isOpen = true;
    }

    if (!$scope.currentNode) {
      $scope.files.files = items;
      $scope.currentNode = items.cwd;
    }
  }
}];

