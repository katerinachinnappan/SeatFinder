/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$mdSidenav',
  '$localStorage',
  'ProjectsServices',
  'OpenAPIWorkspace',
  'ConfigServices',
  'Workspace',
  '$modalInstance',
  function AddOpenApiProjectController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $mdSidenav,
  $localStorage,
  ProjectsServices,
  OpenAPIWorkspace,
  ConfigServices,
  Workspace,
  $modalInstance
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = {show: false, flow: 'add-openapi'};
  $scope.isSubmittingProject = false;
  $scope.projectTemplates = [];
  // todo remove this flag when we have more templates
  $scope.enableTemplateSelection = false;
  $scope.newProject.templateName = 'default';

  OpenAPIWorkspace.getAvailableTemplates().$promise
    .then(function(data) {
      $scope.projectTemplates = data.templates;
    });

  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);

  $scope.$watch('newProject.displayName', function(newName) {
    if (!newName) return;

    $scope.newProject.name = $rootScope.generateProjectName(newName);
  });

  $scope.addOpenApiProject = function(form) {
    if (form.$invalid) {
      return;
    }

    $scope.isSubmittingProject = true;

    //add projectType and type to newProject object
    $scope.newProject.type = 'project';
    $scope.newProject.projectType = 'unknown';

    // change project environment to new path as a work around
    // for not being able to specify path in createFromTemplate call
    // see: https://github.com/strongloop/loopback-workspace/issues/279
    ProjectsServices.setProjectEnvironment($scope.newProject)
      .then(function(project) {
        $rootScope.activeProject = project;
        $rootScope.workspaceDir = project;
        return project;
      })
      .then(function(project){
        // make openapi app via api call
        return OpenAPIWorkspace.createFromTemplate({
          name: $scope.newProject.name,
          templateName: $scope.newProject.templateName,
          basePath: $scope.newProject.path
        }).$promise;
      })
      .then(function(project){
        // set the path to newly created path
        $scope.newProject.path = project.path;
        return ProjectsServices.addProject($scope.newProject);
      })
      .then(function(project){
        return ProjectsServices.setProjectEnvironment(project.data);
      })
      .then(ProjectsServices.getProjects)
      .then(function(result) {
        var activeProject = $localStorage.getItem('activeProject');

        $rootScope.projects = result.data;

        return ProjectsServices.setProjectEnvironment(activeProject)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;

            $rootScope.$emit('event:track', 'project', 'createNewOpenAPIProject', { templateName: project.templateName });

            $modalInstance.close();
          });
      })
      .then(function() {
        $scope.isSubmittingProject = false;

        $mdSidenav('mainNav').close();

        if ($state.current.name === 'apis') {
          return $state.reload();
        }

        $state.go('apis');
      })
      .catch(function(err) {
        $scope.isSubmittingProject = false;
        $rootScope.$emit('event:showError', {
          responseText: 'Creating a new project has failed.'
        });
      });
  };

  $scope.cancelAddProject = function(closeModal) {
    $scope.projectsFilepicker.show = false;

    if (closeModal){
      $modalInstance.close();
    }
  };

  $scope.updatePath = function(path) {
    $scope.newProject.path = path;
  };

  $scope.openFilepicker = function() {
    $scope.projectsFilepicker.show = true;
  }
}];

