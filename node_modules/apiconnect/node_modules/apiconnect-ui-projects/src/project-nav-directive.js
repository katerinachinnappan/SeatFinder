/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  function ProjectNavDirective() {
  'use strict';

  return {
    restrict: 'A',
    scope: {
      projects: '='
    },
    template: require('./partials/project-nav.html'),
    controller: [
      '$scope',
      '$log',
      '$rootScope',
      'ConfigServices',
      'ProjectsServices',
      '$mdSidenav',
      '$state',
      '$modal',
      'translateMultipleFilter',
      function ProjectNavDirectiveController(
      $scope,
      $log,
      $rootScope,
      ConfigServices,
      ProjectsServices,
      $mdSidenav,
      $state,
      $modal,
      translateMultipleFilter
    ){

      $rootScope.$watch('projects', function(newVal){
        if (!newVal) return;
        $scope.projects = newVal;
      });

      $scope.setVisibleSection = $scope.$parent.setVisibleSection;
      $scope.openAddNewOpenApiProject = $scope.$parent.openAddNewOpenApiProject;
      $scope.openAddNewLoopbackProject = $scope.$parent.openAddNewLoopbackProject;
      $scope.openAddExistingProject = $scope.$parent.openAddExistingProject;


      $scope.setCurrentProject = function($event, project){
        $event.preventDefault();
        $rootScope.originalProject = $rootScope.activeProject;

        ConfigServices.inspectPath(project.path)
          .then(function(data){
            return ProjectsServices.setProjectEnvironment(project)
              .then(function(result){
                $rootScope.activeProject = result;

                $mdSidenav('mainNav').close();

                if ($state.current.name === 'apis') {
                  return $state.reload();
                }

                return $state.go('apis');
              });
          })
          .catch(function(err){
            $log.error(err);

            if (err.data.indexOf('ENOENT: no such file or directory')) {
              $log.log('project does not exist, reverting back to previous');
              $rootScope.activeProject = $rootScope.originalProject;
              $rootScope.workspaceDir = $rootScope.originalProject;
              $state.reload();
            }
          });
      };

      $scope.deleteProject = function(project){
        // open modal for confirmation
        $scope.confirmation = {
          titleKey: 'projects_confirm_delete_title',
          message: translateMultipleFilter('projects_confirm_delete', {
            displayName: project.displayName
          }),
          confirmed: function() {
            $scope.isProjectModal = false;
            ProjectsServices.deleteProject(project)
              .then(function(result){
                $log.log('project %s deleted', project.displayName);
                //set workspace to next available project when deleting active project
                if ( $rootScope.activeProject.path === project.path ) {
                  //find next available project that isn't the one we just deleted
                  $rootScope.workspaceDir = $rootScope.projects.filter(function(proj) {
                      return proj.path !== project.path;
                    })[0] || null;

                  if ( $rootScope.workspaceDir ) {
                    // get project object
                    ConfigServices.inspectPath($rootScope.workspaceDir.path)
                      .then(function(pathResult){
                        ProjectsServices.setProjectEnvironment(pathResult);
                      })
                      .catch(function(err){
                        $log.error(err);
                      });
                  }
                }

                $rootScope.$emit('event:getAllProjects');
              });
          },
          rejected: function() {
          }
        };

        // todo: confirm this works as a dropin module
        // $rootScope.$emit('event:openConfirmModal', $scope);

        $modal.open({
          templateUrl: 'apim/partials/confirmation.html',
          windowTemplateUrl: 'apim/partials/main-template.html',
          controller: 'ConfirmationController',
          size: 'sm',
          scope: $scope
        });
      };
    }]
  };
}];

