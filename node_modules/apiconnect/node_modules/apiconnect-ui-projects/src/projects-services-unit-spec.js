/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

describe('smoke', function() {
  beforeEach(module('apic.projects'));
  it('test', function(){
    expect(1).to.equal(1);
  });
});
// describe('ProjectsServices', function() {
//   var $q;
//   var $rootScope;
//   var $scope;
//   var $timeout;
//   var $localStorage;
//   var ProjectsServices;
//   var $httpBackend;
//   var spySetItem;
//   var spyRemoveItem;
//   var spyLoadWorkspace;
//   var spyGetWorkspace;
//
//   // angular.module('apim.loopback', []);
//   // mock injections
//   beforeEach(function(){
//     console.log('loopback',module("apim.loopback", ['ngResource']));
//     module('apic.projects');
//
//
//     spySetItem = sinon.spy();
//     spyRemoveItem = sinon.spy();
//     spyLoadWorkspace = sinon.spy();
//     spyGetWorkspace = sinon.spy();
//
//     var _LocalStorage_ = function() {
//       return {
//         setItem: spySetItem,
//         removeItem: spyRemoveItem
//       };
//     };
//
//     var _Workspace_ = function(){
//       return {
//         loadWorkspace: function(data, callback){
//           spyLoadWorkspace();
//           callback();
//         },
//         getWorkspace:  function(){
//           return {
//             $promise: new Promise(function(resolve, reject) {
//               spyGetWorkspace();
//               resolve();
//             })
//           };
//         }
//       }
//     };
//
//     var _modal_ = function(){
//       return {
//         open: function(){}
//       };
//     };
//
//     var _apim_loopback_ = function(){
//       return function(){}
//     };
//
//     // mock the dependencies of the module we are testing
//     module(function ($provide) {
//       $provide.factory('$localStorage', _LocalStorage_);
//       $provide.factory('$modal', _modal_);
//       $provide.factory('Workspace', _Workspace_);
//       $provide.value('apim.loopback', _apim_loopback_);
//     });
//   });
//
//   // inject modules
//   beforeEach(inject(function (_$q_, _$rootScope_, _$timeout_, _ProjectsServices_, _$httpBackend_) {
//     $q = _$q_;
//     $rootScope = _$rootScope_;
//     $timeout = _$timeout_;
//     ProjectsServices = _ProjectsServices_;
//     $httpBackend = _$httpBackend_;
//     $scope = $rootScope.$new();
//   }));
//
//   it('should get a list of projects', function(){
//     var mySpy = sinon.spy(ProjectsServices, 'getProjects');
//
//     $httpBackend.expectGET('/project-list/Projects')
//       .respond(200, []);
//
//     ProjectsServices.getProjects();
//
//     assert(ProjectsServices.getProjects.calledOnce);
//     expect(mySpy.callCount).to.equal(1);
//
//     $httpBackend.flush();
//     ProjectsServices.getProjects.restore();
//
//     $httpBackend.verifyNoOutstandingExpectation();
//     $httpBackend.verifyNoOutstandingRequest();
//   });
//
//   it('should add a project and call $localStorage', function(){
//     var spyAdd = sinon.spy(ProjectsServices, 'addProject');
//
//     $httpBackend.expectPOST('/project-list/Projects')
//       .respond(200, []);
//
//     ProjectsServices.addProject();
//     $httpBackend.flush();
//     ProjectsServices.addProject.restore();
//
//     expect(spyAdd.callCount).to.equal(1);
//     expect(spySetItem.callCount).to.equal(1);
//
//     $httpBackend.verifyNoOutstandingExpectation();
//     $httpBackend.verifyNoOutstandingRequest();
//   });
//
//   it('should delete a project and call $localStorage', function(){
//     var spyDelete = sinon.spy(ProjectsServices, 'deleteProject');
//
//     $httpBackend.expectDELETE('/project-list/Projects/12345')
//       .respond(200, []); //not sure which code this should be 200, 202, or 204 https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success
//
//     ProjectsServices.deleteProject({id: 12345});
//     $httpBackend.flush();
//     ProjectsServices.deleteProject.restore();
//
//     expect(spyDelete.callCount).to.equal(1);
//     expect(spyRemoveItem.callCount).to.equal(1);
//
//     $httpBackend.verifyNoOutstandingExpectation();
//     $httpBackend.verifyNoOutstandingRequest();
//   });
//
//   it('should set the project environment and call loadWorkspace, localStorage', function(){
//     var spySetProjectEnvironment = sinon.spy(ProjectsServices, 'setProjectEnvironment');
//
//     ProjectsServices.setProjectEnvironment({ id: 12345, path: '/tmp' });
//     ProjectsServices.setProjectEnvironment.restore();
//
//     expect(spySetProjectEnvironment.callCount).to.equal(1);
//     expect(spyLoadWorkspace.callCount).to.equal(1);
//     expect(spySetItem.callCount).to.equal(1);
//   });
//
//   it('should get workspace path', function(){
//     var spyGetWorkspaceEnvironment = sinon.spy(ProjectsServices, 'getWorkspaceEnvironment');
//
//     ProjectsServices.getWorkspaceEnvironment();
//     ProjectsServices.getWorkspaceEnvironment.restore();
//
//     expect(spyGetWorkspaceEnvironment.callCount).to.equal(1);
//     expect(spyGetWorkspace.callCount).to.equal(1);
//   });
// });

