/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$q',
  '$rootScope',
  '$state',
  '$window',
  '$localStorage',
  '$modalInstance',
  '$mdSidenav',
  '$timeout',
  'ProjectsServices',
  'Project',
  'ConfigServices',
  'Workspace',
  function AddLoopbackProjectController(
  $scope,
  $log,
  $q,
  $rootScope,
  $state,
  $window,
  $localStorage,
  $modalInstance,
  $mdSidenav,
  $timeout,
  ProjectsServices,
  Project,
  ConfigServices,
  Workspace
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = { show: false, flow: 'add-loopback' };
  $scope.isSubmittingProject = false;
  $scope.projectTemplates = [];
  $scope.versions = [];
  $scope.logs = [];
  $scope.status = {};
  $scope.status.isLogsVisible = true;

  Workspace.getAvailableTemplates().$promise
    .then(function(data) {
      $scope.projectTemplates = data.templates;
      $scope.newProject.templateName = $scope.projectTemplates[1];
    })
    .then(function(){
      Workspace.availableLBVersions().$promise
        .then(function(data){
          $scope.versions = data.versions;
          $scope.newProject.version = $scope.versions[0].value;
        });
    });


  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);

  $scope.$watch('newProject.displayName', function(newName) {
    if (!newName) return;

    $scope.newProject.name = $rootScope.generateProjectName(newName);
  });

  $scope.showLogs = function(){
    $scope.status.isLogsVisible = !$scope.status.isLogsVisible;
  };

  $scope.addLoopbackProject = function(form) {
    if (form.$invalid) {
      return;
    }

    $scope.isSubmittingProject = true;
    $scope.isProjectFinished = false;
    $scope.projectCreationError = null;

    //add projectType and type to newProject object
    $scope.newProject.type = 'project';
    $scope.newProject.projectType = 'loopback';

    // backup current project incase of error adding new one
    $rootScope.originalProject = $rootScope.activeProject;

    // change project environment to new path as a work around
    // for not being able to specify path in createFromTemplate call
    // see: https://github.com/strongloop/loopback-workspace/issues/279
    ProjectsServices.setProjectEnvironment($scope.newProject)
      .then(function(project) {
        $rootScope.activeProject = project;
        $rootScope.workspaceDir = project;
      })
      .then(function(project){
        // create project and subscribe to event stream for updates
        var def = $q.defer();
        var url = '/pm/api/Projects/createFromTemplate?name='+encodeURIComponent($scope.newProject.name)+'&templateName='+encodeURIComponent($scope.newProject.templateName)+'&basePath='+encodeURIComponent($scope.newProject.path)+'&loopbackVersion='+encodeURIComponent($scope.newProject.version);
        var stream = new EventSource(url);
        var rawLines = [];
        var done = false;

        var flushLines = function () {
            var lines = [];

            rawLines.forEach(function (msg) {
                var raw = JSON.parse(msg);

                if (!raw) {
                    return;
                }

                // last message with project path
                if (raw.done && raw.projectDir) {
                    $scope.newProject.path = raw.projectDir;
                }

                if (raw.done && !raw.error) {
                    stream.close();
                    return def.resolve();
                }

                if (raw.error) {
                    stream.close();
                    return def.reject(raw.error);
                }

                if (raw.data) {
                    raw = raw.data;
                }

                raw.toString().split('\n').forEach(function (line) {
                    lines.push(line);
                });
            });

            lines.forEach(function (line) {
                var htm = ansi_up.ansi_to_html(line, { use_classes: true });
                $scope.logs.push(htm);
            });

            rawLines = [];
        };

        var scheduleUpdate = function() {
            flushLines();

            if (!done) {
                $timeout(scheduleUpdate, 2500);
            }
        };

        scheduleUpdate();

        def.promise.then(function() {
            flushLines();
            done = true;
        })

        stream.addEventListener('data', function(msg) {
            rawLines.push(msg.data);
        });

        stream.addEventListener('error', function(err){
          $log.error(err);
          $scope.isSubmittingProject = true;
          def.reject(err);
        });

        // resolve the promise when finished installing
        stream.addEventListener('end', function(msg){
          $log.log('projected created', msg);
          def.resolve();
        });

        return def.promise;
      })
      .then(function(){
        return ProjectsServices.addProject($scope.newProject);
      })
      .then(function(project){
        return ProjectsServices.setProjectEnvironment(project.data);
      })
      .then(ProjectsServices.getProjects)
      .then(function(result) {
        var activeProject = $localStorage.getItem('activeProject');

        $rootScope.projects = result.data;

        return ProjectsServices.setProjectEnvironment(activeProject)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;
            $scope.isProjectFinished = true;

            $rootScope.$emit('event:track', 'project', 'createNewLoopbackProject', { templateName: project.templateName });

            if (!$scope.status.isLogsVisible){
              $modalInstance.close();
            }
          });
      })
      .then(function() {
        $scope.isSubmittingProject = false;

        $mdSidenav('mainNav').close();

        if ($state.current.name === 'apis') {
          return $state.reload();
        }

        $state.go('apis');
      })
      .catch(function(err) {
        $scope.isSubmittingProject = false;
        $scope.isProjectFinished = false;
        $scope.status.isLogsVisible = true;
        $scope.projectCreationError = err;
        $rootScope.activeProject = $rootScope.originalProject;
        $rootScope.workspaceDir = $rootScope.originalProject;

        // revert back to previous project environment in case of error
        ProjectsServices.setProjectEnvironment($rootScope.originalProject)
          .then(function(data){
            $state.reload();
          });
      });
  };

  $scope.cancelAddProject = function(closeModal) {
    $scope.projectsFilepicker.show = false;

    if (closeModal){
      $modalInstance.close();
    }
  };

  $scope.closeAddProject = $modalInstance.close;

  $scope.updatePath = function(path) {
    $scope.newProject.path = path;
  };

  $scope.openFilepicker = function() {
    $scope.projectsFilepicker.show = true;
  }
}];

