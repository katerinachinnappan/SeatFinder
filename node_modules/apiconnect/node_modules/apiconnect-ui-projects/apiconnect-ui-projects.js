(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/** @license
 * eventsource.js
 * Available under MIT License (MIT)
 * https://github.com/Yaffle/EventSource/
 */

/*jslint indent: 2, vars: true, plusplus: true */
/*global setTimeout, clearTimeout */

(function (global) {
  "use strict";

  var setTimeout = global.setTimeout;
  var clearTimeout = global.clearTimeout;

  var k = function () {
  };

  function XHRTransport(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {
    this._internal = new XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg);
  }

  XHRTransport.prototype.open = function (url, withCredentials) {
    this._internal.open(url, withCredentials);
  };

  XHRTransport.prototype.cancel = function () {
    this._internal.cancel();
  };

  function XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {
    this.onStartCallback = onStartCallback;
    this.onProgressCallback = onProgressCallback;
    this.onFinishCallback = onFinishCallback;
    this.thisArg = thisArg;
    this.xhr = xhr;
    this.state = 0;
    this.charOffset = 0;
    this.offset = 0;
    this.url = "";
    this.withCredentials = false;
    this.timeout = 0;
  }

  XHRTransportInternal.prototype.onStart = function () {
    if (this.state === 1) {
      this.state = 2;
      var status = 0;
      var statusText = "";
      var contentType = undefined;
      if (!("contentType" in this.xhr)) {
        try {
          status = this.xhr.status;
          statusText = this.xhr.statusText;
          contentType = this.xhr.getResponseHeader("Content-Type");
        } catch (error) {
          // https://bugs.webkit.org/show_bug.cgi?id=29121
          status = 0;
          statusText = "";
          contentType = undefined;
          // FF < 14, WebKit
          // https://bugs.webkit.org/show_bug.cgi?id=29658
          // https://bugs.webkit.org/show_bug.cgi?id=77854
        }
      } else {
        status = 200;
        statusText = "OK";
        contentType = this.xhr.contentType;
      }
      if (contentType == undefined) {
        contentType = "";
      }
      this.onStartCallback.call(this.thisArg, status, statusText, contentType);
    }
  };
  XHRTransportInternal.prototype.onProgress = function () {
    this.onStart();
    if (this.state === 2 || this.state === 3) {
      this.state = 3;
      var responseText = "";
      try {
        responseText = this.xhr.responseText;
      } catch (error) {
        // IE 8 - 9 with XMLHttpRequest
      }
      var chunkStart = this.charOffset;
      var length = responseText.length;
      for (var i = this.offset; i < length; i += 1) {
        var c = responseText.charCodeAt(i);
        if (c === "\n".charCodeAt(0) || c === "\r".charCodeAt(0)) {
          this.charOffset = i + 1;
        }
      }
      this.offset = length;
      var chunk = responseText.slice(chunkStart, this.charOffset);
      this.onProgressCallback.call(this.thisArg, chunk);
    }
  };
  XHRTransportInternal.prototype.onFinish = function () {
    // IE 8 fires "onload" without "onprogress
    this.onProgress();
    if (this.state === 3) {
      this.state = 4;
      if (this.timeout !== 0) {
        clearTimeout(this.timeout);
        this.timeout = 0;
      }
      this.onFinishCallback.call(this.thisArg);
    }
  };
  XHRTransportInternal.prototype.onReadyStateChange = function () {
    if (this.xhr != undefined) { // Opera 12
      if (this.xhr.readyState === 4) {
        if (this.xhr.status === 0) {
          this.onFinish();
        } else {
          this.onFinish();
        }
      } else if (this.xhr.readyState === 3) {
        this.onProgress();
      } else if (this.xhr.readyState === 2) {
        // Opera 10.63 throws exception for `this.xhr.status`
        // this.onStart();
      }
    }
  };
  XHRTransportInternal.prototype.onTimeout2 = function () {
    this.timeout = 0;
    var tmp = (/^data\:([^,]*?)(base64)?,([\S]*)$/).exec(this.url);
    var contentType = tmp[1];
    var data = tmp[2] === "base64" ? global.atob(tmp[3]) : decodeURIComponent(tmp[3]);
    if (this.state === 1) {
      this.state = 2;
      this.onStartCallback.call(this.thisArg, 200, "OK", contentType);
    }
    if (this.state === 2 || this.state === 3) {
      this.state = 3;
      this.onProgressCallback.call(this.thisArg, data);
    }
    if (this.state === 3) {
      this.state = 4;
      this.onFinishCallback.call(this.thisArg);
    }
  };
  XHRTransportInternal.prototype.onTimeout1 = function () {
    this.timeout = 0;
    this.open(this.url, this.withCredentials);
  };
  XHRTransportInternal.prototype.onTimeout0 = function () {
    var that = this;
    this.timeout = setTimeout(function () {
      that.onTimeout0();
    }, 500);
    if (this.xhr.readyState === 3) {
      this.onProgress();
    }
  };
  XHRTransportInternal.prototype.handleEvent = function (event) {
    if (event.type === "load") {
      this.onFinish();
    } else if (event.type === "error") {
      this.onFinish();
    } else if (event.type === "abort") {
      // improper fix to match Firefox behaviour, but it is better than just ignore abort
      // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596
      // https://bugzilla.mozilla.org/show_bug.cgi?id=880200
      // https://code.google.com/p/chromium/issues/detail?id=153570
      // IE 8 fires "onload" without "onprogress
      this.onFinish();
    } else if (event.type === "progress") {
      this.onProgress();
    } else if (event.type === "readystatechange") {
      this.onReadyStateChange();
    }
  };
  XHRTransportInternal.prototype.open = function (url, withCredentials) {
    this.cancel();

    this.url = url;
    this.withCredentials = withCredentials;

    this.state = 1;
    this.charOffset = 0;
    this.offset = 0;

    var that = this;

    var tmp = (/^data\:([^,]*?)(?:;base64)?,[\S]*$/).exec(url);
    if (tmp != undefined) {
      this.timeout = setTimeout(function () {
        that.onTimeout2();
      }, 0);
      return;
    }

    // loading indicator in Safari, Chrome < 14
    // loading indicator in Firefox
    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723
    if ((!("ontimeout" in this.xhr) || ("sendAsBinary" in this.xhr) || ("mozAnon" in this.xhr)) && global.document != undefined && global.document.readyState != undefined && global.document.readyState !== "complete") {
      this.timeout = setTimeout(function () {
        that.onTimeout1();
      }, 4);
      return;
    }

    // XDomainRequest#abort removes onprogress, onerror, onload
    this.xhr.onload = function (event) {
      that.handleEvent({type: "load"});
    };
    this.xhr.onerror = function () {
      that.handleEvent({type: "error"});
    };
    this.xhr.onabort = function () {
      that.handleEvent({type: "abort"});
    };
    this.xhr.onprogress = function () {
      that.handleEvent({type: "progress"});
    };
    // IE 8-9 (XMLHTTPRequest)
    // Firefox 3.5 - 3.6 - ? < 9.0
    // onprogress is not fired sometimes or delayed
    // see also #64
    this.xhr.onreadystatechange = function () {
      that.handleEvent({type: "readystatechange"});
    };

    this.xhr.open("GET", url, true);

    // withCredentials should be set after "open" for Safari and Chrome (< 19 ?)
    this.xhr.withCredentials = withCredentials;

    this.xhr.responseType = "text";

    if ("setRequestHeader" in this.xhr) {
      // Request header field Cache-Control is not allowed by Access-Control-Allow-Headers.
      // "Cache-control: no-cache" are not honored in Chrome and Firefox
      // https://bugzilla.mozilla.org/show_bug.cgi?id=428916
      //this.xhr.setRequestHeader("Cache-Control", "no-cache");
      this.xhr.setRequestHeader("Accept", "text/event-stream");
      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.
      //this.xhr.setRequestHeader("Last-Event-ID", this.lastEventId);
    }

    try {
      this.xhr.send(undefined);
    } catch (error1) {
      // Safari 5.1.7, Opera 12
      throw error1;
    }

    if (("readyState" in this.xhr) && global.opera != undefined) {
      // workaround for Opera issue with "progress" events
      this.timeout = setTimeout(function () {
        that.onTimeout0();
      }, 0);
    }
  };
  XHRTransportInternal.prototype.cancel = function () {
    if (this.state !== 0 && this.state !== 4) {
      this.state = 4;
      this.xhr.onload = k;
      this.xhr.onerror = k;
      this.xhr.onabort = k;
      this.xhr.onprogress = k;
      this.xhr.onreadystatechange = k;
      this.xhr.abort();
      if (this.timeout !== 0) {
        clearTimeout(this.timeout);
        this.timeout = 0;
      }
      this.onFinishCallback.call(this.thisArg);
    }
    this.state = 0;
  };

  function Map() {
    this._data = {};
  }

  Map.prototype.get = function (key) {
    return this._data[key + "~"];
  };
  Map.prototype.set = function (key, value) {
    this._data[key + "~"] = value;
  };
  Map.prototype["delete"] = function (key) {
    delete this._data[key + "~"];
  };

  function EventTarget() {
    this._listeners = new Map();
  }

  function throwError(e) {
    setTimeout(function () {
      throw e;
    }, 0);
  }

  EventTarget.prototype.dispatchEvent = function (event) {
    event.target = this;
    var type = event.type.toString();
    var listeners = this._listeners;
    var typeListeners = listeners.get(type);
    if (typeListeners == undefined) {
      return;
    }
    var length = typeListeners.length;
    var listener = undefined;
    for (var i = 0; i < length; i += 1) {
      listener = typeListeners[i];
      try {
        if (typeof listener.handleEvent === "function") {
          listener.handleEvent(event);
        } else {
          listener.call(this, event);
        }
      } catch (e) {
        throwError(e);
      }
    }
  };
  EventTarget.prototype.addEventListener = function (type, callback) {
    type = type.toString();
    var listeners = this._listeners;
    var typeListeners = listeners.get(type);
    if (typeListeners == undefined) {
      typeListeners = [];
      listeners.set(type, typeListeners);
    }
    for (var i = typeListeners.length; i >= 0; i -= 1) {
      if (typeListeners[i] === callback) {
        return;
      }
    }
    typeListeners.push(callback);
  };
  EventTarget.prototype.removeEventListener = function (type, callback) {
    type = type.toString();
    var listeners = this._listeners;
    var typeListeners = listeners.get(type);
    if (typeListeners == undefined) {
      return;
    }
    var length = typeListeners.length;
    var filtered = [];
    for (var i = 0; i < length; i += 1) {
      if (typeListeners[i] !== callback) {
        filtered.push(typeListeners[i]);
      }
    }
    if (filtered.length === 0) {
      listeners["delete"](type);
    } else {
      listeners.set(type, filtered);
    }
  };

  function Event(type) {
    this.type = type;
    this.target = undefined;
  }

  function MessageEvent(type, options) {
    Event.call(this, type);
    this.data = options.data;
    this.lastEventId = options.lastEventId;
  }

  MessageEvent.prototype = Event.prototype;

  var XHR = global.XMLHttpRequest;
  var XDR = global.XDomainRequest;
  var isCORSSupported = XHR != undefined && (new XHR()).withCredentials != undefined;
  var Transport = isCORSSupported || (XHR != undefined && XDR == undefined) ? XHR : XDR;

  var WAITING = -1;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSED = 2;
  var AFTER_CR = 3;
  var FIELD_START = 4;
  var FIELD = 5;
  var VALUE_START = 6;
  var VALUE = 7;
  var contentTypeRegExp = /^text\/event\-stream;?(\s*charset\=utf\-8)?$/i;

  var MINIMUM_DURATION = 1000;
  var MAXIMUM_DURATION = 18000000;

  var getDuration = function (value, def) {
    var n = value;
    if (n !== n) {
      n = def;
    }
    return (n < MINIMUM_DURATION ? MINIMUM_DURATION : (n > MAXIMUM_DURATION ? MAXIMUM_DURATION : n));
  };

  var fire = function (that, f, event) {
    try {
      if (typeof f === "function") {
        f.call(that, event);
      }
    } catch (e) {
      throwError(e);
    }
  };

  function EventSource(url, options) {
    EventTarget.call(this);

    this.onopen = undefined;
    this.onmessage = undefined;
    this.onerror = undefined;

    this.url = "";
    this.readyState = CONNECTING;
    this.withCredentials = false;

    this._internal = new EventSourceInternal(this, url, options);
  }

  function EventSourceInternal(es, url, options) {
    this.url = url.toString();
    this.readyState = CONNECTING;
    this.withCredentials = isCORSSupported && options != undefined && Boolean(options.withCredentials);

    this.es = es;
    this.initialRetry = getDuration(1000, 0);
    this.heartbeatTimeout = getDuration(45000, 0);

    this.lastEventId = "";
    this.retry = this.initialRetry;
    this.wasActivity = false;
    var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : Transport;
    var xhr = new CurrentTransport();
    this.transport = new XHRTransport(xhr, this.onStart, this.onProgress, this.onFinish, this);
    this.timeout = 0;
    this.currentState = WAITING;
    this.dataBuffer = [];
    this.lastEventIdBuffer = "";
    this.eventTypeBuffer = "";

    this.state = FIELD_START;
    this.fieldStart = 0;
    this.valueStart = 0;

    this.es.url = this.url;
    this.es.readyState = this.readyState;
    this.es.withCredentials = this.withCredentials;

    this.onTimeout();
  }

  EventSourceInternal.prototype.onStart = function (status, statusText, contentType) {
    if (this.currentState === CONNECTING) {
      if (contentType == undefined) {
        contentType = "";
      }
      if (status === 200 && contentTypeRegExp.test(contentType)) {
        this.currentState = OPEN;
        this.wasActivity = true;
        this.retry = this.initialRetry;
        this.readyState = OPEN;
        this.es.readyState = OPEN;
        var event = new Event("open");
        this.es.dispatchEvent(event);
        fire(this.es, this.es.onopen, event);
      } else if (status !== 0) {
        var message = "";
        if (status !== 200) {
          message = "EventSource's response has a status " + status + " " + statusText.replace(/\s+/g, " ") + " that is not 200. Aborting the connection.";
        } else {
          message = "EventSource's response has a Content-Type specifying an unsupported type: " + contentType.replace(/\s+/g, " ") + ". Aborting the connection.";
        }
        throwError(new Error(message));
        this.close();
        var event = new Event("error");
        this.es.dispatchEvent(event);
        fire(this.es, this.es.onerror, event);
      }
    }
  };

  EventSourceInternal.prototype.onProgress = function (chunk) {
    if (this.currentState === OPEN) {
      var length = chunk.length;
      if (length !== 0) {
        this.wasActivity = true;
      }
      for (var position = 0; position < length; position += 1) {
        var c = chunk.charCodeAt(position);
        if (this.state === AFTER_CR && c === "\n".charCodeAt(0)) {
          this.state = FIELD_START;
        } else {
          if (this.state === AFTER_CR) {
            this.state = FIELD_START;
          }
          if (c === "\r".charCodeAt(0) || c === "\n".charCodeAt(0)) {
            if (this.state !== FIELD_START) {
              if (this.state === FIELD) {
                this.valueStart = position + 1;
              }
              var field = chunk.slice(this.fieldStart, this.valueStart - 1);
              var value = chunk.slice(this.valueStart + (this.valueStart < position && chunk.charCodeAt(this.valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
              if (field === "data") {
                this.dataBuffer.push(value);
              } else if (field === "id") {
                this.lastEventIdBuffer = value;
              } else if (field === "event") {
                this.eventTypeBuffer = value;
              } else if (field === "retry") {
                this.initialRetry = getDuration(Number(value), this.initialRetry);
                this.retry = this.initialRetry;
              } else if (field === "heartbeatTimeout") {
                this.heartbeatTimeout = getDuration(Number(value), this.heartbeatTimeout);
                if (this.timeout !== 0) {
                  clearTimeout(this.timeout);
                  var that = this;
                  this.timeout = setTimeout(function () {
                    that.onTimeout();
                  }, this.heartbeatTimeout);
                }
              }
            }
            if (this.state === FIELD_START) {
              if (this.dataBuffer.length !== 0) {
                this.lastEventId = this.lastEventIdBuffer;
                if (this.eventTypeBuffer === "") {
                  this.eventTypeBuffer = "message";
                }
                var event = new MessageEvent(this.eventTypeBuffer, {
                  data: this.dataBuffer.join("\n"),
                  lastEventId: this.lastEventIdBuffer
                });
                this.es.dispatchEvent(event);
                if (this.eventTypeBuffer === "message") {
                  fire(this.es, this.es.onmessage, event);
                }
                if (this.currentState === CLOSED) {
                  return;
                }
              }
              this.dataBuffer.length = 0;
              this.eventTypeBuffer = "";
            }
            this.state = c === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
          } else {
            if (this.state === FIELD_START) {
              this.fieldStart = position;
              this.state = FIELD;
            }
            if (this.state === FIELD) {
              if (c === ":".charCodeAt(0)) {
                this.valueStart = position + 1;
                this.state = VALUE_START;
              }
            } else if (this.state === VALUE_START) {
              this.state = VALUE;
            }
          }
        }
      }
    }
  };

  EventSourceInternal.prototype.onFinish = function () {
    if (this.currentState === OPEN || this.currentState === CONNECTING) {
      this.currentState = WAITING;
      if (this.timeout !== 0) {
        clearTimeout(this.timeout);
        this.timeout = 0;
      }
      if (this.retry > this.initialRetry * 16) {
        this.retry = this.initialRetry * 16;
      }
      if (this.retry > MAXIMUM_DURATION) {
        this.retry = MAXIMUM_DURATION;
      }
      var that = this;
      this.timeout = setTimeout(function () {
        that.onTimeout();
      }, this.retry);
      this.retry = this.retry * 2 + 1;

      this.readyState = CONNECTING;
      this.es.readyState = CONNECTING;
      var event = new Event("error");
      this.es.dispatchEvent(event);
      fire(this.es, this.es.onerror, event);
    }
  };

  EventSourceInternal.prototype.onTimeout = function () {
    this.timeout = 0;
    if (this.currentState !== WAITING) {
      if (!this.wasActivity) {
        throwError(new Error("No activity within " + this.heartbeatTimeout + " milliseconds. Reconnecting."));
        this.transport.cancel();
      } else {
        this.wasActivity = false;
        var that = this;
        this.timeout = setTimeout(function () {
          that.onTimeout();
        }, this.heartbeatTimeout);
      }
      return;
    }

    this.wasActivity = false;
    var that = this;
    this.timeout = setTimeout(function () {
      that.onTimeout();
    }, this.heartbeatTimeout);

    this.currentState = CONNECTING;
    this.dataBuffer.length = 0;
    this.eventTypeBuffer = "";
    this.lastEventIdBuffer = this.lastEventId;
    this.fieldStart = 0;
    this.valueStart = 0;
    this.state = FIELD_START;

    var s = this.url.slice(0, 5);
    if (s !== "data:" && s !== "blob:") {
      s = this.url + ((this.url.indexOf("?", 0) === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(this.lastEventId) + "&r=" + (Math.random() + 1).toString().slice(2));
    } else {
      s = this.url;
    }
    try {
      this.transport.open(s, this.withCredentials);
    } catch (error) {
      this.close();
      throw error;
    }
  };

  EventSourceInternal.prototype.close = function () {
    this.currentState = CLOSED;
    this.transport.cancel();
    if (this.timeout !== 0) {
      clearTimeout(this.timeout);
      this.timeout = 0;
    }
    this.readyState = CLOSED;
    this.es.readyState = CLOSED;
  };

  function F() {
    this.CONNECTING = CONNECTING;
    this.OPEN = OPEN;
    this.CLOSED = CLOSED;
  }
  F.prototype = EventTarget.prototype;

  EventSource.prototype = new F();

  EventSource.prototype.close = function () {
    this._internal.close();
  };

  F.call(EventSource);
  if (isCORSSupported) {
    EventSource.prototype.withCredentials = undefined;
  }

  var isEventSourceSupported = function () {
    // Opera 12 fails this test, but this is fine.
    return global.EventSource != undefined && ("withCredentials" in global.EventSource.prototype);
  };

  if (Transport != undefined && (global.EventSource == undefined || (isCORSSupported && !isEventSourceSupported()))) {
    // Why replace a native EventSource ?
    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328
    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392
    // https://code.google.com/p/chromium/issues/detail?id=260144
    // https://code.google.com/p/chromium/issues/detail?id=225654
    // ...
    global.NativeEventSource = global.EventSource;
    global.EventSource = EventSource;
  }

}(typeof window !== 'undefined' ? window : this));

},{}],2:[function(require,module,exports){
'use strict'

var inserted = {}
var is_client = typeof window === 'object'

exports = module.exports = function(css, options) {

  if (!css) return nop
  if (inserted[css]) return nop

  inserted[css] = true

  var elm = null
  var head = null

  if (is_client) {
    elm = document.createElement('style')
    elm.setAttribute('type', 'text/css')

    if ('textContent' in elm) {
      elm.textContent = css
    }
    else {
      elm.styleSheet.cssText = css
    }

    head = document.getElementsByTagName('head')[0]
    if (options && options.prepend) {
      head.insertBefore(elm, head.childNodes[0])
    }
    else {
      head.appendChild(elm)
    }
  }

  return removeCss

  function removeCss() {
    delete inserted[css]

    if (!is_client) return
    head.removeChild(elm)
  }
}

exports.getCachedCss = function() {
  return Object.keys(inserted)
}
exports.delCachedCss = function() {
  inserted = {}
}

function nop(){ }

},{}],3:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$q',
  '$rootScope',
  '$state',
  '$window',
  '$localStorage',
  '$modalInstance',
  '$mdSidenav',
  '$timeout',
  'ProjectsServices',
  'Project',
  'ConfigServices',
  'Workspace',
  function AddLoopbackProjectController(
  $scope,
  $log,
  $q,
  $rootScope,
  $state,
  $window,
  $localStorage,
  $modalInstance,
  $mdSidenav,
  $timeout,
  ProjectsServices,
  Project,
  ConfigServices,
  Workspace
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = { show: false, flow: 'add-loopback' };
  $scope.isSubmittingProject = false;
  $scope.projectTemplates = [];
  $scope.versions = [];
  $scope.logs = [];
  $scope.status = {};
  $scope.status.isLogsVisible = true;

  Workspace.getAvailableTemplates().$promise
    .then(function(data) {
      $scope.projectTemplates = data.templates;
      $scope.newProject.templateName = $scope.projectTemplates[1];
    })
    .then(function(){
      Workspace.availableLBVersions().$promise
        .then(function(data){
          $scope.versions = data.versions;
          $scope.newProject.version = $scope.versions[0].value;
        });
    });


  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);

  $scope.$watch('newProject.displayName', function(newName) {
    if (!newName) return;

    $scope.newProject.name = $rootScope.generateProjectName(newName);
  });

  $scope.showLogs = function(){
    $scope.status.isLogsVisible = !$scope.status.isLogsVisible;
  };

  $scope.addLoopbackProject = function(form) {
    if (form.$invalid) {
      return;
    }

    $scope.isSubmittingProject = true;
    $scope.isProjectFinished = false;
    $scope.projectCreationError = null;

    //add projectType and type to newProject object
    $scope.newProject.type = 'project';
    $scope.newProject.projectType = 'loopback';

    // backup current project incase of error adding new one
    $rootScope.originalProject = $rootScope.activeProject;

    // change project environment to new path as a work around
    // for not being able to specify path in createFromTemplate call
    // see: https://github.com/strongloop/loopback-workspace/issues/279
    ProjectsServices.setProjectEnvironment($scope.newProject)
      .then(function(project) {
        $rootScope.activeProject = project;
        $rootScope.workspaceDir = project;
      })
      .then(function(project){
        // create project and subscribe to event stream for updates
        var def = $q.defer();
        var url = '/pm/api/Projects/createFromTemplate?name='+encodeURIComponent($scope.newProject.name)+'&templateName='+encodeURIComponent($scope.newProject.templateName)+'&basePath='+encodeURIComponent($scope.newProject.path)+'&loopbackVersion='+encodeURIComponent($scope.newProject.version);
        var stream = new EventSource(url);
        var rawLines = [];
        var done = false;

        var flushLines = function () {
            var lines = [];

            rawLines.forEach(function (msg) {
                var raw = JSON.parse(msg);

                if (!raw) {
                    return;
                }

                // last message with project path
                if (raw.done && raw.projectDir) {
                    $scope.newProject.path = raw.projectDir;
                }

                if (raw.done && !raw.error) {
                    stream.close();
                    return def.resolve();
                }

                if (raw.error) {
                    stream.close();
                    return def.reject(raw.error);
                }

                if (raw.data) {
                    raw = raw.data;
                }

                raw.toString().split('\n').forEach(function (line) {
                    lines.push(line);
                });
            });

            lines.forEach(function (line) {
                var htm = ansi_up.ansi_to_html(line, { use_classes: true });
                $scope.logs.push(htm);
            });

            rawLines = [];
        };

        var scheduleUpdate = function() {
            flushLines();

            if (!done) {
                $timeout(scheduleUpdate, 2500);
            }
        };

        scheduleUpdate();

        def.promise.then(function() {
            flushLines();
            done = true;
        })

        stream.addEventListener('data', function(msg) {
            rawLines.push(msg.data);
        });

        stream.addEventListener('error', function(err){
          $log.error(err);
          $scope.isSubmittingProject = true;
          def.reject(err);
        });

        // resolve the promise when finished installing
        stream.addEventListener('end', function(msg){
          $log.log('projected created', msg);
          def.resolve();
        });

        return def.promise;
      })
      .then(function(){
        return ProjectsServices.addProject($scope.newProject);
      })
      .then(function(project){
        return ProjectsServices.setProjectEnvironment(project.data);
      })
      .then(ProjectsServices.getProjects)
      .then(function(result) {
        var activeProject = $localStorage.getItem('activeProject');

        $rootScope.projects = result.data;

        return ProjectsServices.setProjectEnvironment(activeProject)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;
            $scope.isProjectFinished = true;

            $rootScope.$emit('event:track', 'project', 'createNewLoopbackProject', { templateName: project.templateName });

            if (!$scope.status.isLogsVisible){
              $modalInstance.close();
            }
          });
      })
      .then(function() {
        $scope.isSubmittingProject = false;

        $mdSidenav('mainNav').close();

        if ($state.current.name === 'apis') {
          return $state.reload();
        }

        $state.go('apis');
      })
      .catch(function(err) {
        $scope.isSubmittingProject = false;
        $scope.isProjectFinished = false;
        $scope.status.isLogsVisible = true;
        $scope.projectCreationError = err;
        $rootScope.activeProject = $rootScope.originalProject;
        $rootScope.workspaceDir = $rootScope.originalProject;

        // revert back to previous project environment in case of error
        ProjectsServices.setProjectEnvironment($rootScope.originalProject)
          .then(function(data){
            $state.reload();
          });
      });
  };

  $scope.cancelAddProject = function(closeModal) {
    $scope.projectsFilepicker.show = false;

    if (closeModal){
      $modalInstance.close();
    }
  };

  $scope.closeAddProject = $modalInstance.close;

  $scope.updatePath = function(path) {
    $scope.newProject.path = path;
  };

  $scope.openFilepicker = function() {
    $scope.projectsFilepicker.show = true;
  }
}];


},{}],4:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$mdSidenav',
  '$localStorage',
  'ProjectsServices',
  'OpenAPIWorkspace',
  'ConfigServices',
  'Workspace',
  '$modalInstance',
  function AddOpenApiProjectController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $mdSidenav,
  $localStorage,
  ProjectsServices,
  OpenAPIWorkspace,
  ConfigServices,
  Workspace,
  $modalInstance
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = {show: false, flow: 'add-openapi'};
  $scope.isSubmittingProject = false;
  $scope.projectTemplates = [];
  // todo remove this flag when we have more templates
  $scope.enableTemplateSelection = false;
  $scope.newProject.templateName = 'default';

  OpenAPIWorkspace.getAvailableTemplates().$promise
    .then(function(data) {
      $scope.projectTemplates = data.templates;
    });

  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);

  $scope.$watch('newProject.displayName', function(newName) {
    if (!newName) return;

    $scope.newProject.name = $rootScope.generateProjectName(newName);
  });

  $scope.addOpenApiProject = function(form) {
    if (form.$invalid) {
      return;
    }

    $scope.isSubmittingProject = true;

    //add projectType and type to newProject object
    $scope.newProject.type = 'project';
    $scope.newProject.projectType = 'unknown';

    // change project environment to new path as a work around
    // for not being able to specify path in createFromTemplate call
    // see: https://github.com/strongloop/loopback-workspace/issues/279
    ProjectsServices.setProjectEnvironment($scope.newProject)
      .then(function(project) {
        $rootScope.activeProject = project;
        $rootScope.workspaceDir = project;
        return project;
      })
      .then(function(project){
        // make openapi app via api call
        return OpenAPIWorkspace.createFromTemplate({
          name: $scope.newProject.name,
          templateName: $scope.newProject.templateName,
          basePath: $scope.newProject.path
        }).$promise;
      })
      .then(function(project){
        // set the path to newly created path
        $scope.newProject.path = project.path;
        return ProjectsServices.addProject($scope.newProject);
      })
      .then(function(project){
        return ProjectsServices.setProjectEnvironment(project.data);
      })
      .then(ProjectsServices.getProjects)
      .then(function(result) {
        var activeProject = $localStorage.getItem('activeProject');

        $rootScope.projects = result.data;

        return ProjectsServices.setProjectEnvironment(activeProject)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;

            $rootScope.$emit('event:track', 'project', 'createNewOpenAPIProject', { templateName: project.templateName });

            $modalInstance.close();
          });
      })
      .then(function() {
        $scope.isSubmittingProject = false;

        $mdSidenav('mainNav').close();

        if ($state.current.name === 'apis') {
          return $state.reload();
        }

        $state.go('apis');
      })
      .catch(function(err) {
        $scope.isSubmittingProject = false;
        $rootScope.$emit('event:showError', {
          responseText: 'Creating a new project has failed.'
        });
      });
  };

  $scope.cancelAddProject = function(closeModal) {
    $scope.projectsFilepicker.show = false;

    if (closeModal){
      $modalInstance.close();
    }
  };

  $scope.updatePath = function(path) {
    $scope.newProject.path = path;
  };

  $scope.openFilepicker = function() {
    $scope.projectsFilepicker.show = true;
  }
}];


},{}],5:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$mdSidenav',
  '$localStorage',
  'ProjectsServices',
  'ConfigServices',
  '$modalInstance',
  function AddProjectController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $mdSidenav,
  $localStorage,
  ProjectsServices,
  ConfigServices,
  $modalInstance
) {
  'use strict';

  $scope.newProject = {};
  $scope.projectsFilepicker = { show: true, flow: 'add-existing' };
  $scope.isSubmittingProject = false;

  // attach duplicate project to scope for error messages
  $scope.$watch('newProject', function(newObj){
    ProjectsServices.getDuplicateProjects($scope, newObj);
  }, true);


  $scope.addProject = function(form){
    if ( form.$invalid ) {
      return;
    }

    $scope.isSubmittingProject = true;

    //inspect path to figure out what type of project it is
    ConfigServices.inspectPath($scope.newProject.path)
      .then(function(result){
        var project = result;

        //add projectType and type to newProject object
        $scope.newProject.type = project.type;
        $scope.newProject.projectType = project.projectType;
        $scope.newProject.name = project.name;

        ProjectsServices.addProject($scope.newProject)
          .then(ProjectsServices.getProjects)
          .then(function(result){
            var activeProject = $localStorage.getItem('activeProject');

            $rootScope.projects = result.data;

            return ProjectsServices.setProjectEnvironment(activeProject)
              .then(function(project){
                $rootScope.activeProject = project;
                $rootScope.workspaceDir = project;
                $modalInstance.close();
              });
          })
          .then(function(){
            $scope.isSubmittingProject = false;

            $mdSidenav('mainNav').close();

            $rootScope.$emit('event:track', 'project', 'addExistingProject');

            if ($state.current.name === 'apis') {
              return $state.reload();
            }

            $state.go('apis');
          })
          .catch(function(err){
            $scope.isSubmittingProject = false;
            $rootScope.$emit('event:showError', {
              responseText: 'Creating a new project has failed.'
            });
          });
      });
  };

  $scope.cancelAddProject = function(){
    $modalInstance.close();
  };

  $scope.updatePath = function(path){
    $scope.newProject.path = path;
  };

  $scope.updateName = function(file){
    $scope.newProject.name = file.name;
  };

  $scope.openFilepicker = function(){
    $scope.projectsFilepicker.show = true;
  }
}];


},{}],6:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$http',
  '$log',
  '$q',
  function ConfigServices(
    $http,
    $log,
    $q
  ){
  'use strict';

  var svc = this;

  svc.inspectPath = function(path) {
    var def = $q.defer();

    $http.get('/apic-config/inspectPath', {
      params: {
        path: path
      }
    })
      .then(function(result){
        var project = result.data;
        project.displayName = project.name || project.basePath;

        def.resolve(project);
      })
      .catch(function(err){
        $log.error(err);
        def.reject(err);
      });

    return def.promise;
  };

  svc.getId = function(){
    return $http.get('/apic-config/id');
  };

  svc.getByName = function(name){
    return $http.get('/apic-config/get?key='+name);
  };

  svc.getEnableAnalytics = function(){
    return svc.getByName('enable-analytics');
  };

  svc.getAgreementByName = function(name){
    return $http.get('/apic-config/agreements/'+name);
  };

  svc.getAnalyticsAgreement = function(){
    return svc.getAgreementByName('analytics');
  };

  svc.getReminderDate = function(){
    return svc.getByName('analytics-reminder');
  };

  svc.setReminderDate = function(date){
    var global = true;

    return svc.setByName('analytics-reminder', date, global);
  };

  svc.setByName = function(name, value, global){
    global = !!global;

    return $http.post('/apic-config/set', {
      key: name,
      value: value,
      global: global
    });
  };

  svc.deleteByName = function(name, global){
    global = !!global;

    return $http.post('/apic-config/delete', {
      key: name,
      global: global
    });
  };

  svc.getAnalyticsKey = function(){
    return $http.get('/apic-config/keys/analytics');
  };

  svc.setEnableAnalytics = function(enabled){
    var global = true;

    return svc.setByName('enable-analytics', enabled, global);
  };

  return svc;
}];


},{}],7:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$http',
  '$log',
  function FileServices(
  $http,
  $log
){
  'use strict';

  var svc = this;

  svc.getListByPath = function(path) {
    return $http.get('/fs/readdir', { params: path })
      .then(function(data){
        var files = data.data;

        files.files = _.orderBy(files.files, ['type', 'path'], ['asc', 'asc']);

        //handle case where there is no name, we use path for name
        files.parents = files.parents.map(function(item){
          if ( !item.name ) {
            item.name = item.path;
          }

          return item;
        });

        if (files.parents.length) {
          files.parents[0].name = 'root';
        }

        return files;
      })
      .catch(function(err){
        $log.error(err);
        return err;
      });
  };

  return svc;
}];


},{}],8:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$localStorage',
  'ProjectsServices',
  'ConfigServices',
  'Workspace',
  '$modalInstance',
  function LoopbackSettingsController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $localStorage,
  ProjectsServices,
  ConfigServices,
  Workspace,
  $modalInstance
) {
  'use strict';

  $scope.newProject = $rootScope.activeProject;
  $scope.master = angular.copy($scope.newProject);

  $scope.updateLoopbackProject = function(form){
    if (form.$invalid) {
      return;
    }

    ProjectsServices.updateProject($scope.newProject)
      .then(function(result){
        return ProjectsServices.setProjectEnvironment(result.data)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;
          });
      })
      .then(function(){
        $rootScope.$emit('event:getProjects');
        $modalInstance.close();
      });
  };

  $scope.cancelProjectSettings = function() {
    angular.copy($scope.master, $scope.newProject);
    $modalInstance.close();
  };
}];


},{}],9:[function(require,module,exports){
(function (global){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';

var angular = (typeof window !== "undefined" ? window['angular'] : typeof global !== "undefined" ? global['angular'] : null);
require('event-source-polyfill');
var injectCss = require('inject-css');

angular.module('apic.projects', [
  'pascalprecht.translate',
  'ui.bootstrap',
  'apim.loopback'
])
  .config(function(){
    injectCss(require('./styles/main.styl'));
  })
  .service('ProjectsServices', require('./projects-services'))
  .service('FileServices', require('./file-services'))
  .service('ConfigServices', require('./config-services'))
  .controller('NodeTreeController', require('./node-tree-controller'))
  .controller('NodeItemController', require('./node-item-controller'))
  .controller('AddLoopbackProjectController', require('./add-loopback-project-controller'))
  .controller('AddOpenApiProjectController', require('./add-openapi-project-controller'))
  .controller('AddProjectController', require('./add-project-controller'))
  .controller('LoopbackSettingsController', require('./loopback-settings-controller'))
  .controller('OpenApiSettingsController', require('./openapi-settings-controller'))
  .controller('ProjectNodeItemController', require('./project-node-item-controller'))
  .controller('ProjectNodesController', require('./project-nodes-controller'))
  .controller('ProjectsFilepickerController', require('./projects-filepicker-controller'))
  .directive('apimProjectItem', require('./project-item-directive'))
  .directive('apimProjectsFilepicker', require('./projects-filepicker-directive'))
  .directive('apimNodeTree', require('./node-tree-directive'))
  .directive('apimNodeItem', require('./node-item-directive'))
  .directive('apimProjectNodes', require('./project-nodes-directive'))
  .directive('apimProjectNodeItem', require('./project-node-item-directive'))
  .directive('apimProjectNav', require('./project-nav-directive'));


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./add-loopback-project-controller":3,"./add-openapi-project-controller":4,"./add-project-controller":5,"./config-services":6,"./file-services":7,"./loopback-settings-controller":8,"./node-item-controller":10,"./node-item-directive":11,"./node-tree-controller":12,"./node-tree-directive":13,"./openapi-settings-controller":14,"./project-item-directive":27,"./project-nav-directive":28,"./project-node-item-controller":29,"./project-node-item-directive":30,"./project-nodes-controller":31,"./project-nodes-directive":32,"./projects-filepicker-controller":33,"./projects-filepicker-directive":34,"./projects-services":35,"./styles/main.styl":36,"event-source-polyfill":1,"inject-css":2}],10:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  function NodeItemController(
    $scope,
    $log
  ) {
  'use strict';

  $scope.showChildNodes = true;

  $scope.$watch('root.currentNode', checkChildNodes, true);

  $scope.getFilesAndSelectNode = function($event, node){
    if (!$scope.showChildNodes) return;

    if (!node.files || (node.files.files && !node.files.files.isOpen)) {
      $scope.root.getFiles(node);
    }

    $scope.root.selectNode($event, node, true);
  };

  $scope.getFiles = function(node){
    if (!$scope.showChildNodes) return;
    $scope.root.getFiles(node);
  };

  $scope.selectNode = function($event, node){
    // don't allow user to select an existing loopback project path when creating a new project
    if ($scope.root.projectsFilepicker.flow !== 'add-existing' && node.isLoopback ) {
      return;
    }

    $scope.root.selectNode($event, node);
  };

  function checkChildNodes(){
    $scope.showChildNodes = !$scope.node.isLoopback;
  }
}];


},{}],11:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [function NodeItemDirective() {
  'use strict';

  return {
    restrict: 'E',
    replace: true,
    scope: {
      node: '=',
      root: '='
    },
    template: require('./partials/node-item.html'),
    controller: 'NodeItemController'
  }
}];


},{"./partials/node-item.html":19}],12:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  function NodeTreeController($scope) {
  'use strict';

  $scope.getFiles = $scope.root.getFiles;
  $scope.selectNode = $scope.root.selectNode;
}];


},{}],13:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [function NodeTreeDirective() {
  'use strict';

  return {
    restrict: 'E',
    replace: true,
    scope: {
      nodes: '=',
      root: '='
    },
    template: require('./partials/node-tree.html'),
    controller: 'NodeTreeController'
  }
}];


},{"./partials/node-tree.html":20}],14:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$log',
  '$rootScope',
  '$state',
  '$window',
  '$localStorage',
  'ProjectsServices',
  'ConfigServices',
  'OpenAPIWorkspace',
  '$modalInstance',
  function OpenApiSettingsController(
  $scope,
  $log,
  $rootScope,
  $state,
  $window,
  $localStorage,
  ProjectsServices,
  ConfigServices,
  OpenAPIWorkspace,
  $modalInstance
) {
  'use strict';

  $scope.newProject = $rootScope.activeProject;
  $scope.master = angular.copy($scope.newProject);

  $scope.updateOpenApiProject = function(form){
    if (form.$invalid) {
      return;
    }

    ProjectsServices.updateProject($scope.newProject)
      .then(function(result){
        return ProjectsServices.setProjectEnvironment(result.data)
          .then(function(project) {
            $rootScope.activeProject = project;
            $rootScope.workspaceDir = project;
          });
      })
      .then(function(){
        $rootScope.$emit('event:getProjects');
        $modalInstance.close();
      });
  };

  $scope.cancelProjectSettings = function(){
    angular.copy($scope.master, $scope.newProject);
    $modalInstance.close();
  }
}];


},{}],15:[function(require,module,exports){
module.exports = '<h2 class="bx--modal-content__heading">{{::\'projectSettings\' | translate}}</h2>\n<button title="Close" class="bx--modal__close" type="button" data-ng-click="cancelProjectSettings()" tabindex="-1">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<form id="new-project-form" class="bx--form" ng-submit="updateLoopbackProject(form)" name="form" novalidate>\n  <div class="bx--modal-content modal-body">\n    <bx-input-container>\n      <label for="new-project-display-name">{{::\'projects_add_label_display\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.displayName"\n             id="new-project-display-name"\n             name="displayName"\n             unique-project-attrib="displayName"\n             unique-project-attrib-skip-active-project="true"\n             required/>\n      <div ng-messages="form.displayName.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-displayName">{{::\'projects_invalid_displayName\' | translate}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-name">{{::\'projects_add_label_name\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.name"\n             id="new-project-name"\n             name="name"\n             required\n             readonly/>\n      <div ng-messages="form.name.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-path">{{::\'projects_add_label_directory\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.path"\n             id="new-project-path"\n             name="path"\n             required\n             readonly/>\n      <div ng-messages="form.path.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      </div>\n    </bx-input-container>\n  </div>\n  <div class="bx--modal__buttons">\n    <div class="bx--modal__buttons-container">\n      <button class="bx--btn--secondary" ng-click="cancelProjectSettings()" type="button">{{::\'cancel\' | translate}}</button>\n      <button class="bx--btn" ng-disabled="isSubmittingProject">Save</button>\n    </div>\n  </div>\n</form>\n';
},{}],16:[function(require,module,exports){
module.exports = '<h2 class="bx--modal-content__heading no-animate" ng-show="!projectsFilepicker.show">{{::\'projectNewLoopback\' | translate}}</h2>\n<h2 class="bx--modal-content__heading no-animate" ng-if="projectsFilepicker.flow == \'add-loopback\' || projectsFilepicker.flow == \'add-openapi\'" ng-show="projectsFilepicker.show">{{::\'projectSelectFolder\' | translate}}</h2>\n<button title="Close"\n        class="bx--modal__close no-animate"\n        type="button"\n        ng-disabled="isSubmittingProject"\n        data-ng-click="cancelAddProject(true)"\n        tabindex="-1"\n        ng-show="!projectsFilepicker.show">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<button title="Close"\n        class="bx--modal__close no-animate"\n        type="button"\n        data-ng-click="cancelAddProject(false)"\n        tabindex="-1"\n        ng-show="projectsFilepicker.show">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<div class="bx--modal-content bx--new-lb-modal no-animate" ng-show="!isSubmittingProject && !isProjectFinished && !projectsFilepicker.show">\n  <form class="bx--form" id="new-project-form" name="form" novalidate>\n    <div class="bx--select labeledSelect">\n      <label class="bx--form__label" for="new-project-template">{{::\'projectTemplate\' | translate}}</label>\n      <select\n        class="bx--select__input"\n        aria-label="{{::\'api_path_parameter_in\' | translate}}"\n        ng-model="newProject.templateName"\n        id="new-project-template"\n        name="templateName"\n        required>\n        <option class="bx--select__option" ng-value="templateName" ng-repeat="templateName in projectTemplates">{{templateName}}</option>\n      </select>\n      <bx-icon class="bx--select__arrow" icon="caret--down"></bx-icon>\n    </div>\n    <div class="bx--select labeledSelect">\n      <label class="bx--form__label" for="new-project-version">{{::\'loopbackVersion\' | translate}}</label>\n      <select\n        class="bx--select__input"\n        aria-label="{{::\'api_path_parameter_in\' | translate}}"\n        ng-model="newProject.version"\n        id="new-project-version"\n        name="version"\n        required>\n        <option class="bx--select__option"\n                ng-value="version.value"\n                ng-repeat="version in versions">{{version.value}} - {{version.description}}</option>\n      </select>\n      <bx-icon class="bx--select__arrow" icon="caret--down"></bx-icon>\n    </div>\n    <bx-input-container>\n      <label for="new-project-display-name">{{::\'projects_add_label_display\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.displayName"\n             id="new-project-display-name"\n             name="displayName"\n             unique-project-attrib="displayName"\n             required/>\n      <div ng-messages="form.displayName.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-displayName">\n          {{::\'projects_invalid_displayName\' | translate:duplicateProject}}\n        </div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-name">{{::\'projects_add_label_name\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.name"\n             id="new-project-name"\n             name="name"\n             unique-project-attrib="name"\n             readonly\n             required/>\n      <div ng-messages="form.name.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-name">\n          {{::\'projects_invalid_name\' | translate:duplicateProject}}\n        </div>\n      </div>\n    </bx-input-container>\n    <label class="bx--form__label-required bx--form__label" for="new-project-path">\n      {{::\'projects_add_label_directory\' | translate}}\n    </label>\n    <div class="displayInline itsAllRelative flex">\n      <input type="text"\n             class="bx--text__input"\n             ng-model="newProject.path"\n             id="new-project-path"\n             name="path"\n             unique-project-attrib="path"\n             placeholder="{{::\'browseFolders\' | translate}}"\n             ng-click="openFilepicker()"\n             readonly\n             required>\n      <button class="bx--btn open-filepicker no-animate"\n              ng-show="!isSubmittingProject"\n              ng-click="openFilepicker()">{{::\'browse\' | translate}}</button>\n    </div>\n    <div ng-messages="form.path.$error">\n      <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      <div class="bx--form__requirements" ng-message="unique-project-path">\n        {{::\'projects_invalid_path\' | translate:duplicateProject}}\n      </div>\n    </div>\n  </form>\n</div>\n<div class="bx--modal-content no-animate" ng-show="(isSubmittingProject || isProjectFinished) && !projectsFilepicker.show">\n  <apim-log-viewer logs="logs"\n                   status="status"\n                   log-error="projectCreationError"></apim-log-viewer>\n</div>\n<div class="bx--modal-content filepicker no-animate" ng-class="projectsFilepicker.flow" ng-show="projectsFilepicker.show">\n  <apim-projects-filepicker\n    project="newProject"\n    projects-filepicker="projectsFilepicker"\n    update-path="updatePath(path)"\n    cancel-add-project="cancelAddProject()"\n    add-path-to-project="addPathToProject"></apim-projects-filepicker>\n</div>\n<div class="bx--modal__buttons">\n  <div class="bx--modal__buttons-container no-animate" ng-show="!projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject(true)"\n            ng-hide="isSubmittingProject || isProjectFinished"\n            type="button">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn"\n            ng-click="addLoopbackProject(form)"\n            ng-show="!isProjectFinished && !isSubmittingProject">{{::\'add\' | translate }}</button>\n    <button class="bx--btn"\n            ng-show="isSubmittingProject || isProjectFinished"\n            ng-disabled="isSubmittingProject"\n            ng-click="closeAddProject()"\n            type="button">{{::\'finished\' | translate }}</button>\n  </div>\n  <div class="bx--modal__buttons-container no-animate" ng-show="projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject(false)">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn" ng-click="addPathToProject()">{{::\'ok\' | translate}}</button>\n  </div>\n</div>\n';
},{}],17:[function(require,module,exports){
module.exports = '<h2 class="bx--modal-content__heading no-animate" ng-show="!projectsFilepicker.show">{{::\'projectNewOpenApi\' | translate}}</h2>\n<h2 class="bx--modal-content__heading no-animate" ng-if="projectsFilepicker.flow == \'add-loopback\' || projectsFilepicker.flow == \'add-openapi\'" ng-show="projectsFilepicker.show">{{::\'projectSelectFolder\' | translate}}</h2>\n<button title="Close" class="bx--modal__close" type="button" ng-disabled="isSubmittingProject"         data-ng-click="cancelAddProject(true)" tabindex="-1">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<div class="bx--modal-content bx--add-openapi-modal no-animate" ng-show="!projectsFilepicker.show">\n  <form id="new-project-form" class="bx--form" name="form" novalidate>\n    <div class="bx--select labeledSelect" ng-if="enableTemplateSelection">\n      <label class="bx--form__label" for="new-project-template">{{::\'projectTemplate\' | translate}}</label>\n      <select\n        class="bx--select__input"\n        aria-label="{{::\'api_path_parameter_in\' | translate}}"\n        ng-model="newProject.templateName"\n        id="new-project-template"\n        name="templateName"\n        required>\n        <option class="bx--select__option" ng-value="templateName" ng-repeat="templateName in projectTemplates">{{templateName}}</option>\n      </select>\n      <bx-icon class="bx--select__arrow" icon="caret--down"></bx-icon>\n    </div>\n    <bx-input-container>\n      <label for="new-project-display-name">{{::\'projects_add_label_display\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.displayName"\n             id="new-project-display-name"\n             name="displayName"\n             unique-project-attrib="displayName"\n             required/>\n      <div ng-messages="form.displayName.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-displayName">{{::\'projects_invalid_displayName\' | translate:duplicateProject}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-name">{{::\'projects_add_label_name\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.name"\n             id="new-project-name"\n             name="name"\n             unique-project-attrib="name"\n             readonly\n             required/>\n      <div ng-messages="form.name.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-name">{{::\'projects_invalid_name\' | translate:duplicateProject}}</div>\n      </div>\n    </bx-input-container>\n    <label class="bx--form__label-required bx--form__label" for="new-project-path">{{::\'projects_add_label_directory\' | translate}}</label>\n    <div class="displayInline itsAllRelative flex">\n      <input type="text"\n             class="bx--text__input"\n             ng-model="newProject.path"\n             id="new-project-path"\n             name="path"\n             unique-project-attrib="path"\n             placeholder="{{::\'browseFolders\' | translate}}"\n             ng-click="openFilepicker()"\n             readonly\n             required/>\n      <button class="bx--btn open-filepicker" ng-click="openFilepicker()">{{::\'browse\' | translate}}</button>\n    </div>\n    <div ng-messages="form.path.$error">\n      <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      <div class="bx--form__requirements" ng-message="unique-project-path">{{::\'projects_invalid_path\' | translate:duplicateProject}}</div>\n    </div>\n  </form>\n</div>\n<div class="bx--modal-content filepicker no-animate" ng-class="projectsFilepicker.flow" ng-show="projectsFilepicker.show">\n  <apim-projects-filepicker\n    project="newProject"\n    projects-filepicker="projectsFilepicker"\n    update-path="updatePath(path)"\n    cancel-add-project="cancelAddProject()"\n    add-path-to-project="addPathToProject"></apim-projects-filepicker>\n</div>\n<div class="bx--modal__buttons">\n  <div class="bx--modal__buttons-container no-animate" ng-show="!projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject(true)"\n            type="button">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn" ng-click="addOpenApiProject(form)" ng-disabled="isSubmittingProject">{{::\'add\' | translate}}</button>\n  </div>\n  <div class="bx--modal__buttons-container no-animate" ng-show="projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject(false)">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn" ng-click="addPathToProject()">{{::\'ok\' | translate}}</button>\n  </div>\n</div>\n';
},{}],18:[function(require,module,exports){
module.exports = '<h2 class="bx--modal-content__heading no-animate" ng-show="!projectsFilepicker.show">{{::\'projects_list_add_existing\' | translate}}</h2>\n<h2 class="bx--modal-content__heading no-animate" ng-show="projectsFilepicker.show">{{::\'projectSelectProject\' | translate}}</h2>\n<button title="Close" class="bx--modal__close no-animate" type="button" ng-disabled="isSubmittingProject" data-ng-click="cancelAddProject()" tabindex="-1" ng-show="!projectsFilepicker.show">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<button title="Close" class="bx--modal__close no-animate" type="button" data-ng-click="cancelAddProject(false)" tabindex="-1" ng-show="projectsFilepicker.show">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<div class="bx--modal-content bx--new-project-modal no-animate" ng-show="!projectsFilepicker.show">\n  <form id="new-project-form" class="bx--form" name="form" novalidate>\n    <bx-input-container>\n      <label for="new-project-display-name">{{::\'projects_add_label_display\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.displayName"\n             id="new-project-display-name"\n             name="displayName"\n             unique-project-attrib="displayName"\n             required/>\n      <div ng-messages="form.displayName.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-displayName">{{::\'projects_invalid_displayName\' | translate:duplicateProject}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-name">{{::\'projects_add_label_name\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.name"\n             id="new-project-name"\n             name="name"\n             unique-project-attrib="name"\n             required\n             readonly/>\n      <div ng-messages="form.name.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-name">{{::\'projects_invalid_name\' | translate:duplicateProject}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container flex="100" class="has-link">\n      <label for="new-project-path">{{::\'projects_add_label_directory\' | translate}}</label>\n      <div class="displayInline itsAllRelative flex">\n        <input type="text"\n               ng-model="newProject.path"\n               id="new-project-path"\n               name="path"\n               unique-project-attrib="path"\n               placeholder="{{::\'browseFolders\' | translate}}"\n               ng-click="openFilepicker()"\n               required\n               readonly/>\n        <button class="bx--btn open-filepicker" ng-click="openFilepicker()">{{::\'browse\' | translate}}</button>\n      </div>\n      <div ng-messages="form.path.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-path">{{::\'projects_invalid_path\' | translate:duplicateProject}}</div>\n      </div>\n    </bx-input-container>\n  </form>\n</div>\n<div class="bx--modal-content filepicker no-animate" ng-class="projectsFilepicker.flow" ng-show="projectsFilepicker.show">\n  <apim-projects-filepicker\n    project="newProject"\n    projects-filepicker="projectsFilepicker"\n    update-path="updatePath(path)"\n    update-name="updateName(file)"\n    cancel-add-project="cancelAddProject()"\n    add-path-to-project="addPathToProject"></apim-projects-filepicker>\n</div>\n<div class="bx--modal__buttons">\n  <div class="bx--modal__buttons-container no-animate" ng-show="!projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject()"\n            type="button" class="cancelButton">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn" ng-click="addProject(form)" ng-disabled="isSubmittingProject">{{::\'projects_add_button_existing\' | translate}}</button>\n  </div>\n  <div class="bx--modal__buttons-container no-animate" ng-show="projectsFilepicker.show">\n    <button class="bx--btn--secondary"\n            ng-click="cancelAddProject(false)">{{::\'cancel\' | translate}}</button>\n    <button class="bx--btn" ng-click="addPathToProject()">{{::\'ok\' | translate}}</button>\n  </div>\n</div>\n';
},{}],19:[function(require,module,exports){
module.exports = '<li class="node-item" ng-class="{ selected: root.selectedFile.path == node.path, \'loopback-app\': node.isLoopback }">\n  <span ng-if="node.type == \'file\' || node.type == \'symlink\'">\n    <i class="material-icons file">insert_drive_file</i>\n    {{node.name}}\n  </span>\n  <a href="#"\n     class="arrow-link"\n     ng-click="getFilesAndSelectNode($event, node)">\n    <i class="material-icons directory" ng-if="!node.files.files.isOpen">keyboard_arrow_right</i>\n    <i class="material-icons directory" ng-if="node.files.files.isOpen">keyboard_arrow_down</i>\n  </a>\n  <a href="#"\n     ng-click="selectNode($event, node)"\n     ng-dblclick="getFiles(node)"\n     ng-if="node.type == \'directory\'">\n    {{ node.name }}\n    <span class="pill" ng-if="node.isLoopback">LB</span>\n  </a>\n  <apim-node-tree nodes="node.files.files"\n                  root="root"\n                  ng-if="showChildNodes"></apim-node-tree>\n</li>\n';
},{}],20:[function(require,module,exports){
module.exports = '<div class="node-tree" ng-class="{\'isOpen\': nodes.isOpen }">\n  <ul>\n    <apim-node-item ng-repeat="node in nodes" node="node" root="root"></apim-node-item>\n  </ul>\n</div>\n';
},{}],21:[function(require,module,exports){
module.exports = '<h2 class="bx--modal-content__heading">{{::\'projectSettings\' | translate}}</h2>\n<button title="Close" class="bx--modal__close" type="button" data-ng-click="cancelProjectSettings()" tabindex="-1">\n  <bx-icon class="bx--modal__close--icon" icon="close"></bx-icon>\n</button>\n<form id="new-project-form" ng-submit="updateOpenApiProject(form)" name="form" novalidate>\n  <div class="bx--modal-content modal-body">\n    <bx-input-container>\n      <label for="new-project-display-name">{{::\'projects_add_label_display\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.displayName"\n             id="new-project-display-name"\n             name="displayName"\n             unique-project-attrib="displayName"\n             unique-project-attrib-skip-active-project="true"\n             required/>\n      <div ng-messages="form.displayName.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n        <div class="bx--form__requirements" ng-message="unique-project-displayName">{{::\'projects_invalid_displayName\' | translate}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-name">{{::\'projects_add_label_name\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.name"\n             id="new-project-name"\n             name="name"\n             required\n             readonly/>\n      <div ng-messages="form.name.$error">\n        <div class="bx--form__requirements" ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      </div>\n    </bx-input-container>\n    <bx-input-container>\n      <label for="new-project-path">{{::\'projects_add_label_directory\' | translate}}</label>\n      <input type="text"\n             ng-model="newProject.path"\n             id="new-project-path"\n             name="path"\n             required\n             readonly/>\n      <div ng-messages="form.path.$error">\n        <div ng-message="required">{{::\'projects_add_field_required\' | translate}}</div>\n      </div>\n    </bx-input-container>\n  </div>\n  <div class="bx--modal__buttons">\n    <div class="bx--modal__buttons-container">\n      <button class="bx--btn--secondary" ng-click="cancelProjectSettings()" type="button">{{::\'cancel\' | translate}}</button>\n      <button class="bx--btn" ng-disabled="isSubmittingProject">{{::\'save\' | translate}}</button>\n    </div>\n  </div>\n</form>\n';
},{}],22:[function(require,module,exports){
module.exports = '<div class="project-item">\n  <p>\n    <span>{{project.displayName}} - {{project.name}} - {{project.path}}</span>\n    <button ng-click="setCurrentProject(project)">Set as current project</button>\n    <button ng-click="deleteProject(project)">Delete</button>\n  </p>\n</div>\n';
},{}],23:[function(require,module,exports){
module.exports = '<div>\n  <div class="navHeader">\n    <a href="" data-ng-click="setVisibleSection(\'projects\')">\n      <h5>{{::\'section-projects\' | translate}}</h5>\n    </a>\n    <span class="dropdown" dropdown data-is-open="projectMenuOpen">\n      <button class="textOnlyButton dropdown-toggle" style="line-height: 49px;" role="button" dropdown-toggle>\n        <i class="material-icons">control_point</i>\n      </button>\n      <ul class="dropdown-menu" role="menu" onkeypress="projectMenuOpen = true;">\n        <li role="menuitem">\n          <a href="" data-ng-click="openAddNewOpenApiProject();"><span class="pill">OA</span> {{::\'projects_nav_add_new_openapi_project\' | translate}}</a>\n        </li>\n        <li role="menuitem">\n          <a href="" data-ng-click="openAddNewLoopbackProject();"><span class="pill">LB</span> {{::\'projects_nav_add_new_loopback_project\' | translate}}</a>\n        </li>\n        <li role="menuitem">\n          <a href="" data-ng-click="openAddExistingProject();">{{::\'projects_nav_add_existing_project\' | translate}}</a>\n        </li>\n      </ul>\n    </span>\n  </div>\n  <div class="clearBoth"></div>\n  <ul>\n    <li class="navItem"\n        data-ng-repeat="project in projects"\n        data-ng-class="{ selected: project.id == $root.activeProject.id }">\n      <a href=""\n         data-ng-click="setCurrentProject($event, project);"\n         tooltip="{{project.displayName}}">\n        <span class="display-name">{{project.displayName}}</span>\n        <span class="pill" ng-if="project.projectType == \'unknown\'">OA</span>\n        <span class="pill" ng-if="project.projectType == \'loopback\'">LB</span>\n      </a>\n      <span class="delete-project" data-ng-click="deleteProject(project)">\n        <i class="material-icons">highlight_off</i>\n      </span>\n    </li>\n  </ul>\n</div>\n';
},{}],24:[function(require,module,exports){
module.exports = '<li class="node-item" ng-class="{ selected: root.selectedFile.path == node.path }">\n  <a href="#"\n     ng-click="selectNode($event, node)"\n     ng-if="node.type == \'directory\'">\n    <span>{{ node.name }}</span>\n    <em ng-if="node.isLoopback">Loopback</em>\n  </a>\n</li>\n';
},{}],25:[function(require,module,exports){
module.exports = '<div class="node-tree">\n  <ul>\n    <apim-project-node-item ng-repeat="node in nodes"\n                            node="node"\n                            root="root"></apim-project-node-item>\n  </ul>\n</div>\n';
},{}],26:[function(require,module,exports){
module.exports = '<div class="tree-container">\n  <section class="primary-tree">\n    <apim-node-tree\n      nodes="files.files.files"\n      select-node="selectNode($event, node)"\n      root="root"></apim-node-tree>\n  </section>\n  <section ng-if="projectsFilepicker.flow == \'add-existing\'"\n           class="secondary-tree">\n    <apim-project-nodes nodes="currentNode.files.files"\n                        ng-if="projectsFilepicker.flow == \'add-existing\'"\n                        class="project-nodes"\n                        root="root">\n    </apim-project-nodes>\n  </section>\n</div>\n';
},{}],27:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$log',
  '$state',
  function ProjectItemDirective(
    $log,
    $state
  ) {
  'use strict';

  return {
    restrict: 'E',
    scope: {
      project: '='
    },
    template: require('./partials/project-item.html'),
    controller: [
      '$scope',
      '$rootScope',
      '$localStorage',
      'ProjectsServices',
      function ProjectItemDirectiveController(
        $scope,
        $rootScope,
        $localStorage,
        ProjectsServices
      ) {
      $scope.deleteProject = function(project) {
        ProjectsServices.deleteProject(project)
          .then(function(result) {
            //todo message UI about successful deletion
            $log.log('project %s deleted', project.displayName);
            $rootScope.$emit('event:getProjects');
          });
      };

      $scope.setCurrentProject = function(project) {
        ProjectsServices.setProjectEnvironment(project)
          .then(function(result) {
            $rootScope.activeProject = result;
            $state.go('apis');
          });
      };
    }]
  }
}];


},{"./partials/project-item.html":22}],28:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  function ProjectNavDirective() {
  'use strict';

  return {
    restrict: 'A',
    scope: {
      projects: '='
    },
    template: require('./partials/project-nav.html'),
    controller: [
      '$scope',
      '$log',
      '$rootScope',
      'ConfigServices',
      'ProjectsServices',
      '$mdSidenav',
      '$state',
      '$modal',
      'translateMultipleFilter',
      function ProjectNavDirectiveController(
      $scope,
      $log,
      $rootScope,
      ConfigServices,
      ProjectsServices,
      $mdSidenav,
      $state,
      $modal,
      translateMultipleFilter
    ){

      $rootScope.$watch('projects', function(newVal){
        if (!newVal) return;
        $scope.projects = newVal;
      });

      $scope.setVisibleSection = $scope.$parent.setVisibleSection;
      $scope.openAddNewOpenApiProject = $scope.$parent.openAddNewOpenApiProject;
      $scope.openAddNewLoopbackProject = $scope.$parent.openAddNewLoopbackProject;
      $scope.openAddExistingProject = $scope.$parent.openAddExistingProject;


      $scope.setCurrentProject = function($event, project){
        $event.preventDefault();
        $rootScope.originalProject = $rootScope.activeProject;

        ConfigServices.inspectPath(project.path)
          .then(function(data){
            return ProjectsServices.setProjectEnvironment(project)
              .then(function(result){
                $rootScope.activeProject = result;

                $mdSidenav('mainNav').close();

                if ($state.current.name === 'apis') {
                  return $state.reload();
                }

                return $state.go('apis');
              });
          })
          .catch(function(err){
            $log.error(err);

            if (err.data.indexOf('ENOENT: no such file or directory')) {
              $log.log('project does not exist, reverting back to previous');
              $rootScope.activeProject = $rootScope.originalProject;
              $rootScope.workspaceDir = $rootScope.originalProject;
              $state.reload();
            }
          });
      };

      $scope.deleteProject = function(project){
        // open modal for confirmation
        $scope.confirmation = {
          titleKey: 'projects_confirm_delete_title',
          message: translateMultipleFilter('projects_confirm_delete', {
            displayName: project.displayName
          }),
          confirmed: function() {
            $scope.isProjectModal = false;
            ProjectsServices.deleteProject(project)
              .then(function(result){
                $log.log('project %s deleted', project.displayName);
                //set workspace to next available project when deleting active project
                if ( $rootScope.activeProject.path === project.path ) {
                  //find next available project that isn't the one we just deleted
                  $rootScope.workspaceDir = $rootScope.projects.filter(function(proj) {
                      return proj.path !== project.path;
                    })[0] || null;

                  if ( $rootScope.workspaceDir ) {
                    // get project object
                    ConfigServices.inspectPath($rootScope.workspaceDir.path)
                      .then(function(pathResult){
                        ProjectsServices.setProjectEnvironment(pathResult);
                      })
                      .catch(function(err){
                        $log.error(err);
                      });
                  }
                }

                $rootScope.$emit('event:getAllProjects');
              });
          },
          rejected: function() {
          }
        };

        // todo: confirm this works as a dropin module
        // $rootScope.$emit('event:openConfirmModal', $scope);

        $modal.open({
          templateUrl: 'apim/partials/confirmation.html',
          windowTemplateUrl: 'apim/partials/main-template.html',
          controller: 'ConfirmationController',
          size: 'sm',
          scope: $scope
        });
      };
    }]
  };
}];


},{"./partials/project-nav.html":23}],29:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  function ProjectNodeItemController(
    $scope
  ) {
  'use strict';

  $scope.selectNode = $scope.root.selectNode;
}];


},{}],30:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [function ProjectNodeItemDirective() {
  'use strict';

  return {
    restrict: 'E',
    replace: true,
    scope: {
      node: '=',
      root: '='
    },
    template: require('./partials/project-node-item.html'),
    controller: 'ProjectNodeItemController'
  }
}];


},{"./partials/project-node-item.html":24}],31:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  function ProjectNodesController(
    $scope
  ) {
  'use strict';

  $scope.selectNode = $scope.root.selectNode;
}];


},{}],32:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [function ProjectNodesDirective() {
  'use strict';

  return {
    restrict: 'E',
    replace: true,
    scope: {
      nodes: '=',
      root: '='
    },
    template: require('./partials/project-nodes.html'),
    controller: 'ProjectNodesController'
  }
}];


},{"./partials/project-nodes.html":25}],33:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [
  '$scope',
  '$rootScope',
  'FileServices',
  'ConfigServices',
  function ProjectsFilepickerController(
  $scope,
  $rootScope,
  FileServices,
  ConfigServices
) {
  'use strict';

  $scope.root = $scope;
  $scope.currentNode = null;
  $scope.selectedFile = null;
  $scope.selectedCrumb = null;
  $scope.files = {};


  getInitialFiles();


  function getInitialFiles(){
    // start at root directory
    FileServices.getListByPath({path: '/'})
      .then(function(items){
        appendNodes(items);
        FileServices.getListByPath({path: $rootScope.workspaceDir.path})
          .then(function(items){
            var parents = items.parents;
            parents = parents.slice(1, parents.length);

            async.eachSeries(parents, function(parent, cb){
              FileServices.getListByPath({path: parent.path})
                .then(function(items){
                  appendNodes(items);
                  cb(null);
                });
            }, function(err){
              $scope.selectNode(null, { path: parents[parents.length-1].path});
            });
          })
      });
  }

  $scope.cancelFilepicker = function() {
    $scope.projectsFilepicker.show = false;
  };

  $scope.addPathToProject = function() {
    $scope.updatePath({path: $scope.selectedFile.path});

    if ($scope.updateName){

      if ($scope.selectedFile.isLoopback){
        // lookup app name for loopback apps
        ConfigServices.inspectPath($scope.selectedFile.path)
          .then(function(result) {
            $scope.selectedFile.name = result.name;
            $scope.updateName({file: $scope.selectedFile});
            $scope.projectsFilepicker.show = false;
          });
      } else {
        $scope.updateName({file: $scope.selectedFile});
        $scope.projectsFilepicker.show = false;
      }
    }
  };

  $scope.selectNode = function($event, node, toggle) {
    if ($event) {
      $event.preventDefault();
    }

    $scope.selectedFile = node;

    // toggle node-tree open/close flag
    if (toggle && node.files && node.files.files){
      node.files.files.isOpen = !node.files.files.isOpen;
    }
  };

  $scope.selectItem = function($event, item) {
    $event.preventDefault();
    $scope.selectedFile = item;
  };

  $scope.getFiles = function(item) {
    FileServices.getListByPath({path: item.path})
      .then(appendNodes);
  };

  function findNode(node, match) {
    if (node.path === match.path) {
      return node;
    } else if (node.files && node.files.files) {
      var result = null;

      for (var i=0, l=node.files.files.length; i<l; i++){
        result = findNode(node.files.files[i], match);

        if (result) {
          break;
        }
      }

      return result;
    }

    return null;
  }

  function appendNodes(items) {
    // only show directories in file picker and skip dirs that start with a dot
    items.files = items.files.filter(function(file){
      return file.type === 'directory' && file.name.indexOf('.') !== 0;
    });

    items.cwd.link = false;
    $scope.currentNode = findNode($scope.files, items.cwd);

    if ($scope.currentNode){
      $scope.currentNode.files = items;
      //set node-tree to open by default
      $scope.currentNode.files.files.isOpen = true;
    }

    if (!$scope.currentNode) {
      $scope.files.files = items;
      $scope.currentNode = items.cwd;
    }
  }
}];


},{}],34:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
module.exports = [function ProjectsFilepickerDirective() {
  'use strict';

  return {
    restrict: 'E',
    replace: true,
    scope: {
      project: '=',
      projectsFilepicker: '=',
      cancelAddProject: '&',
      updatePath: '&',
      updateName: '&',
      addPathToProject: '='
    },
    template: require('./partials/projects-filepicker.html'),
    controller: 'ProjectsFilepickerController'
  }
}];


},{"./partials/projects-filepicker.html":26}],35:[function(require,module,exports){
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-Z22, 5725-Z63, 5725-U33, 5725-Z63
 *
 * (C) Copyright IBM Corporation 2017
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/
'use strict';


module.exports = [
  '$http',
  '$log',
  '$q',
  '$localStorage',
  '$modal',
  '$rootScope',
  'Workspace',
  function ProjectsServices(
  $http,
  $log,
  $q,
  $localStorage,
  $modal,
  $rootScope,
  Workspace
){
  var svc = {};

  svc.openAddNewOpenApiProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-openapi-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddOpenApiProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.openAddNewLoopbackProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-loopback-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddLoopbackProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.openAddExistingProject = function($event, $scope){
    $scope.isProjectModal = true;
    $modal.open({
      template: require('./partials/new-project.html'),
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: 'AddProjectController',
      size: 'lg',
      scope: $scope
    });
  };

  svc.showProjectSettings = function($event, $scope){
    // defaults
    var controller =  'OpenApiSettingsController';
    var templateOpenApi = require('./partials/openapi-project-settings.html');
    var templateLoopback = require('./partials/loopback-project-settings.html');
    var template = templateOpenApi;

    // override defaults if loopback project
    if ($scope.activeProject.projectType === 'loopback'){
      controller =  'LoopbackSettingsController';
      template = templateLoopback;
    }

    $modal.open({
      template: template,
      windowTemplateUrl: 'apim/partials/main-template.html',
      controller: controller,
      size: 'md',
      scope: $scope
    });
  };

  svc.getProjects = function(){
    return $http.get('/project-list/Projects');
  };

  svc.addProject = function(data){
    var project = data;

    return $http.post('/project-list/Projects', project)
      .then(function(result){
        $localStorage.setItem('activeProject', result.data);
        return result;
      });
  };

  svc.updateProject = function(data){
    var project = data;

    return $http.put('/project-list/Projects/'+project.id, project)
      .then(function(result){
        $localStorage.setItem('activeProject', result.data);

        return result;
      });
  };

  svc.deleteProject = function(project){
    return $http['delete']('/project-list/Projects/'+project.id)
      .then(function(result){
        return $localStorage.removeItem('activeProject');
      });
  };

  svc.setProjectEnvironment = function(project){
    var def = $q.defer();

    if ( !project.path ) {
      def.reject(new Error('no project path defined'));
    } else {
      Workspace.loadWorkspace({ path: project.path }, function(){
        $localStorage.setItem('activeProject', project);
        def.resolve(project);
      });
    }

    return def.promise;
  };

  svc.getWorkspaceEnvironment = function(){
    return Workspace.getWorkspace().$promise
      .then(function(result){
        if ( result.path === 'undefined' ) {
          delete result.path;
        }

        return result;
      });
  };

  svc.getDuplicateProjects = function($scope, newObj){
    if (!Object.keys(newObj).length || !$scope.projects.length) return;

    // get duplicate project if exists
    var duplicateProjects = $scope.projects.filter(function(project) {
      return project.displayName === newObj.displayName ||
        project.path === newObj.path ||
        project.name === newObj.name;
    });

    $scope.duplicateProject = Boolean(duplicateProjects.length) && duplicateProjects.shift();
  };

  // global events
  $rootScope.$on('event:projects:addNewOpenApiProject', svc.openAddNewOpenApiProject.bind(svc));
  $rootScope.$on('event:projects:openAddNewLoopbackProject', svc.openAddNewLoopbackProject.bind(svc));
  $rootScope.$on('event:projects:openAddExistingProject', svc.openAddExistingProject.bind(svc));
  $rootScope.$on('event:projects:showProjectSettings', svc.showProjectSettings.bind(svc));

  return svc;
}];


},{"./partials/loopback-project-settings.html":15,"./partials/new-loopback-project.html":16,"./partials/new-openapi-project.html":17,"./partials/new-project.html":18,"./partials/openapi-project-settings.html":21}],36:[function(require,module,exports){
module.exports = ".apim .add-new-project{padding:2rem;}.apim .add-new-project .spinner-container{display:inline-block;margin-right:1rem;position:relative;width:2rem;height:2rem;}.apim .add-new-project .spinner-container .spinner{position:absolute;top:.5rem;display:inline-block;margin:0;width:2rem;height:2rem}.apim .add-new-project h1{line-height:1.2}.apim .add-new-project md-input-container.has-link{position:relative;}.apim .add-new-project md-input-container.has-link input{width:80%}.apim .add-new-project md-input-container.has-link a.open-filepicker{position:absolute;top:3px;right:0;}.apim .projects-menu .navHeader,.apim .projects-menu .navItem{position:relative;}.apim .projects-menu .navHeader .display-name,.apim .projects-menu .navItem .display-name{display:inline-block;overflow-x:hidden;-o-text-overflow:ellipsis;text-overflow:ellipsis;white-space:nowrap;width:76%}.apim .projects-menu .navHeader .pill,.apim .projects-menu .navItem .pill{position:absolute;right:2.4rem}.apim .projects-menu .delete-project{position:absolute;top:.8rem;right:.9rem;}.apim .projects-menu .navItem .delete-project{display:none;}.apim .projects-menu .navItem .delete-project i{font-size:1.2rem}.apim .projects-menu .navItem:hover .delete-project{display:block;}.apim .projects-menu .navItem:hover .delete-project:hover{color:$apim-navitem-delete-hover-color}.apim .projects-menu .navItem.selected .delete-project{display:none}.apim .projects-menu .dropdown{position:absolute;top:0;right:.5rem;}.apim .projects-menu .dropdown .dropdown-menu{position:absolute;left:-215px;}.apim .projects-menu .dropdown .dropdown-menu .pill{position:relative;right:auto}.projects-filepicker-deprecated .files{margin-bottom:2rem;max-height:60vh;overflow-y:auto;padding-left:0;}.projects-filepicker-deprecated .files li:nth-child(odd){background-color:$apim-filepicker-odd-bg}.projects-filepicker-deprecated .files .selected a{background:$apim-filepicker-selected-bg;color:$apim-filepicker-selected-color}.projects-filepicker-deprecated .files .selected .material-icons.directory,.projects-filepicker-deprecated .files .selected .material-icons.file,.projects-filepicker-deprecated .files .selected .material-icons.symlink{color:$apim-filepicker-selected-icon-color}.projects-filepicker-deprecated .files li{display:-webkit-box;display:-moz-box;display:-webkit-flex;display:-ms-flexbox;display:box;display:flex;-webkit-box-orient:vertical;-moz-box-orient:vertical;-o-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-moz-box-pack:center;-o-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;resize:vertical}.projects-filepicker-deprecated .files li > span,.projects-filepicker-deprecated .files li > a{color:$apim-filepicker-file-color;padding:.2rem 1rem;resize:vertical;text-decoration:none}.projects-filepicker-deprecated .files .material-icons{font-size:inherit;}.projects-filepicker-deprecated .files .material-icons.directory{color:$apim-filepicker-icon-directory-color}.projects-filepicker-deprecated .files .material-icons.file,.projects-filepicker-deprecated .files .material-icons.symlink{color:$apim-filepicker-icon-file-color}.projects-filepicker-deprecated .cwd{white-space:pre-wrap;word-break:break-all;word-wrap:break-word}#new-project-form footer{display:-webkit-box;display:-moz-box;display:-webkit-flex;display:-ms-flexbox;display:box;display:flex;-webkit-box-pack:justify;-moz-box-pack:justify;-o-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;justify-content:space-between;margin-top:1rem;}#new-project-form footer.no-tertiary{-webkit-box-pack:end;-moz-box-pack:end;-o-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end}.project-settings #new-project-form footer{-webkit-box-pack:end;-moz-box-pack:end;-o-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end}";
},{}]},{},[9]);
